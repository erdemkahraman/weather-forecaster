
senior_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c068  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800c238  0800c238  0001c238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c70c  0800c70c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c70c  0800c70c  0001c70c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c714  0800c714  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c714  0800c714  0001c714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c718  0800c718  0001c718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c71c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  200001e8  0800c904  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  0800c904  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e45  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b04  00000000  00000000  0003605d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00038b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281e1  00000000  00000000  0003a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001329c  00000000  00000000  00062871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5218  00000000  00000000  00075b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ad25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f60  00000000  00000000  0016ad78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c220 	.word	0x0800c220

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c220 	.word	0x0800c220

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9ef 	b.w	80010c8 <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a4 	b.w	80010c8 <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9d08      	ldr	r5, [sp, #32]
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	468c      	mov	ip, r1
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8083 	bne.w	8000f1a <__udivmoddi4+0x116>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4617      	mov	r7, r2
 8000e18:	d947      	bls.n	8000eaa <__udivmoddi4+0xa6>
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	b142      	cbz	r2, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	f1c2 0020 	rsb	r0, r2, #32
 8000e24:	fa24 f000 	lsr.w	r0, r4, r0
 8000e28:	4091      	lsls	r1, r2
 8000e2a:	4097      	lsls	r7, r2
 8000e2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e30:	4094      	lsls	r4, r2
 8000e32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e36:	0c23      	lsrs	r3, r4, #16
 8000e38:	fbbc f6f8 	udiv	r6, ip, r8
 8000e3c:	fa1f fe87 	uxth.w	lr, r7
 8000e40:	fb08 c116 	mls	r1, r8, r6, ip
 8000e44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e48:	fb06 f10e 	mul.w	r1, r6, lr
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x60>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e56:	f080 8119 	bcs.w	800108c <__udivmoddi4+0x288>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 8116 	bls.w	800108c <__udivmoddi4+0x288>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e78:	45a6      	cmp	lr, r4
 8000e7a:	d909      	bls.n	8000e90 <__udivmoddi4+0x8c>
 8000e7c:	193c      	adds	r4, r7, r4
 8000e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e82:	f080 8105 	bcs.w	8001090 <__udivmoddi4+0x28c>
 8000e86:	45a6      	cmp	lr, r4
 8000e88:	f240 8102 	bls.w	8001090 <__udivmoddi4+0x28c>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e94:	eba4 040e 	sub.w	r4, r4, lr
 8000e98:	2600      	movs	r6, #0
 8000e9a:	b11d      	cbz	r5, 8000ea4 <__udivmoddi4+0xa0>
 8000e9c:	40d4      	lsrs	r4, r2
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	b902      	cbnz	r2, 8000eae <__udivmoddi4+0xaa>
 8000eac:	deff      	udf	#255	; 0xff
 8000eae:	fab2 f282 	clz	r2, r2
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d150      	bne.n	8000f58 <__udivmoddi4+0x154>
 8000eb6:	1bcb      	subs	r3, r1, r7
 8000eb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ebc:	fa1f f887 	uxth.w	r8, r7
 8000ec0:	2601      	movs	r6, #1
 8000ec2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0xe4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0xe2>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	f200 80e9 	bhi.w	80010b8 <__udivmoddi4+0x2b4>
 8000ee6:	4684      	mov	ip, r0
 8000ee8:	1ac9      	subs	r1, r1, r3
 8000eea:	b2a3      	uxth	r3, r4
 8000eec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ef8:	fb08 f800 	mul.w	r8, r8, r0
 8000efc:	45a0      	cmp	r8, r4
 8000efe:	d907      	bls.n	8000f10 <__udivmoddi4+0x10c>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x10a>
 8000f08:	45a0      	cmp	r8, r4
 8000f0a:	f200 80d9 	bhi.w	80010c0 <__udivmoddi4+0x2bc>
 8000f0e:	4618      	mov	r0, r3
 8000f10:	eba4 0408 	sub.w	r4, r4, r8
 8000f14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f18:	e7bf      	b.n	8000e9a <__udivmoddi4+0x96>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x12e>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	f000 80b1 	beq.w	8001086 <__udivmoddi4+0x282>
 8000f24:	2600      	movs	r6, #0
 8000f26:	e9c5 0100 	strd	r0, r1, [r5]
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	fab3 f683 	clz	r6, r3
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d14a      	bne.n	8000fd0 <__udivmoddi4+0x1cc>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d302      	bcc.n	8000f44 <__udivmoddi4+0x140>
 8000f3e:	4282      	cmp	r2, r0
 8000f40:	f200 80b8 	bhi.w	80010b4 <__udivmoddi4+0x2b0>
 8000f44:	1a84      	subs	r4, r0, r2
 8000f46:	eb61 0103 	sbc.w	r1, r1, r3
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	468c      	mov	ip, r1
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d0a8      	beq.n	8000ea4 <__udivmoddi4+0xa0>
 8000f52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f56:	e7a5      	b.n	8000ea4 <__udivmoddi4+0xa0>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f60:	4097      	lsls	r7, r2
 8000f62:	fa01 f002 	lsl.w	r0, r1, r2
 8000f66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6a:	40d9      	lsrs	r1, r3
 8000f6c:	4330      	orrs	r0, r6
 8000f6e:	0c03      	lsrs	r3, r0, #16
 8000f70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f74:	fa1f f887 	uxth.w	r8, r7
 8000f78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f80:	fb06 f108 	mul.w	r1, r6, r8
 8000f84:	4299      	cmp	r1, r3
 8000f86:	fa04 f402 	lsl.w	r4, r4, r2
 8000f8a:	d909      	bls.n	8000fa0 <__udivmoddi4+0x19c>
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f92:	f080 808d 	bcs.w	80010b0 <__udivmoddi4+0x2ac>
 8000f96:	4299      	cmp	r1, r3
 8000f98:	f240 808a 	bls.w	80010b0 <__udivmoddi4+0x2ac>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	443b      	add	r3, r7
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b281      	uxth	r1, r0
 8000fa4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fa8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb0:	fb00 f308 	mul.w	r3, r0, r8
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x1c4>
 8000fb8:	1879      	adds	r1, r7, r1
 8000fba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fbe:	d273      	bcs.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d971      	bls.n	80010a8 <__udivmoddi4+0x2a4>
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	4439      	add	r1, r7
 8000fc8:	1acb      	subs	r3, r1, r3
 8000fca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fce:	e778      	b.n	8000ec2 <__udivmoddi4+0xbe>
 8000fd0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fd4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fd8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fdc:	431c      	orrs	r4, r3
 8000fde:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fe2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fe6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fee:	431f      	orrs	r7, r3
 8000ff0:	0c3b      	lsrs	r3, r7, #16
 8000ff2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff6:	fa1f f884 	uxth.w	r8, r4
 8000ffa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001002:	fb09 fa08 	mul.w	sl, r9, r8
 8001006:	458a      	cmp	sl, r1
 8001008:	fa02 f206 	lsl.w	r2, r2, r6
 800100c:	fa00 f306 	lsl.w	r3, r0, r6
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x220>
 8001012:	1861      	adds	r1, r4, r1
 8001014:	f109 30ff 	add.w	r0, r9, #4294967295
 8001018:	d248      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800101a:	458a      	cmp	sl, r1
 800101c:	d946      	bls.n	80010ac <__udivmoddi4+0x2a8>
 800101e:	f1a9 0902 	sub.w	r9, r9, #2
 8001022:	4421      	add	r1, r4
 8001024:	eba1 010a 	sub.w	r1, r1, sl
 8001028:	b2bf      	uxth	r7, r7
 800102a:	fbb1 f0fe 	udiv	r0, r1, lr
 800102e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001032:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001036:	fb00 f808 	mul.w	r8, r0, r8
 800103a:	45b8      	cmp	r8, r7
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x24a>
 800103e:	19e7      	adds	r7, r4, r7
 8001040:	f100 31ff 	add.w	r1, r0, #4294967295
 8001044:	d22e      	bcs.n	80010a4 <__udivmoddi4+0x2a0>
 8001046:	45b8      	cmp	r8, r7
 8001048:	d92c      	bls.n	80010a4 <__udivmoddi4+0x2a0>
 800104a:	3802      	subs	r0, #2
 800104c:	4427      	add	r7, r4
 800104e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001052:	eba7 0708 	sub.w	r7, r7, r8
 8001056:	fba0 8902 	umull	r8, r9, r0, r2
 800105a:	454f      	cmp	r7, r9
 800105c:	46c6      	mov	lr, r8
 800105e:	4649      	mov	r1, r9
 8001060:	d31a      	bcc.n	8001098 <__udivmoddi4+0x294>
 8001062:	d017      	beq.n	8001094 <__udivmoddi4+0x290>
 8001064:	b15d      	cbz	r5, 800107e <__udivmoddi4+0x27a>
 8001066:	ebb3 020e 	subs.w	r2, r3, lr
 800106a:	eb67 0701 	sbc.w	r7, r7, r1
 800106e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001072:	40f2      	lsrs	r2, r6
 8001074:	ea4c 0202 	orr.w	r2, ip, r2
 8001078:	40f7      	lsrs	r7, r6
 800107a:	e9c5 2700 	strd	r2, r7, [r5]
 800107e:	2600      	movs	r6, #0
 8001080:	4631      	mov	r1, r6
 8001082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e70b      	b.n	8000ea4 <__udivmoddi4+0xa0>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e9      	b.n	8000e64 <__udivmoddi4+0x60>
 8001090:	4618      	mov	r0, r3
 8001092:	e6fd      	b.n	8000e90 <__udivmoddi4+0x8c>
 8001094:	4543      	cmp	r3, r8
 8001096:	d2e5      	bcs.n	8001064 <__udivmoddi4+0x260>
 8001098:	ebb8 0e02 	subs.w	lr, r8, r2
 800109c:	eb69 0104 	sbc.w	r1, r9, r4
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7df      	b.n	8001064 <__udivmoddi4+0x260>
 80010a4:	4608      	mov	r0, r1
 80010a6:	e7d2      	b.n	800104e <__udivmoddi4+0x24a>
 80010a8:	4660      	mov	r0, ip
 80010aa:	e78d      	b.n	8000fc8 <__udivmoddi4+0x1c4>
 80010ac:	4681      	mov	r9, r0
 80010ae:	e7b9      	b.n	8001024 <__udivmoddi4+0x220>
 80010b0:	4666      	mov	r6, ip
 80010b2:	e775      	b.n	8000fa0 <__udivmoddi4+0x19c>
 80010b4:	4630      	mov	r0, r6
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0x14a>
 80010b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010bc:	4439      	add	r1, r7
 80010be:	e713      	b.n	8000ee8 <__udivmoddi4+0xe4>
 80010c0:	3802      	subs	r0, #2
 80010c2:	443c      	add	r4, r7
 80010c4:	e724      	b.n	8000f10 <__udivmoddi4+0x10c>
 80010c6:	bf00      	nop

080010c8 <__aeabi_idiv0>:
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2203      	movs	r2, #3
 80010f0:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2203      	movs	r2, #3
 80010f6:	715a      	strb	r2, [r3, #5]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af04      	add	r7, sp, #16
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	460b      	mov	r3, r1
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800111e:	7afb      	ldrb	r3, [r7, #11]
 8001120:	b29a      	uxth	r2, r3
 8001122:	8af9      	ldrh	r1, [r7, #22]
 8001124:	f241 3388 	movw	r3, #5000	; 0x1388
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2302      	movs	r3, #2
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2301      	movs	r3, #1
 8001136:	f003 f8eb 	bl	8004310 <HAL_I2C_Mem_Read>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10b      	bne.n	8001158 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001140:	7d7b      	ldrb	r3, [r7, #21]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7d3b      	ldrb	r3, [r7, #20]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21b      	sxth	r3, r3
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	801a      	strh	r2, [r3, #0]
		return true;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <read_register16+0x56>
	} else
		return false;
 8001158:	2300      	movs	r3, #0

}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b08b      	sub	sp, #44	; 0x2c
 8001166:	af04      	add	r7, sp, #16
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	461a      	mov	r2, r3
 800116e:	460b      	mov	r3, r1
 8001170:	72fb      	strb	r3, [r7, #11]
 8001172:	4613      	mov	r3, r2
 8001174:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001182:	7afb      	ldrb	r3, [r7, #11]
 8001184:	b29a      	uxth	r2, r3
 8001186:	7abb      	ldrb	r3, [r7, #10]
 8001188:	b29b      	uxth	r3, r3
 800118a:	8af9      	ldrh	r1, [r7, #22]
 800118c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001190:	9402      	str	r4, [sp, #8]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	f003 f8b9 	bl	8004310 <HAL_I2C_Mem_Read>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <read_data+0x46>
		return 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <read_data+0x48>
	else
		return 1;
 80011a8:	2301      	movs	r3, #1

}
 80011aa:	4618      	mov	r0, r3
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd90      	pop	{r4, r7, pc}

080011b2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	461a      	mov	r2, r3
 80011be:	2188      	movs	r1, #136	; 0x88
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff9f 	bl	8001104 <read_register16>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d06f      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3302      	adds	r3, #2
 80011d0:	461a      	mov	r2, r3
 80011d2:	218a      	movs	r1, #138	; 0x8a
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff95 	bl	8001104 <read_register16>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d065      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3304      	adds	r3, #4
 80011e4:	461a      	mov	r2, r3
 80011e6:	218c      	movs	r1, #140	; 0x8c
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff8b 	bl	8001104 <read_register16>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05b      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3306      	adds	r3, #6
 80011f8:	461a      	mov	r2, r3
 80011fa:	218e      	movs	r1, #142	; 0x8e
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff81 	bl	8001104 <read_register16>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d051      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3308      	adds	r3, #8
 800120c:	461a      	mov	r2, r3
 800120e:	2190      	movs	r1, #144	; 0x90
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff77 	bl	8001104 <read_register16>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d047      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	330a      	adds	r3, #10
 8001220:	461a      	mov	r2, r3
 8001222:	2192      	movs	r1, #146	; 0x92
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff6d 	bl	8001104 <read_register16>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03d      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	330c      	adds	r3, #12
 8001234:	461a      	mov	r2, r3
 8001236:	2194      	movs	r1, #148	; 0x94
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff63 	bl	8001104 <read_register16>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d033      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	330e      	adds	r3, #14
 8001248:	461a      	mov	r2, r3
 800124a:	2196      	movs	r1, #150	; 0x96
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff59 	bl	8001104 <read_register16>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d029      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3310      	adds	r3, #16
 800125c:	461a      	mov	r2, r3
 800125e:	2198      	movs	r1, #152	; 0x98
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff4f 	bl	8001104 <read_register16>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d01f      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3312      	adds	r3, #18
 8001270:	461a      	mov	r2, r3
 8001272:	219a      	movs	r1, #154	; 0x9a
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff45 	bl	8001104 <read_register16>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d015      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3314      	adds	r3, #20
 8001284:	461a      	mov	r2, r3
 8001286:	219c      	movs	r1, #156	; 0x9c
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ff3b 	bl	8001104 <read_register16>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00b      	beq.n	80012ac <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001298:	461a      	mov	r2, r3
 800129a:	219e      	movs	r1, #158	; 0x9e
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff ff31 	bl	8001104 <read_register16>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <read_calibration_data+0xfa>

		return true;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <read_calibration_data+0xfc>
	}

	return false;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f103 0218 	add.w	r2, r3, #24
 80012c4:	2301      	movs	r3, #1
 80012c6:	21a1      	movs	r1, #161	; 0xa1
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff4a 	bl	8001162 <read_data>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d14b      	bne.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	331a      	adds	r3, #26
 80012d8:	461a      	mov	r2, r3
 80012da:	21e1      	movs	r1, #225	; 0xe1
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff11 	bl	8001104 <read_register16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d041      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f103 021c 	add.w	r2, r3, #28
 80012ee:	2301      	movs	r3, #1
 80012f0:	21e3      	movs	r1, #227	; 0xe3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff35 	bl	8001162 <read_data>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d136      	bne.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012fe:	f107 030e 	add.w	r3, r7, #14
 8001302:	461a      	mov	r2, r3
 8001304:	21e4      	movs	r1, #228	; 0xe4
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fefc 	bl	8001104 <read_register16>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d02c      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	461a      	mov	r2, r3
 8001318:	21e5      	movs	r1, #229	; 0xe5
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fef2 	bl	8001104 <read_register16>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d022      	beq.n	800136c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800132c:	2301      	movs	r3, #1
 800132e:	21e7      	movs	r1, #231	; 0xe7
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff16 	bl	8001162 <read_data>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d117      	bne.n	800136c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	b21b      	sxth	r3, r3
 8001342:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001346:	b21a      	sxth	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	121b      	asrs	r3, r3, #8
 800134c:	b21b      	sxth	r3, r3
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800135c:	89bb      	ldrh	r3, [r7, #12]
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	b29b      	uxth	r3, r3
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	841a      	strh	r2, [r3, #32]

		return true;
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <read_hum_calibration_data+0xb8>
	}

	return false;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001376:	b580      	push	{r7, lr}
 8001378:	b088      	sub	sp, #32
 800137a:	af04      	add	r7, sp, #16
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	460b      	mov	r3, r1
 8001380:	70fb      	strb	r3, [r7, #3]
 8001382:	4613      	mov	r3, r2
 8001384:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	b29a      	uxth	r2, r3
 8001396:	89f9      	ldrh	r1, [r7, #14]
 8001398:	f242 7310 	movw	r3, #10000	; 0x2710
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	f002 fe9e 	bl	80040e8 <HAL_I2C_Mem_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <write_register8+0x40>
		return false;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <write_register8+0x42>
	else
		return true;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013ce:	2b76      	cmp	r3, #118	; 0x76
 80013d0:	d005      	beq.n	80013de <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013d6:	2b77      	cmp	r3, #119	; 0x77
 80013d8:	d001      	beq.n	80013de <bmp280_init+0x1e>

		return false;
 80013da:	2300      	movs	r3, #0
 80013dc:	e099      	b.n	8001512 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80013e4:	2301      	movs	r3, #1
 80013e6:	21d0      	movs	r1, #208	; 0xd0
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff feba 	bl	8001162 <read_data>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <bmp280_init+0x38>
		return false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e08c      	b.n	8001512 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013fe:	2b58      	cmp	r3, #88	; 0x58
 8001400:	d006      	beq.n	8001410 <bmp280_init+0x50>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001408:	2b60      	cmp	r3, #96	; 0x60
 800140a:	d001      	beq.n	8001410 <bmp280_init+0x50>

		return false;
 800140c:	2300      	movs	r3, #0
 800140e:	e080      	b.n	8001512 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001410:	22b6      	movs	r2, #182	; 0xb6
 8001412:	21e0      	movs	r1, #224	; 0xe0
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffae 	bl	8001376 <write_register8>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <bmp280_init+0x64>
		return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e076      	b.n	8001512 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001424:	f107 020c 	add.w	r2, r7, #12
 8001428:	2301      	movs	r3, #1
 800142a:	21f3      	movs	r1, #243	; 0xf3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fe98 	bl	8001162 <read_data>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f5      	bne.n	8001424 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001438:	7b3b      	ldrb	r3, [r7, #12]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff feb5 	bl	80011b2 <read_calibration_data>
 8001448:	4603      	mov	r3, r0
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d100      	bne.n	8001456 <bmp280_init+0x96>
 8001454:	e001      	b.n	800145a <bmp280_init+0x9a>
		return false;
 8001456:	2300      	movs	r3, #0
 8001458:	e05b      	b.n	8001512 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001460:	2b60      	cmp	r3, #96	; 0x60
 8001462:	d10a      	bne.n	800147a <bmp280_init+0xba>
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff26 	bl	80012b6 <read_hum_calibration_data>
 800146a:	4603      	mov	r3, r0
 800146c:	f083 0301 	eor.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <bmp280_init+0xba>
		return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e04b      	b.n	8001512 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	795b      	ldrb	r3, [r3, #5]
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	b25a      	sxtb	r2, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	461a      	mov	r2, r3
 8001494:	21f5      	movs	r1, #245	; 0xf5
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ff6d 	bl	8001376 <write_register8>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <bmp280_init+0xe6>
		return false;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e035      	b.n	8001512 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	78db      	ldrb	r3, [r3, #3]
 80014b8:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014d2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014da:	2b60      	cmp	r3, #96	; 0x60
 80014dc:	d10d      	bne.n	80014fa <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	791b      	ldrb	r3, [r3, #4]
 80014e2:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	461a      	mov	r2, r3
 80014e8:	21f2      	movs	r1, #242	; 0xf2
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff43 	bl	8001376 <write_register8>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <bmp280_init+0x13a>
			return false;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e00b      	b.n	8001512 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	461a      	mov	r2, r3
 80014fe:	21f4      	movs	r1, #244	; 0xf4
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff38 	bl	8001376 <write_register8>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <bmp280_init+0x150>
		return false;
 800150c:	2300      	movs	r3, #0
 800150e:	e000      	b.n	8001512 <bmp280_init+0x152>
	}

	return true;
 8001510:	2301      	movs	r3, #1
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800151a:	b480      	push	{r7}
 800151c:	b087      	sub	sp, #28
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	10da      	asrs	r2, r3, #3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001538:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800153c:	12db      	asrs	r3, r3, #11
 800153e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	111b      	asrs	r3, r3, #4
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	1112      	asrs	r2, r2, #4
 800154e:	68f9      	ldr	r1, [r7, #12]
 8001550:	8809      	ldrh	r1, [r1, #0]
 8001552:	1a52      	subs	r2, r2, r1
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001560:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001564:	139b      	asrs	r3, r3, #14
 8001566:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	441a      	add	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	3380      	adds	r3, #128	; 0x80
 800157e:	121b      	asrs	r3, r3, #8
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b09c      	sub	sp, #112	; 0x70
 8001592:	af00      	add	r7, sp, #0
 8001594:	6578      	str	r0, [r7, #84]	; 0x54
 8001596:	6539      	str	r1, [r7, #80]	; 0x50
 8001598:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800159a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800159c:	461a      	mov	r2, r3
 800159e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015a2:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015a6:	f143 35ff 	adc.w	r5, r3, #4294967295
 80015aa:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b2:	fb03 f102 	mul.w	r1, r3, r2
 80015b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ba:	fb03 f302 	mul.w	r3, r3, r2
 80015be:	18ca      	adds	r2, r1, r3
 80015c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c2:	fba3 4503 	umull	r4, r5, r3, r3
 80015c6:	1953      	adds	r3, r2, r5
 80015c8:	461d      	mov	r5, r3
 80015ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015d6:	fb02 f005 	mul.w	r0, r2, r5
 80015da:	fb04 f103 	mul.w	r1, r4, r3
 80015de:	4401      	add	r1, r0
 80015e0:	fba4 2302 	umull	r2, r3, r4, r2
 80015e4:	4419      	add	r1, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80015ec:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80015f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f6:	b21a      	sxth	r2, r3
 80015f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80015fe:	fb03 f001 	mul.w	r0, r3, r1
 8001602:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001604:	fb02 f101 	mul.w	r1, r2, r1
 8001608:	4408      	add	r0, r1
 800160a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800160c:	fba1 2302 	umull	r2, r3, r1, r2
 8001610:	18c1      	adds	r1, r0, r3
 8001612:	460b      	mov	r3, r1
 8001614:	f04f 0000 	mov.w	r0, #0
 8001618:	f04f 0100 	mov.w	r1, #0
 800161c:	0459      	lsls	r1, r3, #17
 800161e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001622:	0450      	lsls	r0, r2, #17
 8001624:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001628:	eb12 0800 	adds.w	r8, r2, r0
 800162c:	eb43 0901 	adc.w	r9, r3, r1
 8001630:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001636:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800163a:	b21a      	sxth	r2, r3
 800163c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	00d1      	lsls	r1, r2, #3
 800164a:	2000      	movs	r0, #0
 800164c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001650:	1814      	adds	r4, r2, r0
 8001652:	61bc      	str	r4, [r7, #24]
 8001654:	414b      	adcs	r3, r1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800165c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001662:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001664:	fb03 f102 	mul.w	r1, r3, r2
 8001668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800166a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166c:	fb03 f302 	mul.w	r3, r3, r2
 8001670:	18ca      	adds	r2, r1, r3
 8001672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001674:	fba3 4503 	umull	r4, r5, r3, r3
 8001678:	1953      	adds	r3, r2, r5
 800167a:	461d      	mov	r5, r3
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001682:	b21a      	sxth	r2, r3
 8001684:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001688:	fb02 f005 	mul.w	r0, r2, r5
 800168c:	fb04 f103 	mul.w	r1, r4, r3
 8001690:	4401      	add	r1, r0
 8001692:	fba4 2302 	umull	r2, r3, r4, r2
 8001696:	4419      	add	r1, r3
 8001698:	460b      	mov	r3, r1
 800169a:	f04f 0800 	mov.w	r8, #0
 800169e:	f04f 0900 	mov.w	r9, #0
 80016a2:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016a6:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016aa:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016bc:	fb03 f001 	mul.w	r0, r3, r1
 80016c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016c2:	fb02 f101 	mul.w	r1, r2, r1
 80016c6:	1844      	adds	r4, r0, r1
 80016c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016ca:	fba1 0102 	umull	r0, r1, r1, r2
 80016ce:	1863      	adds	r3, r4, r1
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	030b      	lsls	r3, r1, #12
 80016dc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 80016e0:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80016e2:	eb18 0102 	adds.w	r1, r8, r2
 80016e6:	6139      	str	r1, [r7, #16]
 80016e8:	eb49 0303 	adc.w	r3, r9, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016f2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80016f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80016fa:	1c11      	adds	r1, r2, #0
 80016fc:	6439      	str	r1, [r7, #64]	; 0x40
 80016fe:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001702:	647b      	str	r3, [r7, #68]	; 0x44
 8001704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001706:	88db      	ldrh	r3, [r3, #6]
 8001708:	b29a      	uxth	r2, r3
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001712:	4629      	mov	r1, r5
 8001714:	fb02 f001 	mul.w	r0, r2, r1
 8001718:	4621      	mov	r1, r4
 800171a:	fb01 f103 	mul.w	r1, r1, r3
 800171e:	4401      	add	r1, r0
 8001720:	4620      	mov	r0, r4
 8001722:	fba0 2302 	umull	r2, r3, r0, r2
 8001726:	4419      	add	r1, r3
 8001728:	460b      	mov	r3, r1
 800172a:	f04f 0000 	mov.w	r0, #0
 800172e:	f04f 0100 	mov.w	r1, #0
 8001732:	1058      	asrs	r0, r3, #1
 8001734:	17d9      	asrs	r1, r3, #31
 8001736:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 800173a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800173e:	4313      	orrs	r3, r2
 8001740:	d101      	bne.n	8001746 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001742:	2300      	movs	r3, #0
 8001744:	e0e1      	b.n	800190a <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001748:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800174c:	461a      	mov	r2, r3
 800174e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001752:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001758:	105b      	asrs	r3, r3, #1
 800175a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800175c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175e:	07db      	lsls	r3, r3, #31
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
 8001762:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001766:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800176a:	4621      	mov	r1, r4
 800176c:	ebb1 0a02 	subs.w	sl, r1, r2
 8001770:	4629      	mov	r1, r5
 8001772:	eb61 0b03 	sbc.w	fp, r1, r3
 8001776:	4652      	mov	r2, sl
 8001778:	465b      	mov	r3, fp
 800177a:	1891      	adds	r1, r2, r2
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	415b      	adcs	r3, r3
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001786:	eb12 020a 	adds.w	r2, r2, sl
 800178a:	eb43 030b 	adc.w	r3, r3, fp
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	0199      	lsls	r1, r3, #6
 8001798:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800179c:	0190      	lsls	r0, r2, #6
 800179e:	1812      	adds	r2, r2, r0
 80017a0:	eb41 0303 	adc.w	r3, r1, r3
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	0099      	lsls	r1, r3, #2
 80017ae:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017b2:	0090      	lsls	r0, r2, #2
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	eb12 020a 	adds.w	r2, r2, sl
 80017bc:	eb43 030b 	adc.w	r3, r3, fp
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0099      	lsls	r1, r3, #2
 80017ca:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017ce:	0090      	lsls	r0, r2, #2
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	eb12 010a 	adds.w	r1, r2, sl
 80017d8:	6339      	str	r1, [r7, #48]	; 0x30
 80017da:	eb43 030b 	adc.w	r3, r3, fp
 80017de:	637b      	str	r3, [r7, #52]	; 0x34
 80017e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017e8:	f7ff fa6e 	bl	8000cc8 <__aeabi_ldivmod>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017fa:	b218      	sxth	r0, r3
 80017fc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001800:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001804:	f04f 0200 	mov.w	r2, #0
 8001808:	f04f 0300 	mov.w	r3, #0
 800180c:	0b62      	lsrs	r2, r4, #13
 800180e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001812:	136b      	asrs	r3, r5, #13
 8001814:	fb02 f501 	mul.w	r5, r2, r1
 8001818:	fb00 f403 	mul.w	r4, r0, r3
 800181c:	442c      	add	r4, r5
 800181e:	fba0 0102 	umull	r0, r1, r0, r2
 8001822:	1863      	adds	r3, r4, r1
 8001824:	4619      	mov	r1, r3
 8001826:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	0b62      	lsrs	r2, r4, #13
 8001834:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001838:	136b      	asrs	r3, r5, #13
 800183a:	fb02 f501 	mul.w	r5, r2, r1
 800183e:	fb00 f403 	mul.w	r4, r0, r3
 8001842:	442c      	add	r4, r5
 8001844:	fba0 0102 	umull	r0, r1, r0, r2
 8001848:	1863      	adds	r3, r4, r1
 800184a:	4619      	mov	r1, r3
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	0e42      	lsrs	r2, r0, #25
 8001856:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800185a:	164b      	asrs	r3, r1, #25
 800185c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001862:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001866:	b21a      	sxth	r2, r3
 8001868:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800186c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800186e:	fb03 f001 	mul.w	r0, r3, r1
 8001872:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001874:	fb02 f101 	mul.w	r1, r2, r1
 8001878:	1844      	adds	r4, r0, r1
 800187a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800187c:	fba1 0102 	umull	r0, r1, r1, r2
 8001880:	1863      	adds	r3, r4, r1
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	0cc2      	lsrs	r2, r0, #19
 800188e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001892:	14cb      	asrs	r3, r1, #19
 8001894:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001898:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800189c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018a0:	1884      	adds	r4, r0, r2
 80018a2:	62bc      	str	r4, [r7, #40]	; 0x28
 80018a4:	eb41 0303 	adc.w	r3, r1, r3
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018ae:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018b2:	4621      	mov	r1, r4
 80018b4:	1889      	adds	r1, r1, r2
 80018b6:	6239      	str	r1, [r7, #32]
 80018b8:	4629      	mov	r1, r5
 80018ba:	eb43 0101 	adc.w	r1, r3, r1
 80018be:	6279      	str	r1, [r7, #36]	; 0x24
 80018c0:	f04f 0000 	mov.w	r0, #0
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018cc:	4623      	mov	r3, r4
 80018ce:	0a18      	lsrs	r0, r3, #8
 80018d0:	462b      	mov	r3, r5
 80018d2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018d6:	462b      	mov	r3, r5
 80018d8:	1219      	asrs	r1, r3, #8
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018e0:	b21c      	sxth	r4, r3
 80018e2:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	012b      	lsls	r3, r5, #4
 80018f0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018f4:	0122      	lsls	r2, r4, #4
 80018f6:	1884      	adds	r4, r0, r2
 80018f8:	603c      	str	r4, [r7, #0]
 80018fa:	eb41 0303 	adc.w	r3, r1, r3
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001904:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800190a:	4618      	mov	r0, r3
 800190c:	3770      	adds	r7, #112	; 0x70
 800190e:	46bd      	mov	sp, r7
 8001910:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001914 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001926:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	039a      	lsls	r2, r3, #14
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001932:	051b      	lsls	r3, r3, #20
 8001934:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800193c:	4619      	mov	r1, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fb03 f301 	mul.w	r3, r3, r1
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800194a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001952:	4611      	mov	r1, r2
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	fb02 f201 	mul.w	r2, r2, r1
 800195a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	7f09      	ldrb	r1, [r1, #28]
 8001960:	4608      	mov	r0, r1
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	fb01 f100 	mul.w	r1, r1, r0
 8001968:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800196a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800196e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001972:	1292      	asrs	r2, r2, #10
 8001974:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800197e:	fb01 f202 	mul.w	r2, r1, r2
 8001982:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001986:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	13db      	asrs	r3, r3, #15
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	13d2      	asrs	r2, r2, #15
 8001996:	fb02 f303 	mul.w	r3, r2, r3
 800199a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	7e12      	ldrb	r2, [r2, #24]
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80019b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80019ba:	bfa8      	it	ge
 80019bc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80019c0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	131b      	asrs	r3, r3, #12
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b08c      	sub	sp, #48	; 0x30
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80019e6:	2b60      	cmp	r3, #96	; 0x60
 80019e8:	d007      	beq.n	80019fa <bmp280_read_fixed+0x28>
		if (humidity)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <bmp280_read_fixed+0x24>
			*humidity = 0;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <bmp280_read_fixed+0x32>
 8001a00:	2308      	movs	r3, #8
 8001a02:	e000      	b.n	8001a06 <bmp280_read_fixed+0x34>
 8001a04:	2306      	movs	r3, #6
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f107 0218 	add.w	r2, r7, #24
 8001a10:	21f7      	movs	r1, #247	; 0xf7
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff fba5 	bl	8001162 <read_data>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <bmp280_read_fixed+0x50>
		return false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	e038      	b.n	8001a94 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a22:	7e3b      	ldrb	r3, [r7, #24]
 8001a24:	031a      	lsls	r2, r3, #12
 8001a26:	7e7b      	ldrb	r3, [r7, #25]
 8001a28:	011b      	lsls	r3, r3, #4
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	7eba      	ldrb	r2, [r7, #26]
 8001a2e:	0912      	lsrs	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	4313      	orrs	r3, r2
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a36:	7efb      	ldrb	r3, [r7, #27]
 8001a38:	031a      	lsls	r2, r3, #12
 8001a3a:	7f3b      	ldrb	r3, [r7, #28]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	7f7a      	ldrb	r2, [r7, #29]
 8001a42:	0912      	lsrs	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	4313      	orrs	r3, r2
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	461a      	mov	r2, r3
 8001a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fd61 	bl	800151a <compensate_temperature>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	461a      	mov	r2, r3
 8001a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fd91 	bl	800158c <compensate_pressure>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00d      	beq.n	8001a92 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001a76:	7fbb      	ldrb	r3, [r7, #30]
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	7ffa      	ldrb	r2, [r7, #31]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	461a      	mov	r2, r3
 8001a84:	6a39      	ldr	r1, [r7, #32]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff ff44 	bl	8001914 <compensate_humidity>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001a92:	2301      	movs	r3, #1
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <bmp280_read_float+0x1a>
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	e000      	b.n	8001ab8 <bmp280_read_float+0x1c>
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f107 0218 	add.w	r2, r7, #24
 8001abc:	f107 011c 	add.w	r1, r7, #28
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff ff86 	bl	80019d2 <bmp280_read_fixed>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d028      	beq.n	8001b1e <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b28 <bmp280_read_float+0x8c>
 8001ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aee:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b2c <bmp280_read_float+0x90>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b0c:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001b30 <bmp280_read_float+0x94>
 8001b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <bmp280_read_float+0x84>
	}

	return false;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	42c80000 	.word	0x42c80000
 8001b2c:	43800000 	.word	0x43800000
 8001b30:	44800000 	.word	0x44800000

08001b34 <get_time.9732>:
  }

  HAL_UART_Receive_IT(&huart4, zoe.rx_zoe_data, 36);

  void get_time(void)
  {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	f8c7 c004 	str.w	ip, [r7, #4]

  /* Get the RTC current Time */
   HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4906      	ldr	r1, [pc, #24]	; (8001b5c <get_time.9732+0x28>)
 8001b42:	4807      	ldr	r0, [pc, #28]	; (8001b60 <get_time.9732+0x2c>)
 8001b44:	f004 fa46 	bl	8005fd4 <HAL_RTC_GetTime>
  /* Get the RTC current Date */
   HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4906      	ldr	r1, [pc, #24]	; (8001b64 <get_time.9732+0x30>)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <get_time.9732+0x2c>)
 8001b4e:	f004 fb47 	bl	80061e0 <HAL_RTC_GetDate>
  /* Display time Format: hh:mm:ss */

  /* Display date Format: dd-mm-yy */

  }
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200003e8 	.word	0x200003e8
 8001b60:	20000520 	.word	0x20000520
 8001b64:	20000210 	.word	0x20000210

08001b68 <main>:
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
int main(void)
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8001b74:	f000 ffe3 	bl	8002b3e <HAL_Init>
  SystemClock_Config();
 8001b78:	f000 fa1c 	bl	8001fb4 <SystemClock_Config>
  MX_GPIO_Init();
 8001b7c:	f000 fbf4 	bl	8002368 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b80:	f000 fad8 	bl	8002134 <MX_I2C1_Init>
  MX_UART4_Init();
 8001b84:	f000 fb72 	bl	800226c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001b88:	f000 fba0 	bl	80022cc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001b8c:	f000 fa80 	bl	8002090 <MX_ADC1_Init>
  MX_DMA_Init();
 8001b90:	f000 fbcc 	bl	800232c <MX_DMA_Init>
  MX_RTC_Init();
 8001b94:	f000 fb0e 	bl	80021b4 <MX_RTC_Init>
  while (in_voltage < 4.5)
 8001b98:	e031      	b.n	8001bfe <main+0x96>
	  HAL_Delay(100);
 8001b9a:	2064      	movs	r0, #100	; 0x64
 8001b9c:	f001 f82c 	bl	8002bf8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001ba0:	4855      	ldr	r0, [pc, #340]	; (8001cf8 <main+0x190>)
 8001ba2:	f001 f891 	bl	8002cc8 <HAL_ADC_Start>
	  in_voltage_bit = HAL_ADC_GetValue(&hadc1);
 8001ba6:	4854      	ldr	r0, [pc, #336]	; (8001cf8 <main+0x190>)
 8001ba8:	f001 f95c 	bl	8002e64 <HAL_ADC_GetValue>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <main+0x194>)
 8001bb2:	601a      	str	r2, [r3, #0]
	  in_voltage = in_voltage_bit * 0.0087586;
 8001bb4:	4b51      	ldr	r3, [pc, #324]	; (8001cfc <main+0x194>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcd3 	bl	8000564 <__aeabi_i2d>
 8001bbe:	a34a      	add	r3, pc, #296	; (adr r3, 8001ce8 <main+0x180>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd38 	bl	8000638 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff f82a 	bl	8000c28 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <main+0x198>)
 8001bd8:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001be0:	4848      	ldr	r0, [pc, #288]	; (8001d04 <main+0x19c>)
 8001be2:	f002 f9d7 	bl	8003f94 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f001 f806 	bl	8002bf8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf2:	4844      	ldr	r0, [pc, #272]	; (8001d04 <main+0x19c>)
 8001bf4:	f002 f9ce 	bl	8003f94 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f000 fffd 	bl	8002bf8 <HAL_Delay>
  while (in_voltage < 4.5)
 8001bfe:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <main+0x198>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d4c3      	bmi.n	8001b9a <main+0x32>
  HAL_UART_Receive_IT(&huart4, zoe.rx_zoe_data, 36);
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	493c      	ldr	r1, [pc, #240]	; (8001d08 <main+0x1a0>)
 8001c16:	483d      	ldr	r0, [pc, #244]	; (8001d0c <main+0x1a4>)
 8001c18:	f004 fca3 	bl	8006562 <HAL_UART_Receive_IT>


  bmp280_init_default_params(&bmp280.params);
 8001c1c:	483c      	ldr	r0, [pc, #240]	; (8001d10 <main+0x1a8>)
 8001c1e:	f7ff fa55 	bl	80010cc <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <main+0x1ac>)
 8001c24:	2276      	movs	r2, #118	; 0x76
 8001c26:	849a      	strh	r2, [r3, #36]	; 0x24
  bmp280.i2c = &hi2c1;
 8001c28:	4b3a      	ldr	r3, [pc, #232]	; (8001d14 <main+0x1ac>)
 8001c2a:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <main+0x1b0>)
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  bmp280_init(&bmp280, &bmp280.params);
 8001c2e:	4938      	ldr	r1, [pc, #224]	; (8001d10 <main+0x1a8>)
 8001c30:	4838      	ldr	r0, [pc, #224]	; (8001d14 <main+0x1ac>)
 8001c32:	f7ff fbc5 	bl	80013c0 <bmp280_init>
  bool bme280p = bmp280.id == BMP280_CHIP_ID;
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <main+0x1ac>)
 8001c38:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c3c:	2b58      	cmp	r3, #88	; 0x58
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  get_time();
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	f7ff ff72 	bl	8001b34 <get_time.9732>
	      ZOE();
 8001c50:	f000 ff44 	bl	8002adc <ZOE>

	      latitude_w_comma = zoe.lattitude_zoe_m8q / 10000000;
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <main+0x1b4>)
 8001c56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c5a:	a325      	add	r3, pc, #148	; (adr r3, 8001cf0 <main+0x188>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fe14 	bl	800088c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffdc 	bl	8000c28 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <main+0x1b8>)
 8001c74:	6013      	str	r3, [r2, #0]
	      longtitude_w_comma = zoe.longtitude_zoe_m8q / 10000000;
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <main+0x1b4>)
 8001c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c7c:	a31c      	add	r3, pc, #112	; (adr r3, 8001cf0 <main+0x188>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fe03 	bl	800088c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffcb 	bl	8000c28 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <main+0x1bc>)
 8001c96:	6013      	str	r3, [r2, #0]
	      HAL_UART_Receive_IT(&huart4, zoe.rx_zoe_data, 36);
 8001c98:	2224      	movs	r2, #36	; 0x24
 8001c9a:	491b      	ldr	r1, [pc, #108]	; (8001d08 <main+0x1a0>)
 8001c9c:	481b      	ldr	r0, [pc, #108]	; (8001d0c <main+0x1a4>)
 8001c9e:	f004 fc60 	bl	8006562 <HAL_UART_Receive_IT>
	  	  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	4817      	ldr	r0, [pc, #92]	; (8001d04 <main+0x19c>)
 8001ca8:	f002 f974 	bl	8003f94 <HAL_GPIO_WritePin>

		  HAL_ADC_Start(&hadc1);
 8001cac:	4812      	ldr	r0, [pc, #72]	; (8001cf8 <main+0x190>)
 8001cae:	f001 f80b 	bl	8002cc8 <HAL_ADC_Start>
		  in_voltage_bit = HAL_ADC_GetValue(&hadc1);
 8001cb2:	4811      	ldr	r0, [pc, #68]	; (8001cf8 <main+0x190>)
 8001cb4:	f001 f8d6 	bl	8002e64 <HAL_ADC_GetValue>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <main+0x194>)
 8001cbe:	601a      	str	r2, [r3, #0]
		  in_voltage = in_voltage_bit * 0.0087586;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <main+0x194>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fc4d 	bl	8000564 <__aeabi_i2d>
 8001cca:	a307      	add	r3, pc, #28	; (adr r3, 8001ce8 <main+0x180>)
 8001ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd0:	f7fe fcb2 	bl	8000638 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe ffa4 	bl	8000c28 <__aeabi_d2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <main+0x198>)
 8001ce4:	6013      	str	r3, [r2, #0]

		  while (in_voltage < 4.5)
 8001ce6:	e056      	b.n	8001d96 <main+0x22e>
 8001ce8:	64784f9d 	.word	0x64784f9d
 8001cec:	3f81f007 	.word	0x3f81f007
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	416312d0 	.word	0x416312d0
 8001cf8:	20000374 	.word	0x20000374
 8001cfc:	20000660 	.word	0x20000660
 8001d00:	20000658 	.word	0x20000658
 8001d04:	40021400 	.word	0x40021400
 8001d08:	20000630 	.word	0x20000630
 8001d0c:	20000548 	.word	0x20000548
 8001d10:	200005fc 	.word	0x200005fc
 8001d14:	200005d0 	.word	0x200005d0
 8001d18:	200002f8 	.word	0x200002f8
 8001d1c:	20000608 	.word	0x20000608
 8001d20:	20000540 	.word	0x20000540
 8001d24:	20000500 	.word	0x20000500
		  {
			  HAL_ADC_Start(&hadc1);
 8001d28:	4891      	ldr	r0, [pc, #580]	; (8001f70 <main+0x408>)
 8001d2a:	f000 ffcd 	bl	8002cc8 <HAL_ADC_Start>
			  in_voltage_bit = HAL_ADC_GetValue(&hadc1);
 8001d2e:	4890      	ldr	r0, [pc, #576]	; (8001f70 <main+0x408>)
 8001d30:	f001 f898 	bl	8002e64 <HAL_ADC_GetValue>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b8e      	ldr	r3, [pc, #568]	; (8001f74 <main+0x40c>)
 8001d3a:	601a      	str	r2, [r3, #0]
			  in_voltage = in_voltage_bit * 0.0087586;
 8001d3c:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <main+0x40c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fc0f 	bl	8000564 <__aeabi_i2d>
 8001d46:	a388      	add	r3, pc, #544	; (adr r3, 8001f68 <main+0x400>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fc74 	bl	8000638 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	f7fe ff66 	bl	8000c28 <__aeabi_d2f>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4a86      	ldr	r2, [pc, #536]	; (8001f78 <main+0x410>)
 8001d60:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	4885      	ldr	r0, [pc, #532]	; (8001f7c <main+0x414>)
 8001d68:	f002 f914 	bl	8003f94 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f000 ff43 	bl	8002bf8 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d78:	4880      	ldr	r0, [pc, #512]	; (8001f7c <main+0x414>)
 8001d7a:	f002 f90b 	bl	8003f94 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001d7e:	2064      	movs	r0, #100	; 0x64
 8001d80:	f000 ff3a 	bl	8002bf8 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d8a:	487c      	ldr	r0, [pc, #496]	; (8001f7c <main+0x414>)
 8001d8c:	f002 f902 	bl	8003f94 <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8001d90:	2064      	movs	r0, #100	; 0x64
 8001d92:	f000 ff31 	bl	8002bf8 <HAL_Delay>
		  while (in_voltage < 4.5)
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <main+0x410>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 8001da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da8:	d4be      	bmi.n	8001d28 <main+0x1c0>
		  }



		  bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 8001daa:	4b75      	ldr	r3, [pc, #468]	; (8001f80 <main+0x418>)
 8001dac:	4a75      	ldr	r2, [pc, #468]	; (8001f84 <main+0x41c>)
 8001dae:	4976      	ldr	r1, [pc, #472]	; (8001f88 <main+0x420>)
 8001db0:	4876      	ldr	r0, [pc, #472]	; (8001f8c <main+0x424>)
 8001db2:	f7ff fe73 	bl	8001a9c <bmp280_read_float>

		  pressure_uinteger = pressure;
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <main+0x41c>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dc0:	ee17 2a90 	vmov	r2, s15
 8001dc4:	4b72      	ldr	r3, [pc, #456]	; (8001f90 <main+0x428>)
 8001dc6:	601a      	str	r2, [r3, #0]
		  temperature_uinteger = temperature;
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	; (8001f88 <main+0x420>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd2:	ee17 2a90 	vmov	r2, s15
 8001dd6:	4b6f      	ldr	r3, [pc, #444]	; (8001f94 <main+0x42c>)
 8001dd8:	601a      	str	r2, [r3, #0]
		  //temperature < 5  :: humidity > 70 :: weather == 0x32
		  //temperature > 15 && temperature < 30 :: humidity < 50 :: weather == 0x33
		  //temperature > 30 && humidity < 30 weather == 0x34
		  //humidity > 80 weather == 0x35

		  if(temperature_uinteger < 15)
 8001dda:	4b6e      	ldr	r3, [pc, #440]	; (8001f94 <main+0x42c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b0e      	cmp	r3, #14
 8001de0:	d802      	bhi.n	8001de8 <main+0x280>
		  {
			  weather = 0x61;
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <main+0x430>)
 8001de4:	2261      	movs	r2, #97	; 0x61
 8001de6:	701a      	strb	r2, [r3, #0]
		  }

		  if(temperature_uinteger < 5 && humidity > 70)
 8001de8:	4b6a      	ldr	r3, [pc, #424]	; (8001f94 <main+0x42c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d80c      	bhi.n	8001e0a <main+0x2a2>
 8001df0:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <main+0x418>)
 8001df2:	edd3 7a00 	vldr	s15, [r3]
 8001df6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001f9c <main+0x434>
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd02      	ble.n	8001e0a <main+0x2a2>
		  {
			  weather = 0x62;
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <main+0x430>)
 8001e06:	2262      	movs	r2, #98	; 0x62
 8001e08:	701a      	strb	r2, [r3, #0]
		  }

		  if(temperature_uinteger > 15 && temperature_uinteger < 30 && humidity < 50)
 8001e0a:	4b62      	ldr	r3, [pc, #392]	; (8001f94 <main+0x42c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	d910      	bls.n	8001e34 <main+0x2cc>
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <main+0x42c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b1d      	cmp	r3, #29
 8001e18:	d80c      	bhi.n	8001e34 <main+0x2cc>
 8001e1a:	4b59      	ldr	r3, [pc, #356]	; (8001f80 <main+0x418>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001fa0 <main+0x438>
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	d502      	bpl.n	8001e34 <main+0x2cc>
		  {
			  weather = 0x63;
 8001e2e:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <main+0x430>)
 8001e30:	2263      	movs	r2, #99	; 0x63
 8001e32:	701a      	strb	r2, [r3, #0]
		  }

		  if(temperature_uinteger > 30 && humidity < 30)
 8001e34:	4b57      	ldr	r3, [pc, #348]	; (8001f94 <main+0x42c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b1e      	cmp	r3, #30
 8001e3a:	d90c      	bls.n	8001e56 <main+0x2ee>
 8001e3c:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <main+0x418>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4e:	d502      	bpl.n	8001e56 <main+0x2ee>
		  {
			  weather = 0x64;
 8001e50:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <main+0x430>)
 8001e52:	2264      	movs	r2, #100	; 0x64
 8001e54:	701a      	strb	r2, [r3, #0]
		  }

		  if(humidity > 80)
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <main+0x418>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001fa4 <main+0x43c>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	dd02      	ble.n	8001e70 <main+0x308>
		  {
			  weather = 0x65;
 8001e6a:	4b4b      	ldr	r3, [pc, #300]	; (8001f98 <main+0x430>)
 8001e6c:	2265      	movs	r2, #101	; 0x65
 8001e6e:	701a      	strb	r2, [r3, #0]
		  }


		  esp_dummy[0] = 0x31;
 8001e70:	4b4d      	ldr	r3, [pc, #308]	; (8001fa8 <main+0x440>)
 8001e72:	2231      	movs	r2, #49	; 0x31
 8001e74:	701a      	strb	r2, [r3, #0]
		  esp_dummy[1] = temperature_uinteger;
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <main+0x42c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b4a      	ldr	r3, [pc, #296]	; (8001fa8 <main+0x440>)
 8001e7e:	705a      	strb	r2, [r3, #1]
		  esp_dummy[2] = pressure_uinteger >> 24;
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <main+0x428>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e1b      	lsrs	r3, r3, #24
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <main+0x440>)
 8001e8a:	709a      	strb	r2, [r3, #2]
		  esp_dummy[3] = pressure_uinteger >> 16;
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <main+0x428>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	0c1b      	lsrs	r3, r3, #16
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <main+0x440>)
 8001e96:	70da      	strb	r2, [r3, #3]
		  esp_dummy[4] = pressure_uinteger >>  8;
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <main+0x428>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <main+0x440>)
 8001ea2:	711a      	strb	r2, [r3, #4]
		  esp_dummy[5] = pressure_uinteger;
 8001ea4:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <main+0x428>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <main+0x440>)
 8001eac:	715a      	strb	r2, [r3, #5]
		  esp_dummy[6] = humidity;
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <main+0x418>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ebc:	793b      	ldrb	r3, [r7, #4]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <main+0x440>)
 8001ec2:	719a      	strb	r2, [r3, #6]
		  esp_dummy[7] = weather;
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <main+0x430>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <main+0x440>)
 8001eca:	71da      	strb	r2, [r3, #7]
		  esp_dummy[8] = 0x15;
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <main+0x440>)
 8001ece:	2215      	movs	r2, #21
 8001ed0:	721a      	strb	r2, [r3, #8]
		  esp_dummy[9] = zoe.rx_zoe_data[10];
 8001ed2:	4b36      	ldr	r3, [pc, #216]	; (8001fac <main+0x444>)
 8001ed4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <main+0x440>)
 8001eda:	725a      	strb	r2, [r3, #9]
		  esp_dummy[10] = zoe.rx_zoe_data[11];
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <main+0x444>)
 8001ede:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <main+0x440>)
 8001ee4:	729a      	strb	r2, [r3, #10]
		  esp_dummy[11] = zoe.rx_zoe_data[12];
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <main+0x444>)
 8001ee8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001eec:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <main+0x440>)
 8001eee:	72da      	strb	r2, [r3, #11]
		  esp_dummy[12] = zoe.rx_zoe_data[13];
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <main+0x444>)
 8001ef2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <main+0x440>)
 8001ef8:	731a      	strb	r2, [r3, #12]
		  esp_dummy[13] = zoe.rx_zoe_data[14];
 8001efa:	4b2c      	ldr	r3, [pc, #176]	; (8001fac <main+0x444>)
 8001efc:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8001f00:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <main+0x440>)
 8001f02:	735a      	strb	r2, [r3, #13]
          esp_dummy[14] = zoe.rx_zoe_data[15];
 8001f04:	4b29      	ldr	r3, [pc, #164]	; (8001fac <main+0x444>)
 8001f06:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <main+0x440>)
 8001f0c:	739a      	strb	r2, [r3, #14]
		  esp_dummy[15] = zoe.rx_zoe_data[16];
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <main+0x444>)
 8001f10:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <main+0x440>)
 8001f16:	73da      	strb	r2, [r3, #15]
	      esp_dummy[16] = zoe.rx_zoe_data[17];
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <main+0x444>)
 8001f1a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <main+0x440>)
 8001f20:	741a      	strb	r2, [r3, #16]
		  esp_dummy[17] = zoe.rx_zoe_data[22];
 8001f22:	4b22      	ldr	r3, [pc, #136]	; (8001fac <main+0x444>)
 8001f24:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <main+0x440>)
 8001f2a:	745a      	strb	r2, [r3, #17]
	      esp_dummy[18] = zoe.rx_zoe_data[23];
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <main+0x444>)
 8001f2e:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001f32:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <main+0x440>)
 8001f34:	749a      	strb	r2, [r3, #18]
		  esp_dummy[19] = zoe.rx_zoe_data[24];
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <main+0x444>)
 8001f38:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <main+0x440>)
 8001f3e:	74da      	strb	r2, [r3, #19]
		  esp_dummy[20] = zoe.rx_zoe_data[25];
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <main+0x444>)
 8001f42:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <main+0x440>)
 8001f48:	751a      	strb	r2, [r3, #20]
		  esp_dummy[21] = 0x32;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <main+0x440>)
 8001f4c:	2232      	movs	r2, #50	; 0x32
 8001f4e:	755a      	strb	r2, [r3, #21]
		  sprintf(sbuf, "Latitude %f\n\ ", latitude_w_comma);
		  HAL_UART_Transmit(&huart3, sbuf, 19, 10);
		  sprintf(sbuf, "Longtitude %f\n\ ", longtitude_w_comma);
		  HAL_UART_Transmit(&huart3, sbuf, 21, 10);
		  HAL_Delay(1);*/
		  HAL_UART_Transmit(&huart3, esp_dummy , 22, 100);
 8001f50:	2364      	movs	r3, #100	; 0x64
 8001f52:	2216      	movs	r2, #22
 8001f54:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <main+0x440>)
 8001f56:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <main+0x448>)
 8001f58:	f004 fa70 	bl	800643c <HAL_UART_Transmit>

		  HAL_Delay(10);
 8001f5c:	200a      	movs	r0, #10
 8001f5e:	f000 fe4b 	bl	8002bf8 <HAL_Delay>
	  	  get_time();
 8001f62:	e670      	b.n	8001c46 <main+0xde>
 8001f64:	f3af 8000 	nop.w
 8001f68:	64784f9d 	.word	0x64784f9d
 8001f6c:	3f81f007 	.word	0x3f81f007
 8001f70:	20000374 	.word	0x20000374
 8001f74:	20000660 	.word	0x20000660
 8001f78:	20000658 	.word	0x20000658
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	200003c0 	.word	0x200003c0
 8001f84:	20000360 	.word	0x20000360
 8001f88:	2000035c 	.word	0x2000035c
 8001f8c:	200005d0 	.word	0x200005d0
 8001f90:	2000065c 	.word	0x2000065c
 8001f94:	200005cc 	.word	0x200005cc
 8001f98:	20000546 	.word	0x20000546
 8001f9c:	428c0000 	.word	0x428c0000
 8001fa0:	42480000 	.word	0x42480000
 8001fa4:	42a00000 	.word	0x42a00000
 8001fa8:	20000344 	.word	0x20000344
 8001fac:	20000608 	.word	0x20000608
 8001fb0:	20000274 	.word	0x20000274

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	2230      	movs	r2, #48	; 0x30
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 fd00 	bl	80079c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <SystemClock_Config+0xd4>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	; (8002088 <SystemClock_Config+0xd4>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b28      	ldr	r3, [pc, #160]	; (8002088 <SystemClock_Config+0xd4>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	4b26      	ldr	r3, [pc, #152]	; (800208c <SystemClock_Config+0xd8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a25      	ldr	r2, [pc, #148]	; (800208c <SystemClock_Config+0xd8>)
 8001ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <SystemClock_Config+0xd8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002008:	230a      	movs	r3, #10
 800200a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200c:	2301      	movs	r3, #1
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002010:	2310      	movs	r3, #16
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002014:	2301      	movs	r3, #1
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002020:	2308      	movs	r3, #8
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002024:	23d8      	movs	r3, #216	; 0xd8
 8002026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002028:	2302      	movs	r3, #2
 800202a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800202c:	2302      	movs	r3, #2
 800202e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002030:	f107 0320 	add.w	r3, r7, #32
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fe13 	bl	8004c60 <HAL_RCC_OscConfig>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002040:	f000 f9ea 	bl	8002418 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002044:	f002 fdbc 	bl	8004bc0 <HAL_PWREx_EnableOverDrive>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800204e:	f000 f9e3 	bl	8002418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002052:	230f      	movs	r3, #15
 8002054:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002062:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002068:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800206a:	f107 030c 	add.w	r3, r7, #12
 800206e:	2107      	movs	r1, #7
 8002070:	4618      	mov	r0, r3
 8002072:	f003 f899 	bl	80051a8 <HAL_RCC_ClockConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800207c:	f000 f9cc 	bl	8002418 <Error_Handler>
  }
}
 8002080:	bf00      	nop
 8002082:	3750      	adds	r7, #80	; 0x50
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000

08002090 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002096:	463b      	mov	r3, r7
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <MX_ADC1_Init+0x98>)
 80020a4:	4a21      	ldr	r2, [pc, #132]	; (800212c <MX_ADC1_Init+0x9c>)
 80020a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <MX_ADC1_Init+0x98>)
 80020aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <MX_ADC1_Init+0x98>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <MX_ADC1_Init+0x98>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020c2:	4b19      	ldr	r3, [pc, #100]	; (8002128 <MX_ADC1_Init+0x98>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ca:	4b17      	ldr	r3, [pc, #92]	; (8002128 <MX_ADC1_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <MX_ADC1_Init+0xa0>)
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020d6:	4b14      	ldr	r3, [pc, #80]	; (8002128 <MX_ADC1_Init+0x98>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <MX_ADC1_Init+0x98>)
 80020de:	2201      	movs	r2, #1
 80020e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <MX_ADC1_Init+0x98>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <MX_ADC1_Init+0x98>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020f0:	480d      	ldr	r0, [pc, #52]	; (8002128 <MX_ADC1_Init+0x98>)
 80020f2:	f000 fda5 	bl	8002c40 <HAL_ADC_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020fc:	f000 f98c 	bl	8002418 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002100:	2300      	movs	r3, #0
 8002102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002104:	2301      	movs	r3, #1
 8002106:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002108:	2300      	movs	r3, #0
 800210a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	; (8002128 <MX_ADC1_Init+0x98>)
 8002112:	f000 feb5 	bl	8002e80 <HAL_ADC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800211c:	f000 f97c 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000374 	.word	0x20000374
 800212c:	40012000 	.word	0x40012000
 8002130:	0f000001 	.word	0x0f000001

08002134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_I2C1_Init+0x74>)
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <MX_I2C1_Init+0x78>)
 800213c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <MX_I2C1_Init+0x7c>)
 8002142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_I2C1_Init+0x74>)
 800214c:	2201      	movs	r2, #1
 800214e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_I2C1_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_I2C1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002170:	f001 ff2a 	bl	8003fc8 <HAL_I2C_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800217a:	f000 f94d 	bl	8002418 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800217e:	2100      	movs	r1, #0
 8002180:	4809      	ldr	r0, [pc, #36]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002182:	f002 fc85 	bl	8004a90 <HAL_I2CEx_ConfigAnalogFilter>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800218c:	f000 f944 	bl	8002418 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002190:	2100      	movs	r1, #0
 8002192:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_I2C1_Init+0x74>)
 8002194:	f002 fcc7 	bl	8004b26 <HAL_I2CEx_ConfigDigitalFilter>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800219e:	f000 f93b 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200002f8 	.word	0x200002f8
 80021ac:	40005400 	.word	0x40005400
 80021b0:	20404768 	.word	0x20404768

080021b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021d0:	4b24      	ldr	r3, [pc, #144]	; (8002264 <MX_RTC_Init+0xb0>)
 80021d2:	4a25      	ldr	r2, [pc, #148]	; (8002268 <MX_RTC_Init+0xb4>)
 80021d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <MX_RTC_Init+0xb0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021dc:	4b21      	ldr	r3, [pc, #132]	; (8002264 <MX_RTC_Init+0xb0>)
 80021de:	227f      	movs	r2, #127	; 0x7f
 80021e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021e2:	4b20      	ldr	r3, [pc, #128]	; (8002264 <MX_RTC_Init+0xb0>)
 80021e4:	22ff      	movs	r2, #255	; 0xff
 80021e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <MX_RTC_Init+0xb0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	; (8002264 <MX_RTC_Init+0xb0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_RTC_Init+0xb0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021fa:	481a      	ldr	r0, [pc, #104]	; (8002264 <MX_RTC_Init+0xb0>)
 80021fc:	f003 fd9a 	bl	8005d34 <HAL_RTC_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002206:	f000 f907 	bl	8002418 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800220a:	2300      	movs	r3, #0
 800220c:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 800220e:	2300      	movs	r3, #0
 8002210:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8002212:	2300      	movs	r3, #0
 8002214:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2201      	movs	r2, #1
 8002224:	4619      	mov	r1, r3
 8002226:	480f      	ldr	r0, [pc, #60]	; (8002264 <MX_RTC_Init+0xb0>)
 8002228:	f003 fe16 	bl	8005e58 <HAL_RTC_SetTime>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002232:	f000 f8f1 	bl	8002418 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8002236:	2305      	movs	r3, #5
 8002238:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_APRIL;
 800223a:	2304      	movs	r3, #4
 800223c:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x29;
 800223e:	2329      	movs	r3, #41	; 0x29
 8002240:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x22;
 8002242:	2322      	movs	r3, #34	; 0x22
 8002244:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2201      	movs	r2, #1
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_RTC_Init+0xb0>)
 800224e:	f003 ff1f 	bl	8006090 <HAL_RTC_SetDate>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002258:	f000 f8de 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000520 	.word	0x20000520
 8002268:	40002800 	.word	0x40002800

0800226c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <MX_UART4_Init+0x58>)
 8002272:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <MX_UART4_Init+0x5c>)
 8002274:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <MX_UART4_Init+0x58>)
 8002278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800227c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <MX_UART4_Init+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_UART4_Init+0x58>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_UART4_Init+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <MX_UART4_Init+0x58>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <MX_UART4_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <MX_UART4_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <MX_UART4_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <MX_UART4_Init+0x58>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022ae:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_UART4_Init+0x58>)
 80022b0:	f004 f876 	bl	80063a0 <HAL_UART_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80022ba:	f000 f8ad 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000548 	.word	0x20000548
 80022c8:	40004c00 	.word	0x40004c00

080022cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <MX_USART3_UART_Init+0x5c>)
 80022d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022f2:	220c      	movs	r2, #12
 80022f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_USART3_UART_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <MX_USART3_UART_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_USART3_UART_Init+0x58>)
 800230a:	2200      	movs	r2, #0
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_USART3_UART_Init+0x58>)
 8002310:	f004 f846 	bl	80063a0 <HAL_UART_Init>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800231a:	f000 f87d 	bl	8002418 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000274 	.word	0x20000274
 8002328:	40004800 	.word	0x40004800

0800232c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_DMA_Init+0x38>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <MX_DMA_Init+0x38>)
 8002338:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_DMA_Init+0x38>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	200d      	movs	r0, #13
 8002350:	f001 f8c1 	bl	80034d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002354:	200d      	movs	r0, #13
 8002356:	f001 f8da 	bl	800350e <HAL_NVIC_EnableIRQ>

}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800

08002368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]
 8002378:	609a      	str	r2, [r3, #8]
 800237a:	60da      	str	r2, [r3, #12]
 800237c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <MX_GPIO_Init+0xa8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a23      	ldr	r2, [pc, #140]	; (8002410 <MX_GPIO_Init+0xa8>)
 8002384:	f043 0320 	orr.w	r3, r3, #32
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <MX_GPIO_Init+0xa8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	613b      	str	r3, [r7, #16]
 8002394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MX_GPIO_Init+0xa8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <MX_GPIO_Init+0xa8>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a17      	ldr	r2, [pc, #92]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a11      	ldr	r2, [pc, #68]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_GPIO_Init+0xa8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7|GPIO_PIN_14, GPIO_PIN_RESET);
 80023de:	2200      	movs	r2, #0
 80023e0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <MX_GPIO_Init+0xac>)
 80023e6:	f001 fdd5 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF7 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_14;
 80023ea:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80023ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	4619      	mov	r1, r3
 8002402:	4804      	ldr	r0, [pc, #16]	; (8002414 <MX_GPIO_Init+0xac>)
 8002404:	f001 fc1a 	bl	8003c3c <HAL_GPIO_Init>

}
 8002408:	bf00      	nop
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	40021400 	.word	0x40021400

08002418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800241c:	b672      	cpsid	i
}
 800241e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002420:	e7fe      	b.n	8002420 <Error_Handler+0x8>
	...

08002424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_MspInit+0x44>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <HAL_MspInit+0x44>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_MspInit+0x44>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_MspInit+0x44>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_MspInit+0x44>)
 8002448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244c:	6453      	str	r3, [r2, #68]	; 0x44
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_MspInit+0x44>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	; 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_ADC_MspInit+0x74>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d123      	bne.n	80024d6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800248e:	4b15      	ldr	r3, [pc, #84]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_ADC_MspInit+0x78>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024be:	2301      	movs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024c2:	2303      	movs	r3, #3
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <HAL_ADC_MspInit+0x7c>)
 80024d2:	f001 fbb3 	bl	8003c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3728      	adds	r7, #40	; 0x28
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40012000 	.word	0x40012000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000

080024ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0aa      	sub	sp, #168	; 0xa8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	2284      	movs	r2, #132	; 0x84
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f005 fa5b 	bl	80079c8 <memset>
  if(hi2c->Instance==I2C1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_I2C_MspInit+0xb0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d13b      	bne.n	8002594 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800251c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002520:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002522:	2300      	movs	r3, #0
 8002524:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4618      	mov	r0, r3
 800252c:	f003 f812 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002536:	f7ff ff6f 	bl	8002418 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002552:	23c0      	movs	r3, #192	; 0xc0
 8002554:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	2312      	movs	r3, #18
 800255a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800256a:	2304      	movs	r3, #4
 800256c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002574:	4619      	mov	r1, r3
 8002576:	480b      	ldr	r0, [pc, #44]	; (80025a4 <HAL_I2C_MspInit+0xb8>)
 8002578:	f001 fb60 	bl	8003c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a07      	ldr	r2, [pc, #28]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 8002582:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002586:	6413      	str	r3, [r2, #64]	; 0x40
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_I2C_MspInit+0xb4>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	37a8      	adds	r7, #168	; 0xa8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40005400 	.word	0x40005400
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020400 	.word	0x40020400

080025a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0a4      	sub	sp, #144	; 0x90
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2284      	movs	r2, #132	; 0x84
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f005 fa05 	bl	80079c8 <memset>
  if(hrtc->Instance==RTC)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_RTC_MspInit+0x54>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d114      	bne.n	80025f2 <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025c8:	2320      	movs	r3, #32
 80025ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d2:	f107 030c 	add.w	r3, r7, #12
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 ffbc 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80025e2:	f7ff ff19 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RTC_MspInit+0x58>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_RTC_MspInit+0x58>)
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025f2:	bf00      	nop
 80025f4:	3790      	adds	r7, #144	; 0x90
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40002800 	.word	0x40002800
 8002600:	40023800 	.word	0x40023800

08002604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0ac      	sub	sp, #176	; 0xb0
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800261c:	f107 0318 	add.w	r3, r7, #24
 8002620:	2284      	movs	r2, #132	; 0x84
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f005 f9cf 	bl	80079c8 <memset>
  if(huart->Instance==UART4)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a5f      	ldr	r2, [pc, #380]	; (80027ac <HAL_UART_MspInit+0x1a8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d174      	bne.n	800271e <HAL_UART_MspInit+0x11a>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002638:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800263a:	2300      	movs	r3, #0
 800263c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0318 	add.w	r3, r7, #24
 8002642:	4618      	mov	r0, r3
 8002644:	f002 ff86 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800264e:	f7ff fee3 	bl	8002418 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002652:	4b57      	ldr	r3, [pc, #348]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a56      	ldr	r2, [pc, #344]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b54      	ldr	r3, [pc, #336]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b4e      	ldr	r3, [pc, #312]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002682:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002690:	2301      	movs	r3, #1
 8002692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800269c:	2308      	movs	r3, #8
 800269e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026a6:	4619      	mov	r1, r3
 80026a8:	4842      	ldr	r0, [pc, #264]	; (80027b4 <HAL_UART_MspInit+0x1b0>)
 80026aa:	f001 fac7 	bl	8003c3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80026ae:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026b0:	4a42      	ldr	r2, [pc, #264]	; (80027bc <HAL_UART_MspInit+0x1b8>)
 80026b2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ce:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d6:	4b38      	ldr	r3, [pc, #224]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026e4:	4b34      	ldr	r3, [pc, #208]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80026f0:	4831      	ldr	r0, [pc, #196]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 80026f2:	f000 ff27 	bl	8003544 <HAL_DMA_Init>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80026fc:	f7ff fe8c 	bl	8002418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 8002704:	671a      	str	r2, [r3, #112]	; 0x70
 8002706:	4a2c      	ldr	r2, [pc, #176]	; (80027b8 <HAL_UART_MspInit+0x1b4>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	2100      	movs	r1, #0
 8002710:	2034      	movs	r0, #52	; 0x34
 8002712:	f000 fee0 	bl	80034d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002716:	2034      	movs	r0, #52	; 0x34
 8002718:	f000 fef9 	bl	800350e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800271c:	e041      	b.n	80027a2 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART3)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <HAL_UART_MspInit+0x1bc>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d13c      	bne.n	80027a2 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800272e:	2300      	movs	r3, #0
 8002730:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	4618      	mov	r0, r3
 8002738:	f002 ff0c 	bl	8005554 <HAL_RCCEx_PeriphCLKConfig>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8002742:	f7ff fe69 	bl	8002418 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a19      	ldr	r2, [pc, #100]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_UART_MspInit+0x1ac>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002776:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800277a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277e:	2302      	movs	r3, #2
 8002780:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002790:	2307      	movs	r3, #7
 8002792:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800279a:	4619      	mov	r1, r3
 800279c:	4809      	ldr	r0, [pc, #36]	; (80027c4 <HAL_UART_MspInit+0x1c0>)
 800279e:	f001 fa4d 	bl	8003c3c <HAL_GPIO_Init>
}
 80027a2:	bf00      	nop
 80027a4:	37b0      	adds	r7, #176	; 0xb0
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40004c00 	.word	0x40004c00
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020800 	.word	0x40020800
 80027b8:	20000214 	.word	0x20000214
 80027bc:	40026040 	.word	0x40026040
 80027c0:	40004800 	.word	0x40004800
 80027c4:	40020400 	.word	0x40020400

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <NMI_Handler+0x4>

080027ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler+0x4>

080027d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <MemManage_Handler+0x4>

080027da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <BusFault_Handler+0x4>

080027e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <UsageFault_Handler+0x4>

080027e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002814:	f000 f9d0 	bl	8002bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <DMA1_Stream2_IRQHandler+0x10>)
 8002822:	f000 ffcf 	bl	80037c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000214 	.word	0x20000214

08002830 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <UART4_IRQHandler+0x10>)
 8002836:	f003 fee3 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000548 	.word	0x20000548

08002844 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	return 1;
 8002848:	2301      	movs	r3, #1
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_kill>:

int _kill(int pid, int sig)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800285e:	f005 f889 	bl	8007974 <__errno>
 8002862:	4603      	mov	r3, r0
 8002864:	2216      	movs	r2, #22
 8002866:	601a      	str	r2, [r3, #0]
	return -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_exit>:

void _exit (int status)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff ffe7 	bl	8002854 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002886:	e7fe      	b.n	8002886 <_exit+0x12>

08002888 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e00a      	b.n	80028b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800289a:	f3af 8000 	nop.w
 800289e:	4601      	mov	r1, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	60ba      	str	r2, [r7, #8]
 80028a6:	b2ca      	uxtb	r2, r1
 80028a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbf0      	blt.n	800289a <_read+0x12>
	}

return len;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e009      	b.n	80028e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3301      	adds	r3, #1
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	dbf1      	blt.n	80028d4 <_write+0x12>
	}
	return len;
 80028f0:	687b      	ldr	r3, [r7, #4]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <_close>:

int _close(int file)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	return -1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002906:	4618      	mov	r0, r3
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002922:	605a      	str	r2, [r3, #4]
	return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <_isatty>:

int _isatty(int file)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	return 1;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
	return 0;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <_sbrk+0x5c>)
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <_sbrk+0x60>)
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <_sbrk+0x64>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <_sbrk+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002994:	f004 ffee 	bl	8007974 <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	220c      	movs	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20050000 	.word	0x20050000
 80029c4:	00000400 	.word	0x00000400
 80029c8:	20000204 	.word	0x20000204
 80029cc:	20000678 	.word	0x20000678

080029d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029d4:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <SystemInit+0x20>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <SystemInit+0x20>)
 80029dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <zoe_llhvelned_request>:
extern UART_HandleTypeDef huart4;



void zoe_llhvelned_request(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart4, request_posllh_array , 8, 10);
 80029f8:	230a      	movs	r3, #10
 80029fa:	2208      	movs	r2, #8
 80029fc:	4902      	ldr	r1, [pc, #8]	; (8002a08 <zoe_llhvelned_request+0x14>)
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <zoe_llhvelned_request+0x18>)
 8002a00:	f003 fd1c 	bl	800643c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart4, request_velned_array , 8, 1000);
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000004 	.word	0x20000004
 8002a0c:	20000548 	.word	0x20000548

08002a10 <zoe_parse_data>:

void zoe_parse_data(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0


		if(zoe.rx_zoe_data[0] == 181 &&
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a1a:	2bb5      	cmp	r3, #181	; 0xb5
 8002a1c:	d159      	bne.n	8002ad2 <zoe_parse_data+0xc2>
			zoe.rx_zoe_data[1] == 98 &&
 8002a1e:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a20:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
		if(zoe.rx_zoe_data[0] == 181 &&
 8002a24:	2b62      	cmp	r3, #98	; 0x62
 8002a26:	d154      	bne.n	8002ad2 <zoe_parse_data+0xc2>
			zoe.rx_zoe_data[2] == 1 &&
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a2a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
			zoe.rx_zoe_data[1] == 98 &&
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d14f      	bne.n	8002ad2 <zoe_parse_data+0xc2>
			zoe.rx_zoe_data[3] == 2)
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
			zoe.rx_zoe_data[2] == 1 &&
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d14a      	bne.n	8002ad2 <zoe_parse_data+0xc2>
	{
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a3e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002a42:	461a      	mov	r2, r3
				  	  	  	 (zoe.rx_zoe_data[11] << 8) |
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a46:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002a4a:	021b      	lsls	r3, r3, #8
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8002a4c:	431a      	orrs	r2, r3
				  	  	  	 (zoe.rx_zoe_data[12] << 16)|
 8002a4e:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a54:	041b      	lsls	r3, r3, #16
				  	  	  	 (zoe.rx_zoe_data[11] << 8) |
 8002a56:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[13] << 24);
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a5e:	061b      	lsls	r3, r3, #24
				  	  	  	 (zoe.rx_zoe_data[12] << 16)|
 8002a60:	4313      	orrs	r3, r2
	  zoe.lattitude_zoe_m8q = zoe.rx_zoe_data[10] 	    |
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd7e 	bl	8000564 <__aeabi_i2d>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	491a      	ldr	r1, [pc, #104]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a6e:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a74:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002a78:	461a      	mov	r2, r3
						  	 (zoe.rx_zoe_data[15] << 8) |
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a7c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8002a80:	021b      	lsls	r3, r3, #8
	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8002a82:	431a      	orrs	r2, r3
						  	 (zoe.rx_zoe_data[16] << 16)|
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a8a:	041b      	lsls	r3, r3, #16
						  	 (zoe.rx_zoe_data[15] << 8) |
 8002a8c:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[17] << 24);
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a94:	061b      	lsls	r3, r3, #24
						  	 (zoe.rx_zoe_data[16] << 16)|
 8002a96:	4313      	orrs	r3, r2
	  zoe.longtitude_zoe_m8q= zoe.rx_zoe_data[14] 	    |
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fd fd63 	bl	8000564 <__aeabi_i2d>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	490d      	ldr	r1, [pc, #52]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002aa4:	e9c1 2300 	strd	r2, r3, [r1]

	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aae:	461a      	mov	r2, r3
						  	 (zoe.rx_zoe_data[23] << 8) |
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002ab2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ab6:	021b      	lsls	r3, r3, #8
	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8002ab8:	431a      	orrs	r2, r3
						  	 (zoe.rx_zoe_data[24] << 16)|
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac0:	041b      	lsls	r3, r3, #16
						  	 (zoe.rx_zoe_data[23] << 8) |
 8002ac2:	431a      	orrs	r2, r3
							 (zoe.rx_zoe_data[25] << 24);
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aca:	061b      	lsls	r3, r3, #24
						  	 (zoe.rx_zoe_data[24] << 16)|
 8002acc:	4313      	orrs	r3, r2
	  zoe.altitude_zoe_m8q  = zoe.rx_zoe_data[22] 	    |
 8002ace:	4a02      	ldr	r2, [pc, #8]	; (8002ad8 <zoe_parse_data+0xc8>)
 8002ad0:	6113      	str	r3, [r2, #16]
	}

}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000608 	.word	0x20000608

08002adc <ZOE>:

void ZOE(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	  zoe_llhvelned_request();
 8002ae0:	f7ff ff88 	bl	80029f4 <zoe_llhvelned_request>
	  zoe_parse_data();
 8002ae4:	f7ff ff94 	bl	8002a10 <zoe_parse_data>
}
 8002ae8:	bf00      	nop
 8002aea:	bd80      	pop	{r7, pc}

08002aec <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8002aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002af4:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002af8:	e002      	b.n	8002b00 <LoopCopyDataInit>

08002afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002afe:	3304      	adds	r3, #4

08002b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b04:	d3f9      	bcc.n	8002afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b06:	4a0b      	ldr	r2, [pc, #44]	; (8002b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b08:	4c0b      	ldr	r4, [pc, #44]	; (8002b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b0c:	e001      	b.n	8002b12 <LoopFillZerobss>

08002b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b10:	3204      	adds	r2, #4

08002b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b14:	d3fb      	bcc.n	8002b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b16:	f7ff ff5b 	bl	80029d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b1a:	f004 ff31 	bl	8007980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b1e:	f7ff f823 	bl	8001b68 <main>
  bx  lr    
 8002b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b24:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b2c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002b30:	0800c71c 	.word	0x0800c71c
  ldr r2, =_sbss
 8002b34:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002b38:	20000678 	.word	0x20000678

08002b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b3c:	e7fe      	b.n	8002b3c <ADC_IRQHandler>

08002b3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f000 fcbc 	bl	80034c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b48:	200f      	movs	r0, #15
 8002b4a:	f000 f805 	bl	8002b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4e:	f7ff fc69 	bl	8002424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_InitTick+0x54>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x58>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fcd7 	bl	800352a <HAL_SYSTICK_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00e      	b.n	8002ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d80a      	bhi.n	8002ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f000 fc9f 	bl	80034d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_InitTick+0x5c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000010 	.word	0x20000010
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x24>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <HAL_IncTick+0x24>)
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	20000664 	.word	0x20000664

08002be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return uwTick;
 8002be4:	4b03      	ldr	r3, [pc, #12]	; (8002bf4 <HAL_GetTick+0x14>)
 8002be6:	681b      	ldr	r3, [r3, #0]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20000664 	.word	0x20000664

08002bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c00:	f7ff ffee 	bl	8002be0 <HAL_GetTick>
 8002c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d005      	beq.n	8002c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_Delay+0x44>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	461a      	mov	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c1e:	bf00      	nop
 8002c20:	f7ff ffde 	bl	8002be0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d8f7      	bhi.n	8002c20 <HAL_Delay+0x28>
  {
  }
}
 8002c30:	bf00      	nop
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000010 	.word	0x20000010

08002c40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e031      	b.n	8002cba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fc04 	bl	800246c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_ADC_Init+0x84>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	f043 0202 	orr.w	r2, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fa4c 	bl	800312c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
 8002caa:	e001      	b.n	8002cb0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	ffffeefd 	.word	0xffffeefd

08002cc8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_Start+0x1a>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0ad      	b.n	8002e3e <HAL_ADC_Start+0x176>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d018      	beq.n	8002d2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_ADC_Start+0x184>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <HAL_ADC_Start+0x188>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9a      	lsrs	r2, r3, #18
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002d1c:	e002      	b.n	8002d24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f9      	bne.n	8002d1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d175      	bne.n	8002e24 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3c:	4b45      	ldr	r3, [pc, #276]	; (8002e54 <HAL_ADC_Start+0x18c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d72:	d106      	bne.n	8002d82 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	f023 0206 	bic.w	r2, r3, #6
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d80:	e002      	b.n	8002d88 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d98:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_ADC_Start+0x190>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d143      	bne.n	8002e3c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	e03a      	b.n	8002e3c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a24      	ldr	r2, [pc, #144]	; (8002e5c <HAL_ADC_Start+0x194>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10e      	bne.n	8002dee <HAL_ADC_Start+0x126>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d107      	bne.n	8002dee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <HAL_ADC_Start+0x190>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d120      	bne.n	8002e3c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a18      	ldr	r2, [pc, #96]	; (8002e60 <HAL_ADC_Start+0x198>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d11b      	bne.n	8002e3c <HAL_ADC_Start+0x174>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	e00b      	b.n	8002e3c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0210 	orr.w	r2, r3, #16
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	431bde83 	.word	0x431bde83
 8002e54:	fffff8fe 	.word	0xfffff8fe
 8002e58:	40012300 	.word	0x40012300
 8002e5c:	40012000 	.word	0x40012000
 8002e60:	40012200 	.word	0x40012200

08002e64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x1c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e136      	b.n	800310a <HAL_ADC_ConfigChannel+0x28a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	d93a      	bls.n	8002f22 <HAL_ADC_ConfigChannel+0xa2>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eb4:	d035      	beq.n	8002f22 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	2207      	movs	r2, #7
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	400a      	ands	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8d      	ldr	r2, [pc, #564]	; (8003118 <HAL_ADC_ConfigChannel+0x298>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10a      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68d9      	ldr	r1, [r3, #12]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	061a      	lsls	r2, r3, #24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efa:	e035      	b.n	8002f68 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68d9      	ldr	r1, [r3, #12]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	4603      	mov	r3, r0
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4403      	add	r3, r0
 8002f14:	3b1e      	subs	r3, #30
 8002f16:	409a      	lsls	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f20:	e022      	b.n	8002f68 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	2207      	movs	r2, #7
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	400a      	ands	r2, r1
 8002f44:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6919      	ldr	r1, [r3, #16]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	4603      	mov	r3, r0
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4403      	add	r3, r0
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d824      	bhi.n	8002fba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b05      	subs	r3, #5
 8002f82:	221f      	movs	r2, #31
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b05      	subs	r3, #5
 8002fac:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb8:	e04c      	b.n	8003054 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d824      	bhi.n	800300c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3b23      	subs	r3, #35	; 0x23
 8002fd4:	221f      	movs	r2, #31
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3b23      	subs	r3, #35	; 0x23
 8002ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	631a      	str	r2, [r3, #48]	; 0x30
 800300a:	e023      	b.n	8003054 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b41      	subs	r3, #65	; 0x41
 800301e:	221f      	movs	r2, #31
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43da      	mvns	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	400a      	ands	r2, r1
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b41      	subs	r3, #65	; 0x41
 8003048:	fa00 f203 	lsl.w	r2, r0, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a30      	ldr	r2, [pc, #192]	; (800311c <HAL_ADC_ConfigChannel+0x29c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d10a      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1f4>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a2c      	ldr	r2, [pc, #176]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 800306e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003072:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_ADC_ConfigChannel+0x29c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10f      	bne.n	800309e <HAL_ADC_ConfigChannel+0x21e>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b12      	cmp	r3, #18
 8003084:	d10b      	bne.n	800309e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a25      	ldr	r2, [pc, #148]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 800308c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003090:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4a22      	ldr	r2, [pc, #136]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 8003098:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800309c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_ADC_ConfigChannel+0x29c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d12b      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x280>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1a      	ldr	r2, [pc, #104]	; (8003118 <HAL_ADC_ConfigChannel+0x298>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <HAL_ADC_ConfigChannel+0x23a>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b11      	cmp	r3, #17
 80030b8:	d122      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030ba:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030c4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030c6:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_ADC_ConfigChannel+0x2a0>)
 80030cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a10      	ldr	r2, [pc, #64]	; (8003118 <HAL_ADC_ConfigChannel+0x298>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d111      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_ADC_ConfigChannel+0x2a4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a11      	ldr	r2, [pc, #68]	; (8003128 <HAL_ADC_ConfigChannel+0x2a8>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	0c9a      	lsrs	r2, r3, #18
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030f2:	e002      	b.n	80030fa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f9      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	10000012 	.word	0x10000012
 800311c:	40012000 	.word	0x40012000
 8003120:	40012300 	.word	0x40012300
 8003124:	20000000 	.word	0x20000000
 8003128:	431bde83 	.word	0x431bde83

0800312c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003134:	4b78      	ldr	r3, [pc, #480]	; (8003318 <ADC_Init+0x1ec>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a77      	ldr	r2, [pc, #476]	; (8003318 <ADC_Init+0x1ec>)
 800313a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800313e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003140:	4b75      	ldr	r3, [pc, #468]	; (8003318 <ADC_Init+0x1ec>)
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4973      	ldr	r1, [pc, #460]	; (8003318 <ADC_Init+0x1ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800315c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003180:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	4a58      	ldr	r2, [pc, #352]	; (800331c <ADC_Init+0x1f0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d022      	beq.n	8003206 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6899      	ldr	r1, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	e00f      	b.n	8003226 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003214:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003224:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0202 	bic.w	r2, r2, #2
 8003234:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	005a      	lsls	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01b      	beq.n	800328c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003272:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	3b01      	subs	r3, #1
 8003280:	035a      	lsls	r2, r3, #13
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e007      	b.n	800329c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800329a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	051a      	lsls	r2, r3, #20
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032de:	025a      	lsls	r2, r3, #9
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	029a      	lsls	r2, r3, #10
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	609a      	str	r2, [r3, #8]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012300 	.word	0x40012300
 800331c:	0f000001 	.word	0x0f000001

08003320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003330:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <__NVIC_SetPriorityGrouping+0x40>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800333c:	4013      	ands	r3, r2
 800333e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <__NVIC_SetPriorityGrouping+0x44>)
 800334a:	4313      	orrs	r3, r2
 800334c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334e:	4a04      	ldr	r2, [pc, #16]	; (8003360 <__NVIC_SetPriorityGrouping+0x40>)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60d3      	str	r3, [r2, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000ed00 	.word	0xe000ed00
 8003364:	05fa0000 	.word	0x05fa0000

08003368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <__NVIC_GetPriorityGrouping+0x18>)
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	f003 0307 	and.w	r3, r3, #7
}
 8003376:	4618      	mov	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	db0b      	blt.n	80033ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	f003 021f 	and.w	r2, r3, #31
 800339c:	4907      	ldr	r1, [pc, #28]	; (80033bc <__NVIC_EnableIRQ+0x38>)
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2001      	movs	r0, #1
 80033a6:	fa00 f202 	lsl.w	r2, r0, r2
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	e000e100 	.word	0xe000e100

080033c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	6039      	str	r1, [r7, #0]
 80033ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db0a      	blt.n	80033ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	490c      	ldr	r1, [pc, #48]	; (800340c <__NVIC_SetPriority+0x4c>)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	0112      	lsls	r2, r2, #4
 80033e0:	b2d2      	uxtb	r2, r2
 80033e2:	440b      	add	r3, r1
 80033e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033e8:	e00a      	b.n	8003400 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	4908      	ldr	r1, [pc, #32]	; (8003410 <__NVIC_SetPriority+0x50>)
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	3b04      	subs	r3, #4
 80033f8:	0112      	lsls	r2, r2, #4
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	440b      	add	r3, r1
 80033fe:	761a      	strb	r2, [r3, #24]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000e100 	.word	0xe000e100
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f1c3 0307 	rsb	r3, r3, #7
 800342e:	2b04      	cmp	r3, #4
 8003430:	bf28      	it	cs
 8003432:	2304      	movcs	r3, #4
 8003434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3304      	adds	r3, #4
 800343a:	2b06      	cmp	r3, #6
 800343c:	d902      	bls.n	8003444 <NVIC_EncodePriority+0x30>
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3b03      	subs	r3, #3
 8003442:	e000      	b.n	8003446 <NVIC_EncodePriority+0x32>
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	f04f 32ff 	mov.w	r2, #4294967295
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	401a      	ands	r2, r3
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43d9      	mvns	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	4313      	orrs	r3, r2
         );
}
 800346e:	4618      	mov	r0, r3
 8003470:	3724      	adds	r7, #36	; 0x24
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
	...

0800347c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800348c:	d301      	bcc.n	8003492 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800348e:	2301      	movs	r3, #1
 8003490:	e00f      	b.n	80034b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <SysTick_Config+0x40>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349a:	210f      	movs	r1, #15
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	f7ff ff8e 	bl	80033c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <SysTick_Config+0x40>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034aa:	4b04      	ldr	r3, [pc, #16]	; (80034bc <SysTick_Config+0x40>)
 80034ac:	2207      	movs	r2, #7
 80034ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	e000e010 	.word	0xe000e010

080034c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff29 	bl	8003320 <__NVIC_SetPriorityGrouping>
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
 80034e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034e8:	f7ff ff3e 	bl	8003368 <__NVIC_GetPriorityGrouping>
 80034ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	6978      	ldr	r0, [r7, #20]
 80034f4:	f7ff ff8e 	bl	8003414 <NVIC_EncodePriority>
 80034f8:	4602      	mov	r2, r0
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff ff5d 	bl	80033c0 <__NVIC_SetPriority>
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff31 	bl	8003384 <__NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7ff ffa2 	bl	800347c <SysTick_Config>
 8003538:	4603      	mov	r3, r0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003550:	f7ff fb46 	bl	8002be0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e099      	b.n	8003694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003580:	e00f      	b.n	80035a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003582:	f7ff fb2d 	bl	8002be0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b05      	cmp	r3, #5
 800358e:	d908      	bls.n	80035a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2220      	movs	r2, #32
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2203      	movs	r2, #3
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e078      	b.n	8003694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e8      	bne.n	8003582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4b38      	ldr	r3, [pc, #224]	; (800369c <HAL_DMA_Init+0x158>)
 80035bc:	4013      	ands	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d107      	bne.n	800360c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	4313      	orrs	r3, r2
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0307 	bic.w	r3, r3, #7
 8003622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	2b04      	cmp	r3, #4
 8003634:	d117      	bne.n	8003666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00e      	beq.n	8003666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fa7b 	bl	8003b44 <DMA_CheckFifoParam>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2240      	movs	r2, #64	; 0x40
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003662:	2301      	movs	r3, #1
 8003664:	e016      	b.n	8003694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa32 	bl	8003ad8 <DMA_CalcBaseAndBitshift>
 8003674:	4603      	mov	r3, r0
 8003676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	223f      	movs	r2, #63	; 0x3f
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	f010803f 	.word	0xf010803f

080036a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036ae:	f7ff fa97 	bl	8002be0 <HAL_GetTick>
 80036b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e052      	b.n	8003778 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0216 	bic.w	r2, r2, #22
 80036e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d103      	bne.n	8003702 <HAL_DMA_Abort+0x62>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0208 	bic.w	r2, r2, #8
 8003710:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003722:	e013      	b.n	800374c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003724:	f7ff fa5c 	bl	8002be0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b05      	cmp	r3, #5
 8003730:	d90c      	bls.n	800374c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e015      	b.n	8003778 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e4      	bne.n	8003724 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	223f      	movs	r2, #63	; 0x3f
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d004      	beq.n	800379e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e00c      	b.n	80037b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2205      	movs	r2, #5
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037d0:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <HAL_DMA_IRQHandler+0x258>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a92      	ldr	r2, [pc, #584]	; (8003a20 <HAL_DMA_IRQHandler+0x25c>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	2208      	movs	r2, #8
 80037f0:	409a      	lsls	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4013      	ands	r3, r2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01a      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d013      	beq.n	8003830 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 0204 	bic.w	r2, r2, #4
 8003816:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2208      	movs	r2, #8
 800381e:	409a      	lsls	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2201      	movs	r2, #1
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d012      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385e:	f043 0202 	orr.w	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2204      	movs	r2, #4
 800386c:	409a      	lsls	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d012      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00b      	beq.n	800389c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2204      	movs	r2, #4
 800388a:	409a      	lsls	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003894:	f043 0204 	orr.w	r2, r3, #4
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2210      	movs	r2, #16
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d043      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d03c      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	2210      	movs	r2, #16
 80038c0:	409a      	lsls	r2, r3
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d024      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
 80038f2:	e01f      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
 8003904:	e016      	b.n	8003934 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003910:	2b00      	cmp	r3, #0
 8003912:	d107      	bne.n	8003924 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0208 	bic.w	r2, r2, #8
 8003922:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003938:	2220      	movs	r2, #32
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 808e 	beq.w	8003a62 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 8086 	beq.w	8003a62 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	2220      	movs	r2, #32
 800395c:	409a      	lsls	r2, r3
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d136      	bne.n	80039dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0216 	bic.w	r2, r2, #22
 800397c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d103      	bne.n	800399e <HAL_DMA_IRQHandler+0x1da>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0208 	bic.w	r2, r2, #8
 80039ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	223f      	movs	r2, #63	; 0x3f
 80039b4:	409a      	lsls	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d07d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	4798      	blx	r3
        }
        return;
 80039da:	e078      	b.n	8003ace <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01c      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d108      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d030      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e02b      	b.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
 8003a1a:	e022      	b.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
 8003a1c:	20000000 	.word	0x20000000
 8003a20:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10f      	bne.n	8003a52 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0210 	bic.w	r2, r2, #16
 8003a40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d032      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d022      	beq.n	8003abc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2205      	movs	r2, #5
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3301      	adds	r3, #1
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d307      	bcc.n	8003aaa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1f2      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x2ca>
 8003aa8:	e000      	b.n	8003aac <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003aaa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
 8003acc:	e000      	b.n	8003ad0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ace:	bf00      	nop
    }
  }
}
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	3b10      	subs	r3, #16
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <DMA_CalcBaseAndBitshift+0x60>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003af2:	4a12      	ldr	r2, [pc, #72]	; (8003b3c <DMA_CalcBaseAndBitshift+0x64>)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d908      	bls.n	8003b18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <DMA_CalcBaseAndBitshift+0x68>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	1d1a      	adds	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58
 8003b16:	e006      	b.n	8003b26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <DMA_CalcBaseAndBitshift+0x68>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	aaaaaaab 	.word	0xaaaaaaab
 8003b3c:	0800c250 	.word	0x0800c250
 8003b40:	fffffc00 	.word	0xfffffc00

08003b44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d11f      	bne.n	8003b9e <DMA_CheckFifoParam+0x5a>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d856      	bhi.n	8003c12 <DMA_CheckFifoParam+0xce>
 8003b64:	a201      	add	r2, pc, #4	; (adr r2, 8003b6c <DMA_CheckFifoParam+0x28>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003b7d 	.word	0x08003b7d
 8003b70:	08003b8f 	.word	0x08003b8f
 8003b74:	08003b7d 	.word	0x08003b7d
 8003b78:	08003c13 	.word	0x08003c13
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d046      	beq.n	8003c16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b8c:	e043      	b.n	8003c16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b96:	d140      	bne.n	8003c1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9c:	e03d      	b.n	8003c1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d121      	bne.n	8003bec <DMA_CheckFifoParam+0xa8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d837      	bhi.n	8003c1e <DMA_CheckFifoParam+0xda>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <DMA_CheckFifoParam+0x70>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bc5 	.word	0x08003bc5
 8003bb8:	08003bcb 	.word	0x08003bcb
 8003bbc:	08003bc5 	.word	0x08003bc5
 8003bc0:	08003bdd 	.word	0x08003bdd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc8:	e030      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d025      	beq.n	8003c22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bda:	e022      	b.n	8003c22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003be4:	d11f      	bne.n	8003c26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bea:	e01c      	b.n	8003c26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d903      	bls.n	8003bfa <DMA_CheckFifoParam+0xb6>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d003      	beq.n	8003c00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bf8:	e018      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      break;
 8003bfe:	e015      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e00b      	b.n	8003c2a <DMA_CheckFifoParam+0xe6>
      break;
 8003c12:	bf00      	nop
 8003c14:	e00a      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
 8003c18:	e008      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e006      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e004      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
 8003c24:	e002      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <DMA_CheckFifoParam+0xe8>
      break;
 8003c2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e175      	b.n	8003f48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f040 8164 	bne.w	8003f42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d005      	beq.n	8003c92 <HAL_GPIO_Init+0x56>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d130      	bne.n	8003cf4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 0201 	and.w	r2, r3, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	d017      	beq.n	8003d30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d123      	bne.n	8003d84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	08da      	lsrs	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3208      	adds	r2, #8
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80be 	beq.w	8003f42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	4b66      	ldr	r3, [pc, #408]	; (8003f60 <HAL_GPIO_Init+0x324>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a65      	ldr	r2, [pc, #404]	; (8003f60 <HAL_GPIO_Init+0x324>)
 8003dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b63      	ldr	r3, [pc, #396]	; (8003f60 <HAL_GPIO_Init+0x324>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dde:	4a61      	ldr	r2, [pc, #388]	; (8003f64 <HAL_GPIO_Init+0x328>)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	3302      	adds	r3, #2
 8003de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a58      	ldr	r2, [pc, #352]	; (8003f68 <HAL_GPIO_Init+0x32c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d037      	beq.n	8003e7a <HAL_GPIO_Init+0x23e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a57      	ldr	r2, [pc, #348]	; (8003f6c <HAL_GPIO_Init+0x330>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d031      	beq.n	8003e76 <HAL_GPIO_Init+0x23a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a56      	ldr	r2, [pc, #344]	; (8003f70 <HAL_GPIO_Init+0x334>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d02b      	beq.n	8003e72 <HAL_GPIO_Init+0x236>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a55      	ldr	r2, [pc, #340]	; (8003f74 <HAL_GPIO_Init+0x338>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d025      	beq.n	8003e6e <HAL_GPIO_Init+0x232>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a54      	ldr	r2, [pc, #336]	; (8003f78 <HAL_GPIO_Init+0x33c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01f      	beq.n	8003e6a <HAL_GPIO_Init+0x22e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a53      	ldr	r2, [pc, #332]	; (8003f7c <HAL_GPIO_Init+0x340>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d019      	beq.n	8003e66 <HAL_GPIO_Init+0x22a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_GPIO_Init+0x344>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_GPIO_Init+0x226>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a51      	ldr	r2, [pc, #324]	; (8003f84 <HAL_GPIO_Init+0x348>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00d      	beq.n	8003e5e <HAL_GPIO_Init+0x222>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a50      	ldr	r2, [pc, #320]	; (8003f88 <HAL_GPIO_Init+0x34c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d007      	beq.n	8003e5a <HAL_GPIO_Init+0x21e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4f      	ldr	r2, [pc, #316]	; (8003f8c <HAL_GPIO_Init+0x350>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_GPIO_Init+0x21a>
 8003e52:	2309      	movs	r3, #9
 8003e54:	e012      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e56:	230a      	movs	r3, #10
 8003e58:	e010      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	e00e      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e5e:	2307      	movs	r3, #7
 8003e60:	e00c      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e62:	2306      	movs	r3, #6
 8003e64:	e00a      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e66:	2305      	movs	r3, #5
 8003e68:	e008      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	e006      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e004      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e002      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_GPIO_Init+0x240>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	f002 0203 	and.w	r2, r2, #3
 8003e82:	0092      	lsls	r2, r2, #2
 8003e84:	4093      	lsls	r3, r2
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e8c:	4935      	ldr	r1, [pc, #212]	; (8003f64 <HAL_GPIO_Init+0x328>)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e9a:	4b3d      	ldr	r3, [pc, #244]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ebe:	4a34      	ldr	r2, [pc, #208]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ec4:	4b32      	ldr	r3, [pc, #200]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f12:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_GPIO_Init+0x354>)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	f67f ae86 	bls.w	8003c5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3724      	adds	r7, #36	; 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	40020800 	.word	0x40020800
 8003f74:	40020c00 	.word	0x40020c00
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40021400 	.word	0x40021400
 8003f80:	40021800 	.word	0x40021800
 8003f84:	40021c00 	.word	0x40021c00
 8003f88:	40022000 	.word	0x40022000
 8003f8c:	40022400 	.word	0x40022400
 8003f90:	40013c00 	.word	0x40013c00

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fa4:	787b      	ldrb	r3, [r7, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fb0:	e003      	b.n	8003fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	619a      	str	r2, [r3, #24]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e07f      	b.n	80040da <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe fa7c 	bl	80024ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2224      	movs	r2, #36	; 0x24
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 0201 	bic.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004018:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004028:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	e006      	b.n	8004050 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800404e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d104      	bne.n	8004062 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004060:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_I2C_Init+0x11c>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004080:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1a      	ldr	r2, [r3, #32]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0201 	orr.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	02008000 	.word	0x02008000

080040e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	4608      	mov	r0, r1
 80040f2:	4611      	mov	r1, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4603      	mov	r3, r0
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	460b      	mov	r3, r1
 80040fc:	813b      	strh	r3, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	f040 80f9 	bne.w	8004302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_I2C_Mem_Write+0x34>
 8004116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004122:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0ed      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x4e>
 8004132:	2302      	movs	r3, #2
 8004134:	e0e6      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800413e:	f7fe fd4f 	bl	8002be0 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2319      	movs	r3, #25
 800414a:	2201      	movs	r2, #1
 800414c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fac3 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0d1      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2221      	movs	r2, #33	; 0x21
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2240      	movs	r2, #64	; 0x40
 800416c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004180:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004188:	88f8      	ldrh	r0, [r7, #6]
 800418a:	893a      	ldrh	r2, [r7, #8]
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4603      	mov	r3, r0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f9d3 	bl	8004544 <I2C_RequestMemoryWrite>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0a9      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2bff      	cmp	r3, #255	; 0xff
 80041b8:	d90e      	bls.n	80041d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22ff      	movs	r2, #255	; 0xff
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	8979      	ldrh	r1, [r7, #10]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fc2b 	bl	8004a2c <I2C_TransferConfig>
 80041d6:	e00f      	b.n	80041f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	8979      	ldrh	r1, [r7, #10]
 80041ea:	2300      	movs	r3, #0
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fc1a 	bl	8004a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 faad 	bl	800475c <I2C_WaitOnTXISFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e07b      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d034      	beq.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d130      	bne.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fa3f 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e04d      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	2bff      	cmp	r3, #255	; 0xff
 8004270:	d90e      	bls.n	8004290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	22ff      	movs	r2, #255	; 0xff
 8004276:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800427c:	b2da      	uxtb	r2, r3
 800427e:	8979      	ldrh	r1, [r7, #10]
 8004280:	2300      	movs	r3, #0
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fbcf 	bl	8004a2c <I2C_TransferConfig>
 800428e:	e00f      	b.n	80042b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	8979      	ldrh	r1, [r7, #10]
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fbbe 	bl	8004a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d19e      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fa8c 	bl	80047dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e01a      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2220      	movs	r2, #32
 80042d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b0a      	ldr	r3, [pc, #40]	; (800430c <HAL_I2C_Mem_Write+0x224>)
 80042e2:	400b      	ands	r3, r1
 80042e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	fe00e800 	.word	0xfe00e800

08004310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	4608      	mov	r0, r1
 800431a:	4611      	mov	r1, r2
 800431c:	461a      	mov	r2, r3
 800431e:	4603      	mov	r3, r0
 8004320:	817b      	strh	r3, [r7, #10]
 8004322:	460b      	mov	r3, r1
 8004324:	813b      	strh	r3, [r7, #8]
 8004326:	4613      	mov	r3, r2
 8004328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b20      	cmp	r3, #32
 8004334:	f040 80fd 	bne.w	8004532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_I2C_Mem_Read+0x34>
 800433e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0f1      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_I2C_Mem_Read+0x4e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ea      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004366:	f7fe fc3b 	bl	8002be0 <HAL_GetTick>
 800436a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2319      	movs	r3, #25
 8004372:	2201      	movs	r2, #1
 8004374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f000 f9af 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e0d5      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2222      	movs	r2, #34	; 0x22
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b0:	88f8      	ldrh	r0, [r7, #6]
 80043b2:	893a      	ldrh	r2, [r7, #8]
 80043b4:	8979      	ldrh	r1, [r7, #10]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	4603      	mov	r3, r0
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f913 	bl	80045ec <I2C_RequestMemoryRead>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0ad      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	2bff      	cmp	r3, #255	; 0xff
 80043e0:	d90e      	bls.n	8004400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	22ff      	movs	r2, #255	; 0xff
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	8979      	ldrh	r1, [r7, #10]
 80043f0:	4b52      	ldr	r3, [pc, #328]	; (800453c <HAL_I2C_Mem_Read+0x22c>)
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fb17 	bl	8004a2c <I2C_TransferConfig>
 80043fe:	e00f      	b.n	8004420 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	8979      	ldrh	r1, [r7, #10]
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <HAL_I2C_Mem_Read+0x22c>)
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fb06 	bl	8004a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	2104      	movs	r1, #4
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f956 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e07c      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29b      	uxth	r3, r3
 8004464:	3b01      	subs	r3, #1
 8004466:	b29a      	uxth	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d034      	beq.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447a:	2b00      	cmp	r3, #0
 800447c:	d130      	bne.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004484:	2200      	movs	r2, #0
 8004486:	2180      	movs	r1, #128	; 0x80
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f927 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e04d      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2bff      	cmp	r3, #255	; 0xff
 80044a0:	d90e      	bls.n	80044c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	b2da      	uxtb	r2, r3
 80044ae:	8979      	ldrh	r1, [r7, #10]
 80044b0:	2300      	movs	r3, #0
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fab7 	bl	8004a2c <I2C_TransferConfig>
 80044be:	e00f      	b.n	80044e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 faa6 	bl	8004a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d19a      	bne.n	8004420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f000 f974 	bl	80047dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01a      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_I2C_Mem_Read+0x230>)
 8004512:	400b      	ands	r3, r1
 8004514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e000      	b.n	8004534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004532:	2302      	movs	r3, #2
  }
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	80002400 	.word	0x80002400
 8004540:	fe00e800 	.word	0xfe00e800

08004544 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	461a      	mov	r2, r3
 8004552:	4603      	mov	r3, r0
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	460b      	mov	r3, r1
 8004558:	813b      	strh	r3, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	8979      	ldrh	r1, [r7, #10]
 8004564:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <I2C_RequestMemoryWrite+0xa4>)
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fa5d 	bl	8004a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f8f0 	bl	800475c <I2C_WaitOnTXISFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e02c      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800458c:	893b      	ldrh	r3, [r7, #8]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	629a      	str	r2, [r3, #40]	; 0x28
 8004596:	e015      	b.n	80045c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004598:	893b      	ldrh	r3, [r7, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	b29b      	uxth	r3, r3
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	69b9      	ldr	r1, [r7, #24]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f8d6 	bl	800475c <I2C_WaitOnTXISFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e012      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f884 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	80002000 	.word	0x80002000

080045ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	4608      	mov	r0, r1
 80045f6:	4611      	mov	r1, r2
 80045f8:	461a      	mov	r2, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	817b      	strh	r3, [r7, #10]
 80045fe:	460b      	mov	r3, r1
 8004600:	813b      	strh	r3, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	b2da      	uxtb	r2, r3
 800460a:	8979      	ldrh	r1, [r7, #10]
 800460c:	4b20      	ldr	r3, [pc, #128]	; (8004690 <I2C_RequestMemoryRead+0xa4>)
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	2300      	movs	r3, #0
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fa0a 	bl	8004a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	69b9      	ldr	r1, [r7, #24]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f89d 	bl	800475c <I2C_WaitOnTXISFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e02c      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d105      	bne.n	800463e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004632:	893b      	ldrh	r3, [r7, #8]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28
 800463c:	e015      	b.n	800466a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800463e:	893b      	ldrh	r3, [r7, #8]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	b29b      	uxth	r3, r3
 8004644:	b2da      	uxtb	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 f883 	bl	800475c <I2C_WaitOnTXISFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e012      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004660:	893b      	ldrh	r3, [r7, #8]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	; 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f831 	bl	80046dc <I2C_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	80002000 	.word	0x80002000

08004694 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d007      	beq.n	80046d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699a      	ldr	r2, [r3, #24]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	619a      	str	r2, [r3, #24]
  }
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ec:	e022      	b.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d01e      	beq.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f6:	f7fe fa73 	bl	8002be0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d302      	bcc.n	800470c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e00f      	b.n	8004754 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	429a      	cmp	r2, r3
 8004750:	d0cd      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004768:	e02c      	b.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f870 	bl	8004854 <I2C_IsErrorOccurred>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e02a      	b.n	80047d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004784:	d01e      	beq.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004786:	f7fe fa2b 	bl	8002be0 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	d302      	bcc.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d113      	bne.n	80047c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e007      	b.n	80047d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d1cb      	bne.n	800476a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e8:	e028      	b.n	800483c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f830 	bl	8004854 <I2C_IsErrorOccurred>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e026      	b.n	800484c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fe f9ef 	bl	8002be0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d113      	bne.n	800483c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e007      	b.n	800484c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b20      	cmp	r3, #32
 8004848:	d1cf      	bne.n	80047ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08a      	sub	sp, #40	; 0x28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	d075      	beq.n	800496c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2210      	movs	r2, #16
 8004886:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004888:	e056      	b.n	8004938 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	d052      	beq.n	8004938 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004892:	f7fe f9a5 	bl	8002be0 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d302      	bcc.n	80048a8 <I2C_IsErrorOccurred+0x54>
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d147      	bne.n	8004938 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ca:	d12e      	bne.n	800492a <I2C_IsErrorOccurred+0xd6>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048d2:	d02a      	beq.n	800492a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d027      	beq.n	800492a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ea:	f7fe f979 	bl	8002be0 <HAL_GetTick>
 80048ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f0:	e01b      	b.n	800492a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048f2:	f7fe f975 	bl	8002be0 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b19      	cmp	r3, #25
 80048fe:	d914      	bls.n	800492a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004904:	f043 0220 	orr.w	r2, r3, #32
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b20      	cmp	r3, #32
 8004936:	d1dc      	bne.n	80048f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b20      	cmp	r3, #32
 8004944:	d003      	beq.n	800494e <I2C_IsErrorOccurred+0xfa>
 8004946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800494a:	2b00      	cmp	r3, #0
 800494c:	d09d      	beq.n	800488a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800494e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004952:	2b00      	cmp	r3, #0
 8004954:	d103      	bne.n	800495e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2220      	movs	r2, #32
 800495c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f043 0304 	orr.w	r3, r3, #4
 8004964:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800498e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	f043 0308 	orr.w	r3, r3, #8
 80049a6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01c      	beq.n	8004a1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fe56 	bl	8004694 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <I2C_IsErrorOccurred+0x1d4>)
 80049f4:	400b      	ands	r3, r1
 80049f6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3728      	adds	r7, #40	; 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	fe00e800 	.word	0xfe00e800

08004a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	817b      	strh	r3, [r7, #10]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a44:	7a7b      	ldrb	r3, [r7, #9]
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a4c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a5a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	0d5b      	lsrs	r3, r3, #21
 8004a66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <I2C_TransferConfig+0x60>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	43db      	mvns	r3, r3
 8004a70:	ea02 0103 	and.w	r1, r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a7e:	bf00      	nop
 8004a80:	371c      	adds	r7, #28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	03ff63ff 	.word	0x03ff63ff

08004a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d138      	bne.n	8004b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e032      	b.n	8004b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6819      	ldr	r1, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b20      	cmp	r3, #32
 8004b3a:	d139      	bne.n	8004bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e033      	b.n	8004bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 0201 	bic.w	r2, r2, #1
 8004b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	4b23      	ldr	r3, [pc, #140]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	4a22      	ldr	r2, [pc, #136]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bd6:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bee:	f7fd fff7 	bl	8002be0 <HAL_GetTick>
 8004bf2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bf4:	e009      	b.n	8004c0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf6:	f7fd fff3 	bl	8002be0 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c04:	d901      	bls.n	8004c0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e022      	b.n	8004c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0f      	ldr	r2, [pc, #60]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c24:	f7fd ffdc 	bl	8002be0 <HAL_GetTick>
 8004c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c2a:	e009      	b.n	8004c40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c2c:	f7fd ffd8 	bl	8002be0 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c3a:	d901      	bls.n	8004c40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e007      	b.n	8004c50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40007000 	.word	0x40007000

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e291      	b.n	800519a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b96      	ldr	r3, [pc, #600]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c90:	4b93      	ldr	r3, [pc, #588]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
 8004c9c:	4b90      	ldr	r3, [pc, #576]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x130>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e26b      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x7a>
 8004ccc:	4b84      	ldr	r3, [pc, #528]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a83      	ldr	r2, [pc, #524]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x9c>
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7e      	ldr	r2, [pc, #504]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7b      	ldr	r2, [pc, #492]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d06:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a75      	ldr	r2, [pc, #468]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b73      	ldr	r3, [pc, #460]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a72      	ldr	r2, [pc, #456]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004d20:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6b      	ldr	r2, [pc, #428]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd ff4e 	bl	8002be0 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd ff4a 	bl	8002be0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e21f      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd ff3a 	bl	8002be0 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd ff36 	bl	8002be0 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e20b      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x110>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d069      	beq.n	8004e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
 8004db6:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1df      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	493d      	ldr	r1, [pc, #244]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e040      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a38      	ldr	r2, [pc, #224]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd feec 	bl	8002be0 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fee8 	bl	8002be0 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1bd      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4929      	ldr	r1, [pc, #164]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	e018      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fec8 	bl	8002be0 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e54:	f7fd fec4 	bl	8002be0 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e199      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d038      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d019      	beq.n	8004eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fd fea5 	bl	8002be0 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fd fea1 	bl	8002be0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e176      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x23a>
 8004eb8:	e01a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fd fe8b 	bl	8002be0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fd fe87 	bl	8002be0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d903      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e15c      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
 8004ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b91      	ldr	r3, [pc, #580]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ee      	bne.n	8004ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a4 	beq.w	8005046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b8b      	ldr	r3, [pc, #556]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b88      	ldr	r3, [pc, #544]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a87      	ldr	r2, [pc, #540]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b85      	ldr	r3, [pc, #532]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f26:	4b82      	ldr	r3, [pc, #520]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d118      	bne.n	8004f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f32:	4b7f      	ldr	r3, [pc, #508]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7e      	ldr	r2, [pc, #504]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fe4f 	bl	8002be0 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fd fe4b 	bl	8002be0 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e120      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f58:	4b75      	ldr	r3, [pc, #468]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x31a>
 8004f6c:	4b6f      	ldr	r3, [pc, #444]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a6e      	ldr	r2, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	e02d      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x33c>
 8004f82:	4b6a      	ldr	r3, [pc, #424]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a69      	ldr	r2, [pc, #420]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	4b67      	ldr	r3, [pc, #412]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a66      	ldr	r2, [pc, #408]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004fa4:	4b61      	ldr	r3, [pc, #388]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a60      	ldr	r2, [pc, #384]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	4b5e      	ldr	r3, [pc, #376]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a5d      	ldr	r2, [pc, #372]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004fbe:	4b5b      	ldr	r3, [pc, #364]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5a      	ldr	r2, [pc, #360]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b58      	ldr	r3, [pc, #352]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a57      	ldr	r2, [pc, #348]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fd fdff 	bl	8002be0 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fd fdfb 	bl	8002be0 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0ce      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b4b      	ldr	r3, [pc, #300]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x386>
 8005008:	e014      	b.n	8005034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fd fde9 	bl	8002be0 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd fde5 	bl	8002be0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0b8      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	4b40      	ldr	r3, [pc, #256]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ee      	bne.n	8005012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b3c      	ldr	r3, [pc, #240]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a3b      	ldr	r2, [pc, #236]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80a4 	beq.w	8005198 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d06b      	beq.n	8005134 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d149      	bne.n	80050f8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fdb6 	bl	8002be0 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fdb2 	bl	8002be0 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e087      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b28      	ldr	r3, [pc, #160]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	3b01      	subs	r3, #1
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	4313      	orrs	r3, r2
 80050bc:	4a1b      	ldr	r2, [pc, #108]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050c2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7fd fd86 	bl	8002be0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7fd fd82 	bl	8002be0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e057      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x478>
 80050f6:	e04f      	b.n	8005198 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a0b      	ldr	r2, [pc, #44]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 80050fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7fd fd6c 	bl	8002be0 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	e008      	b.n	800511e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510c:	f7fd fd68 	bl	8002be0 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d901      	bls.n	800511e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e03d      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <HAL_RCC_OscConfig+0x4cc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f0      	bne.n	800510c <HAL_RCC_OscConfig+0x4ac>
 800512a:	e035      	b.n	8005198 <HAL_RCC_OscConfig+0x538>
 800512c:	40023800 	.word	0x40023800
 8005130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005134:	4b1b      	ldr	r3, [pc, #108]	; (80051a4 <HAL_RCC_OscConfig+0x544>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d028      	beq.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d121      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515a:	429a      	cmp	r2, r3
 800515c:	d11a      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800516a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800516c:	4293      	cmp	r3, r2
 800516e:	d111      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517a:	085b      	lsrs	r3, r3, #1
 800517c:	3b01      	subs	r3, #1
 800517e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d107      	bne.n	8005194 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800

080051a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0d0      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c0:	4b6a      	ldr	r3, [pc, #424]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d910      	bls.n	80051f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ce:	4b67      	ldr	r3, [pc, #412]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 020f 	bic.w	r2, r3, #15
 80051d6:	4965      	ldr	r1, [pc, #404]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051de:	4b63      	ldr	r3, [pc, #396]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e0b8      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	d005      	beq.n	8005214 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005208:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	4a58      	ldr	r2, [pc, #352]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005212:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005220:	4b53      	ldr	r3, [pc, #332]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a52      	ldr	r2, [pc, #328]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800522a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800522c:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	494d      	ldr	r1, [pc, #308]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d040      	beq.n	80052cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d115      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e07f      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d107      	bne.n	800527a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526a:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d109      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e073      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527a:	4b3d      	ldr	r3, [pc, #244]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e06b      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528a:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f023 0203 	bic.w	r2, r3, #3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4936      	ldr	r1, [pc, #216]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800529c:	f7fd fca0 	bl	8002be0 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a2:	e00a      	b.n	80052ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a4:	f7fd fc9c 	bl	8002be0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e053      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 020c 	and.w	r2, r3, #12
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d1eb      	bne.n	80052a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052cc:	4b27      	ldr	r3, [pc, #156]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d210      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	4b24      	ldr	r3, [pc, #144]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 020f 	bic.w	r2, r3, #15
 80052e2:	4922      	ldr	r1, [pc, #136]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <HAL_RCC_ClockConfig+0x1c4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d001      	beq.n	80052fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e032      	b.n	8005362 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	4916      	ldr	r1, [pc, #88]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0308 	and.w	r3, r3, #8
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	490e      	ldr	r1, [pc, #56]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800533a:	f000 f821 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800533e:	4602      	mov	r2, r0
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCC_ClockConfig+0x1c8>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	f003 030f 	and.w	r3, r3, #15
 800534a:	490a      	ldr	r1, [pc, #40]	; (8005374 <HAL_RCC_ClockConfig+0x1cc>)
 800534c:	5ccb      	ldrb	r3, [r1, r3]
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	4a09      	ldr	r2, [pc, #36]	; (8005378 <HAL_RCC_ClockConfig+0x1d0>)
 8005354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005356:	4b09      	ldr	r3, [pc, #36]	; (800537c <HAL_RCC_ClockConfig+0x1d4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fbfc 	bl	8002b58 <HAL_InitTick>

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	40023c00 	.word	0x40023c00
 8005370:	40023800 	.word	0x40023800
 8005374:	0800c238 	.word	0x0800c238
 8005378:	20000000 	.word	0x20000000
 800537c:	2000000c 	.word	0x2000000c

08005380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005380:	b5b0      	push	{r4, r5, r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005386:	2100      	movs	r1, #0
 8005388:	6079      	str	r1, [r7, #4]
 800538a:	2100      	movs	r1, #0
 800538c:	60f9      	str	r1, [r7, #12]
 800538e:	2100      	movs	r1, #0
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005392:	2100      	movs	r1, #0
 8005394:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005396:	4952      	ldr	r1, [pc, #328]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005398:	6889      	ldr	r1, [r1, #8]
 800539a:	f001 010c 	and.w	r1, r1, #12
 800539e:	2908      	cmp	r1, #8
 80053a0:	d00d      	beq.n	80053be <HAL_RCC_GetSysClockFreq+0x3e>
 80053a2:	2908      	cmp	r1, #8
 80053a4:	f200 8094 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x150>
 80053a8:	2900      	cmp	r1, #0
 80053aa:	d002      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0x32>
 80053ac:	2904      	cmp	r1, #4
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x38>
 80053b0:	e08e      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b2:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80053b4:	60bb      	str	r3, [r7, #8]
      break;
 80053b6:	e08e      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b8:	4b4b      	ldr	r3, [pc, #300]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80053ba:	60bb      	str	r3, [r7, #8]
      break;
 80053bc:	e08b      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053be:	4948      	ldr	r1, [pc, #288]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053c0:	6849      	ldr	r1, [r1, #4]
 80053c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80053c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053c8:	4945      	ldr	r1, [pc, #276]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053ca:	6849      	ldr	r1, [r1, #4]
 80053cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80053d0:	2900      	cmp	r1, #0
 80053d2:	d024      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d4:	4942      	ldr	r1, [pc, #264]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80053d6:	6849      	ldr	r1, [r1, #4]
 80053d8:	0989      	lsrs	r1, r1, #6
 80053da:	4608      	mov	r0, r1
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80053e4:	f04f 0500 	mov.w	r5, #0
 80053e8:	ea00 0204 	and.w	r2, r0, r4
 80053ec:	ea01 0305 	and.w	r3, r1, r5
 80053f0:	493d      	ldr	r1, [pc, #244]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80053f2:	fb01 f003 	mul.w	r0, r1, r3
 80053f6:	2100      	movs	r1, #0
 80053f8:	fb01 f102 	mul.w	r1, r1, r2
 80053fc:	1844      	adds	r4, r0, r1
 80053fe:	493a      	ldr	r1, [pc, #232]	; (80054e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8005400:	fba2 0101 	umull	r0, r1, r2, r1
 8005404:	1863      	adds	r3, r4, r1
 8005406:	4619      	mov	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	461a      	mov	r2, r3
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	f7fb fcaa 	bl	8000d68 <__aeabi_uldivmod>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4613      	mov	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e04a      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b30      	ldr	r3, [pc, #192]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	ea02 0400 	and.w	r4, r2, r0
 8005436:	ea03 0501 	and.w	r5, r3, r1
 800543a:	4620      	mov	r0, r4
 800543c:	4629      	mov	r1, r5
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	014b      	lsls	r3, r1, #5
 8005448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800544c:	0142      	lsls	r2, r0, #5
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	1b00      	subs	r0, r0, r4
 8005454:	eb61 0105 	sbc.w	r1, r1, r5
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	018b      	lsls	r3, r1, #6
 8005462:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005466:	0182      	lsls	r2, r0, #6
 8005468:	1a12      	subs	r2, r2, r0
 800546a:	eb63 0301 	sbc.w	r3, r3, r1
 800546e:	f04f 0000 	mov.w	r0, #0
 8005472:	f04f 0100 	mov.w	r1, #0
 8005476:	00d9      	lsls	r1, r3, #3
 8005478:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547c:	00d0      	lsls	r0, r2, #3
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	1912      	adds	r2, r2, r4
 8005484:	eb45 0303 	adc.w	r3, r5, r3
 8005488:	f04f 0000 	mov.w	r0, #0
 800548c:	f04f 0100 	mov.w	r1, #0
 8005490:	0299      	lsls	r1, r3, #10
 8005492:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005496:	0290      	lsls	r0, r2, #10
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4610      	mov	r0, r2
 800549e:	4619      	mov	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	461a      	mov	r2, r3
 80054a4:	f04f 0300 	mov.w	r3, #0
 80054a8:	f7fb fc5e 	bl	8000d68 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054b4:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	60bb      	str	r3, [r7, #8]
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80054d2:	60bb      	str	r3, [r7, #8]
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	68bb      	ldr	r3, [r7, #8]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bdb0      	pop	{r4, r5, r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	00f42400 	.word	0x00f42400
 80054e8:	017d7840 	.word	0x017d7840

080054ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20000000 	.word	0x20000000

08005504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005508:	f7ff fff0 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	0a9b      	lsrs	r3, r3, #10
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40023800 	.word	0x40023800
 8005528:	0800c248 	.word	0x0800c248

0800552c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005530:	f7ff ffdc 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	0b5b      	lsrs	r3, r3, #13
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	4903      	ldr	r1, [pc, #12]	; (8005550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005548:	4618      	mov	r0, r3
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	0800c248 	.word	0x0800c248

08005554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	d012      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800557c:	4b69      	ldr	r3, [pc, #420]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a68      	ldr	r2, [pc, #416]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005586:	6093      	str	r3, [r2, #8]
 8005588:	4b66      	ldr	r3, [pc, #408]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005590:	4964      	ldr	r1, [pc, #400]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800559e:	2301      	movs	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d017      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055ae:	4b5d      	ldr	r3, [pc, #372]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	4959      	ldr	r1, [pc, #356]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055cc:	d101      	bne.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055da:	2301      	movs	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055ea:	4b4e      	ldr	r3, [pc, #312]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	494a      	ldr	r1, [pc, #296]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005616:	2301      	movs	r3, #1
 8005618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005626:	2301      	movs	r3, #1
 8005628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 808b 	beq.w	800574e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005638:	4b3a      	ldr	r3, [pc, #232]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563c:	4a39      	ldr	r2, [pc, #228]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005642:	6413      	str	r3, [r2, #64]	; 0x40
 8005644:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005650:	4b35      	ldr	r3, [pc, #212]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800565c:	f7fd fac0 	bl	8002be0 <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005664:	f7fd fabc 	bl	8002be0 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e357      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005676:	4b2c      	ldr	r3, [pc, #176]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d035      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d02e      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056a0:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056b6:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	4a1a      	ldr	r2, [pc, #104]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056c2:	4a18      	ldr	r2, [pc, #96]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056c8:	4b16      	ldr	r3, [pc, #88]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d114      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d4:	f7fd fa84 	bl	8002be0 <HAL_GetTick>
 80056d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056da:	e00a      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd fa80 	bl	8002be0 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e319      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ee      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570a:	d111      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800571a:	400b      	ands	r3, r1
 800571c:	4901      	ldr	r1, [pc, #4]	; (8005724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
 8005722:	e00b      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005724:	40023800 	.word	0x40023800
 8005728:	40007000 	.word	0x40007000
 800572c:	0ffffcff 	.word	0x0ffffcff
 8005730:	4bb1      	ldr	r3, [pc, #708]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4ab0      	ldr	r2, [pc, #704]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005736:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800573a:	6093      	str	r3, [r2, #8]
 800573c:	4bae      	ldr	r3, [pc, #696]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800573e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005748:	49ab      	ldr	r1, [pc, #684]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b00      	cmp	r3, #0
 8005758:	d010      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800575a:	4ba7      	ldr	r3, [pc, #668]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800575c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005760:	4aa5      	ldr	r2, [pc, #660]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800576a:	4ba3      	ldr	r3, [pc, #652]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800576c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	49a0      	ldr	r1, [pc, #640]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005788:	4b9b      	ldr	r3, [pc, #620]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800578a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005796:	4998      	ldr	r1, [pc, #608]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057aa:	4b93      	ldr	r3, [pc, #588]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b8:	498f      	ldr	r1, [pc, #572]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057cc:	4b8a      	ldr	r3, [pc, #552]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057da:	4987      	ldr	r1, [pc, #540]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ee:	4b82      	ldr	r3, [pc, #520]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	497e      	ldr	r1, [pc, #504]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005810:	4b79      	ldr	r3, [pc, #484]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	f023 0203 	bic.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	4976      	ldr	r1, [pc, #472]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005832:	4b71      	ldr	r3, [pc, #452]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	f023 020c 	bic.w	r2, r3, #12
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005840:	496d      	ldr	r1, [pc, #436]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005854:	4b68      	ldr	r3, [pc, #416]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005862:	4965      	ldr	r1, [pc, #404]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005876:	4b60      	ldr	r3, [pc, #384]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005884:	495c      	ldr	r1, [pc, #368]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005898:	4b57      	ldr	r3, [pc, #348]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	4954      	ldr	r1, [pc, #336]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058ba:	4b4f      	ldr	r3, [pc, #316]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	494b      	ldr	r1, [pc, #300]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ea:	4943      	ldr	r1, [pc, #268]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80058fe:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	493a      	ldr	r1, [pc, #232]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005920:	4b35      	ldr	r3, [pc, #212]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800592e:	4932      	ldr	r1, [pc, #200]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d011      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005942:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005950:	4929      	ldr	r1, [pc, #164]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005960:	d101      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005962:	2301      	movs	r3, #1
 8005964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005972:	2301      	movs	r3, #1
 8005974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005982:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005990:	4919      	ldr	r1, [pc, #100]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059a4:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059b4:	4910      	ldr	r1, [pc, #64]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d006      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 80d9 	beq.w	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a08      	ldr	r2, [pc, #32]	; (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80059d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059dc:	f7fd f900 	bl	8002be0 <HAL_GetTick>
 80059e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059e2:	e00b      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059e4:	f7fd f8fc 	bl	8002be0 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b64      	cmp	r3, #100	; 0x64
 80059f0:	d904      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e197      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059fc:	4b6c      	ldr	r3, [pc, #432]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ed      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d021      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d11d      	bne.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a1c:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a2a:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	0e1b      	lsrs	r3, r3, #24
 8005a32:	f003 030f 	and.w	r3, r3, #15
 8005a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	019a      	lsls	r2, r3, #6
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	041b      	lsls	r3, r3, #16
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	061b      	lsls	r3, r3, #24
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	071b      	lsls	r3, r3, #28
 8005a50:	4957      	ldr	r1, [pc, #348]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6c:	d00a      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d02e      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a82:	d129      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a84:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a92:	4b47      	ldr	r3, [pc, #284]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a98:	0f1b      	lsrs	r3, r3, #28
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	019a      	lsls	r2, r3, #6
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	071b      	lsls	r3, r3, #28
 8005ab8:	493d      	ldr	r1, [pc, #244]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	f023 021f 	bic.w	r2, r3, #31
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	4937      	ldr	r1, [pc, #220]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01d      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ae6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aea:	0e1b      	lsrs	r3, r3, #24
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005af2:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af8:	0f1b      	lsrs	r3, r3, #28
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	019a      	lsls	r2, r3, #6
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	071b      	lsls	r3, r3, #28
 8005b18:	4925      	ldr	r1, [pc, #148]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d011      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	019a      	lsls	r2, r3, #6
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	041b      	lsls	r3, r3, #16
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	061b      	lsls	r3, r3, #24
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	071b      	lsls	r3, r3, #28
 8005b48:	4919      	ldr	r1, [pc, #100]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b50:	4b17      	ldr	r3, [pc, #92]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5c:	f7fd f840 	bl	8002be0 <HAL_GetTick>
 8005b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b64:	f7fd f83c 	bl	8002be0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e0d7      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b76:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	f040 80cd 	bne.w	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b96:	f7fd f823 	bl	8002be0 <HAL_GetTick>
 8005b9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b9c:	e00a      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b9e:	f7fd f81f 	bl	8002be0 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b64      	cmp	r3, #100	; 0x64
 8005baa:	d903      	bls.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e0ba      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005bb0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005bb4:	4b5e      	ldr	r3, [pc, #376]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bc0:	d0ed      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02e      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d12a      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bea:	4b51      	ldr	r3, [pc, #324]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf0:	0c1b      	lsrs	r3, r3, #16
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	0f1b      	lsrs	r3, r3, #28
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	019a      	lsls	r2, r3, #6
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	041b      	lsls	r3, r3, #16
 8005c10:	431a      	orrs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	071b      	lsls	r3, r3, #28
 8005c1e:	4944      	ldr	r1, [pc, #272]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c26:	4b42      	ldr	r3, [pc, #264]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c34:	3b01      	subs	r3, #1
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	493d      	ldr	r1, [pc, #244]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d022      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c54:	d11d      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5c:	0e1b      	lsrs	r3, r3, #24
 8005c5e:	f003 030f 	and.w	r3, r3, #15
 8005c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6a:	0f1b      	lsrs	r3, r3, #28
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	019a      	lsls	r2, r3, #6
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	041b      	lsls	r3, r3, #16
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	061b      	lsls	r3, r3, #24
 8005c84:	431a      	orrs	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	071b      	lsls	r3, r3, #28
 8005c8a:	4929      	ldr	r1, [pc, #164]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d028      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c9e:	4b24      	ldr	r3, [pc, #144]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca4:	0e1b      	lsrs	r3, r3, #24
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cac:	4b20      	ldr	r3, [pc, #128]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	0c1b      	lsrs	r3, r3, #16
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	019a      	lsls	r2, r3, #6
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	061b      	lsls	r3, r3, #24
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	4917      	ldr	r1, [pc, #92]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cda:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4911      	ldr	r1, [pc, #68]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005cf0:	4b0f      	ldr	r3, [pc, #60]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cfc:	f7fc ff70 	bl	8002be0 <HAL_GetTick>
 8005d00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d04:	f7fc ff6c 	bl	8002be0 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e007      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d22:	d1ef      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	40023800 	.word	0x40023800

08005d34 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e081      	b.n	8005e4a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	7f5b      	ldrb	r3, [r3, #29]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d105      	bne.n	8005d5c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc fc26 	bl	80025a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	22ca      	movs	r2, #202	; 0xca
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2253      	movs	r2, #83	; 0x53
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 faac 	bl	80062d0 <RTC_EnterInitMode>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	22ff      	movs	r2, #255	; 0xff
 8005d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2204      	movs	r2, #4
 8005d8a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e05c      	b.n	8005e4a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6899      	ldr	r1, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <HAL_RTC_Init+0x120>)
 8005d9c:	400b      	ands	r3, r1
 8005d9e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6899      	ldr	r1, [r3, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68d2      	ldr	r2, [r2, #12]
 8005dc6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6919      	ldr	r1, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	041a      	lsls	r2, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dea:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10e      	bne.n	8005e18 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa40 	bl	8006280 <HAL_RTC_WaitForSynchro>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	22ff      	movs	r2, #255	; 0xff
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e018      	b.n	8005e4a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0208 	bic.w	r2, r2, #8
 8005e26:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699a      	ldr	r2, [r3, #24]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	22ff      	movs	r2, #255	; 0xff
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005e48:	2300      	movs	r3, #0
  }
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	ff8fffbf 	.word	0xff8fffbf

08005e58 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	7f1b      	ldrb	r3, [r3, #28]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_RTC_SetTime+0x1c>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e0a8      	b.n	8005fc6 <HAL_RTC_SetTime+0x16e>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d126      	bne.n	8005ed4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fa42 	bl	8006328 <RTC_ByteToBcd2>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f000 fa3b 	bl	8006328 <RTC_ByteToBcd2>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005eb6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	789b      	ldrb	r3, [r3, #2]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fa33 	bl	8006328 <RTC_ByteToBcd2>
 8005ec2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005ec4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	7b1b      	ldrb	r3, [r3, #12]
 8005ecc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e018      	b.n	8005f06 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785b      	ldrb	r3, [r3, #1]
 8005ef2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005ef4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005efa:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	7b1b      	ldrb	r3, [r3, #12]
 8005f00:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ca      	movs	r2, #202	; 0xca
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2253      	movs	r2, #83	; 0x53
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f9da 	bl	80062d0 <RTC_EnterInitMode>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	22ff      	movs	r2, #255	; 0xff
 8005f28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2204      	movs	r2, #4
 8005f2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e045      	b.n	8005fc6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	4b23      	ldr	r3, [pc, #140]	; (8005fd0 <HAL_RTC_SetTime+0x178>)
 8005f42:	400b      	ands	r3, r1
 8005f44:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f54:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6899      	ldr	r1, [r3, #8]
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	430a      	orrs	r2, r1
 8005f6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f7c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d111      	bne.n	8005fb0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f977 	bl	8006280 <HAL_RTC_WaitForSynchro>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	22ff      	movs	r2, #255	; 0xff
 8005f9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2204      	movs	r2, #4
 8005fa4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e00a      	b.n	8005fc6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	22ff      	movs	r2, #255	; 0xff
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	007f7f7f 	.word	0x007f7f7f

08005fd4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b22      	ldr	r3, [pc, #136]	; (800608c <HAL_RTC_GetTime+0xb8>)
 8006004:	4013      	ands	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	0c1b      	lsrs	r3, r3, #16
 800600c:	b2db      	uxtb	r3, r3
 800600e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	b2db      	uxtb	r3, r3
 800601e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	0c1b      	lsrs	r3, r3, #16
 800603a:	b2db      	uxtb	r3, r3
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11a      	bne.n	8006082 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f000 f987 	bl	8006364 <RTC_Bcd2ToByte>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	785b      	ldrb	r3, [r3, #1]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f97e 	bl	8006364 <RTC_Bcd2ToByte>
 8006068:	4603      	mov	r3, r0
 800606a:	461a      	mov	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	789b      	ldrb	r3, [r3, #2]
 8006074:	4618      	mov	r0, r3
 8006076:	f000 f975 	bl	8006364 <RTC_Bcd2ToByte>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	007f7f7f 	.word	0x007f7f7f

08006090 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	7f1b      	ldrb	r3, [r3, #28]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d101      	bne.n	80060ac <HAL_RTC_SetDate+0x1c>
 80060a8:	2302      	movs	r3, #2
 80060aa:	e092      	b.n	80061d2 <HAL_RTC_SetDate+0x142>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10e      	bne.n	80060dc <HAL_RTC_SetDate+0x4c>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	f003 0310 	and.w	r3, r3, #16
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	f023 0310 	bic.w	r3, r3, #16
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	330a      	adds	r3, #10
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d11c      	bne.n	800611c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	78db      	ldrb	r3, [r3, #3]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 f91e 	bl	8006328 <RTC_ByteToBcd2>
 80060ec:	4603      	mov	r3, r0
 80060ee:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f917 	bl	8006328 <RTC_ByteToBcd2>
 80060fa:	4603      	mov	r3, r0
 80060fc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80060fe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	789b      	ldrb	r3, [r3, #2]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f90f 	bl	8006328 <RTC_ByteToBcd2>
 800610a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800610c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	e00e      	b.n	800613a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	78db      	ldrb	r3, [r3, #3]
 8006120:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006128:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800612e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8006136:	4313      	orrs	r3, r2
 8006138:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	22ca      	movs	r2, #202	; 0xca
 8006140:	625a      	str	r2, [r3, #36]	; 0x24
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2253      	movs	r2, #83	; 0x53
 8006148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 f8c0 	bl	80062d0 <RTC_EnterInitMode>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00b      	beq.n	800616e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	22ff      	movs	r2, #255	; 0xff
 800615c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2204      	movs	r2, #4
 8006162:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e031      	b.n	80061d2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_RTC_SetDate+0x14c>)
 8006176:	400b      	ands	r3, r1
 8006178:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006188:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d111      	bne.n	80061bc <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f871 	bl	8006280 <HAL_RTC_WaitForSynchro>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00b      	beq.n	80061bc <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2204      	movs	r2, #4
 80061b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e00a      	b.n	80061d2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	22ff      	movs	r2, #255	; 0xff
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80061d0:	2300      	movs	r3, #0
  }
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd90      	pop	{r4, r7, pc}
 80061da:	bf00      	nop
 80061dc:	00ffff3f 	.word	0x00ffff3f

080061e0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_RTC_GetDate+0x9c>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	b2da      	uxtb	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	0a1b      	lsrs	r3, r3, #8
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 031f 	and.w	r3, r3, #31
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800621e:	b2da      	uxtb	r2, r3
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	0b5b      	lsrs	r3, r3, #13
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11a      	bne.n	8006270 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	78db      	ldrb	r3, [r3, #3]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 f890 	bl	8006364 <RTC_Bcd2ToByte>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f887 	bl	8006364 <RTC_Bcd2ToByte>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	789b      	ldrb	r3, [r3, #2]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f87e 	bl	8006364 <RTC_Bcd2ToByte>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	00ffff3f 	.word	0x00ffff3f

08006280 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800629a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800629c:	f7fc fca0 	bl	8002be0 <HAL_GetTick>
 80062a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062a2:	e009      	b.n	80062b8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062a4:	f7fc fc9c 	bl	8002be0 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b2:	d901      	bls.n	80062b8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e007      	b.n	80062c8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0320 	and.w	r3, r3, #32
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0ee      	beq.n	80062a4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d119      	bne.n	800631e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295
 80062f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f4:	f7fc fc74 	bl	8002be0 <HAL_GetTick>
 80062f8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062fa:	e009      	b.n	8006310 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062fc:	f7fc fc70 	bl	8002be0 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800630a:	d901      	bls.n	8006310 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e007      	b.n	8006320 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0ee      	beq.n	80062fc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8006336:	e005      	b.n	8006344 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	3301      	adds	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	3b0a      	subs	r3, #10
 8006342:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8006344:	79fb      	ldrb	r3, [r7, #7]
 8006346:	2b09      	cmp	r3, #9
 8006348:	d8f6      	bhi.n	8006338 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	b2da      	uxtb	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	4313      	orrs	r3, r2
 8006356:	b2db      	uxtb	r3, r3
}
 8006358:	4618      	mov	r0, r3
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	091b      	lsrs	r3, r3, #4
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	4613      	mov	r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	4413      	add	r3, r2
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	b2da      	uxtb	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4413      	add	r3, r2
 8006392:	b2db      	uxtb	r3, r3
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e040      	b.n	8006434 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fc f91e 	bl	8002604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 0201 	bic.w	r2, r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fc02 	bl	8006be8 <UART_SetConfig>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fe58 	bl	80070ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800640a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800641a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 0201 	orr.w	r2, r2, #1
 800642a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fedf 	bl	80071f0 <UART_CheckIdleState>
 8006432:	4603      	mov	r3, r0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08a      	sub	sp, #40	; 0x28
 8006440:	af02      	add	r7, sp, #8
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	4613      	mov	r3, r2
 800644a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006450:	2b20      	cmp	r3, #32
 8006452:	f040 8081 	bne.w	8006558 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_Transmit+0x26>
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e079      	b.n	800655a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_UART_Transmit+0x38>
 8006470:	2302      	movs	r3, #2
 8006472:	e072      	b.n	800655a <HAL_UART_Transmit+0x11e>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2221      	movs	r2, #33	; 0x21
 8006488:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fc fba9 	bl	8002be0 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a8:	d108      	bne.n	80064bc <HAL_UART_Transmit+0x80>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d104      	bne.n	80064bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61bb      	str	r3, [r7, #24]
 80064ba:	e003      	b.n	80064c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064cc:	e02c      	b.n	8006528 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	2180      	movs	r1, #128	; 0x80
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 febc 	bl	8007256 <UART_WaitOnFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e038      	b.n	800655a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10b      	bne.n	8006506 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	3302      	adds	r3, #2
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	e007      	b.n	8006516 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	781a      	ldrb	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800651c:	b29b      	uxth	r3, r3
 800651e:	3b01      	subs	r3, #1
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1cc      	bne.n	80064ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	2200      	movs	r2, #0
 800653c:	2140      	movs	r1, #64	; 0x40
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f000 fe89 	bl	8007256 <UART_WaitOnFlagUntilTimeout>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e005      	b.n	800655a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2220      	movs	r2, #32
 8006552:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b08a      	sub	sp, #40	; 0x28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006574:	2b20      	cmp	r3, #32
 8006576:	d13d      	bne.n	80065f4 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_UART_Receive_IT+0x22>
 800657e:	88fb      	ldrh	r3, [r7, #6]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e036      	b.n	80065f6 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800658e:	2b01      	cmp	r3, #1
 8006590:	d101      	bne.n	8006596 <HAL_UART_Receive_IT+0x34>
 8006592:	2302      	movs	r3, #2
 8006594:	e02f      	b.n	80065f6 <HAL_UART_Receive_IT+0x94>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d018      	beq.n	80065e4 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	613b      	str	r3, [r7, #16]
   return(result);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	69f9      	ldr	r1, [r7, #28]
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	461a      	mov	r2, r3
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fef8 	bl	80073e0 <UART_Start_Receive_IT>
 80065f0:	4603      	mov	r3, r0
 80065f2:	e000      	b.n	80065f6 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065f4:	2302      	movs	r3, #2
  }
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3728      	adds	r7, #40	; 0x28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ba      	sub	sp, #232	; 0xe8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006626:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800662a:	f640 030f 	movw	r3, #2063	; 0x80f
 800662e:	4013      	ands	r3, r2
 8006630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d115      	bne.n	8006668 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00f      	beq.n	8006668 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d009      	beq.n	8006668 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 828f 	beq.w	8006b7c <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
      }
      return;
 8006666:	e289      	b.n	8006b7c <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8117 	beq.w	80068a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b00      	cmp	r3, #0
 800667c:	d106      	bne.n	800668c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800667e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006682:	4b85      	ldr	r3, [pc, #532]	; (8006898 <HAL_UART_IRQHandler+0x298>)
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 810a 	beq.w	80068a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d011      	beq.n	80066bc <HAL_UART_IRQHandler+0xbc>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2201      	movs	r2, #1
 80066aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b2:	f043 0201 	orr.w	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d011      	beq.n	80066ec <HAL_UART_IRQHandler+0xec>
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2202      	movs	r2, #2
 80066da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e2:	f043 0204 	orr.w	r2, r3, #4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d011      	beq.n	800671c <HAL_UART_IRQHandler+0x11c>
 80066f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2204      	movs	r2, #4
 800670a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006712:	f043 0202 	orr.w	r2, r3, #2
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	f003 0308 	and.w	r3, r3, #8
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800672c:	f003 0320 	and.w	r3, r3, #32
 8006730:	2b00      	cmp	r3, #0
 8006732:	d105      	bne.n	8006740 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006738:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00b      	beq.n	8006758 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2208      	movs	r2, #8
 8006746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674e:	f043 0208 	orr.w	r2, r3, #8
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <HAL_UART_IRQHandler+0x18a>
 8006764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00c      	beq.n	800678a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 81f5 	beq.w	8006b80 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00d      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d005      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04f      	beq.n	8006882 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fec6 	bl	8007574 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d141      	bne.n	800687a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800680c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3308      	adds	r3, #8
 800681e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006822:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800682e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800683a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1d9      	bne.n	80067f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	2b00      	cmp	r3, #0
 8006848:	d013      	beq.n	8006872 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	4a13      	ldr	r2, [pc, #76]	; (800689c <HAL_UART_IRQHandler+0x29c>)
 8006850:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006856:	4618      	mov	r0, r3
 8006858:	f7fc ff92 	bl	8003780 <HAL_DMA_Abort_IT>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d017      	beq.n	8006892 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006870:	e00f      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9a2 	bl	8006bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	e00b      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f99e 	bl	8006bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006880:	e007      	b.n	8006892 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f99a 	bl	8006bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006890:	e176      	b.n	8006b80 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006892:	bf00      	nop
    return;
 8006894:	e174      	b.n	8006b80 <HAL_UART_IRQHandler+0x580>
 8006896:	bf00      	nop
 8006898:	04000120 	.word	0x04000120
 800689c:	0800763b 	.word	0x0800763b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	f040 8144 	bne.w	8006b32 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 813d 	beq.w	8006b32 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8136 	beq.w	8006b32 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2210      	movs	r2, #16
 80068cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	f040 80b2 	bne.w	8006a42 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 8148 	beq.w	8006b84 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068fe:	429a      	cmp	r2, r3
 8006900:	f080 8140 	bcs.w	8006b84 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800690a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	69db      	ldr	r3, [r3, #28]
 8006914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006918:	f000 8085 	beq.w	8006a26 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006928:	e853 3f00 	ldrex	r3, [r3]
 800692c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006930:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006938:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800694a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006952:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800695e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1da      	bne.n	800691c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006976:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006978:	f023 0301 	bic.w	r3, r3, #1
 800697c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3308      	adds	r3, #8
 8006986:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800698a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800698e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006992:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800699c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e1      	bne.n	8006966 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3308      	adds	r3, #8
 80069a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ac:	e853 3f00 	ldrex	r3, [r3]
 80069b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	3308      	adds	r3, #8
 80069c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e3      	bne.n	80069a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2220      	movs	r2, #32
 80069de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a0a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fc fe3d 	bl	80036a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8c8 	bl	8006bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a40:	e0a0      	b.n	8006b84 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8092 	beq.w	8006b88 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 808d 	beq.w	8006b88 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e4      	bne.n	8006a6e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab4:	6a3b      	ldr	r3, [r7, #32]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ac8:	633a      	str	r2, [r7, #48]	; 0x30
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e3      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f023 0310 	bic.w	r3, r3, #16
 8006b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b10:	61fb      	str	r3, [r7, #28]
 8006b12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	69fa      	ldr	r2, [r7, #28]
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e4      	bne.n	8006aee <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f850 	bl	8006bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b30:	e02a      	b.n	8006b88 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01c      	beq.n	8006b8c <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
    }
    return;
 8006b5a:	e017      	b.n	8006b8c <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d012      	beq.n	8006b8e <HAL_UART_IRQHandler+0x58e>
 8006b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00c      	beq.n	8006b8e <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fd76 	bl	8007666 <UART_EndTransmit_IT>
    return;
 8006b7a:	e008      	b.n	8006b8e <HAL_UART_IRQHandler+0x58e>
      return;
 8006b7c:	bf00      	nop
 8006b7e:	e006      	b.n	8006b8e <HAL_UART_IRQHandler+0x58e>
    return;
 8006b80:	bf00      	nop
 8006b82:	e004      	b.n	8006b8e <HAL_UART_IRQHandler+0x58e>
      return;
 8006b84:	bf00      	nop
 8006b86:	e002      	b.n	8006b8e <HAL_UART_IRQHandler+0x58e>
      return;
 8006b88:	bf00      	nop
 8006b8a:	e000      	b.n	8006b8e <HAL_UART_IRQHandler+0x58e>
    return;
 8006b8c:	bf00      	nop
  }

}
 8006b8e:	37e8      	adds	r7, #232	; 0xe8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4ba7      	ldr	r3, [pc, #668]	; (8006eb0 <UART_SetConfig+0x2c8>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a95      	ldr	r2, [pc, #596]	; (8006eb4 <UART_SetConfig+0x2cc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d120      	bne.n	8006ca6 <UART_SetConfig+0xbe>
 8006c64:	4b94      	ldr	r3, [pc, #592]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d816      	bhi.n	8006ca0 <UART_SetConfig+0xb8>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x90>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c8f 	.word	0x08006c8f
 8006c84:	08006c9b 	.word	0x08006c9b
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e14f      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e14c      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e149      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e146      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e143      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a84      	ldr	r2, [pc, #528]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d132      	bne.n	8006d16 <UART_SetConfig+0x12e>
 8006cb0:	4b81      	ldr	r3, [pc, #516]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b0c      	cmp	r3, #12
 8006cbc:	d828      	bhi.n	8006d10 <UART_SetConfig+0x128>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0xdc>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cf9 	.word	0x08006cf9
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d05 	.word	0x08006d05
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d11 	.word	0x08006d11
 8006ce4:	08006cff 	.word	0x08006cff
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006d0b 	.word	0x08006d0b
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e117      	b.n	8006f2e <UART_SetConfig+0x346>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	77fb      	strb	r3, [r7, #31]
 8006d02:	e114      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d04:	2304      	movs	r3, #4
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e111      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e10e      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d10:	2310      	movs	r3, #16
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e10b      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a69      	ldr	r2, [pc, #420]	; (8006ec0 <UART_SetConfig+0x2d8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d120      	bne.n	8006d62 <UART_SetConfig+0x17a>
 8006d20:	4b65      	ldr	r3, [pc, #404]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d2a:	2b30      	cmp	r3, #48	; 0x30
 8006d2c:	d013      	beq.n	8006d56 <UART_SetConfig+0x16e>
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d814      	bhi.n	8006d5c <UART_SetConfig+0x174>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d009      	beq.n	8006d4a <UART_SetConfig+0x162>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d810      	bhi.n	8006d5c <UART_SetConfig+0x174>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <UART_SetConfig+0x15c>
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d006      	beq.n	8006d50 <UART_SetConfig+0x168>
 8006d42:	e00b      	b.n	8006d5c <UART_SetConfig+0x174>
 8006d44:	2300      	movs	r3, #0
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0f1      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e0ee      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d50:	2304      	movs	r3, #4
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0eb      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d56:	2308      	movs	r3, #8
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e0e8      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e0e5      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <UART_SetConfig+0x2dc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d120      	bne.n	8006dae <UART_SetConfig+0x1c6>
 8006d6c:	4b52      	ldr	r3, [pc, #328]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d76:	2bc0      	cmp	r3, #192	; 0xc0
 8006d78:	d013      	beq.n	8006da2 <UART_SetConfig+0x1ba>
 8006d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d7c:	d814      	bhi.n	8006da8 <UART_SetConfig+0x1c0>
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d009      	beq.n	8006d96 <UART_SetConfig+0x1ae>
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d810      	bhi.n	8006da8 <UART_SetConfig+0x1c0>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <UART_SetConfig+0x1a8>
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d006      	beq.n	8006d9c <UART_SetConfig+0x1b4>
 8006d8e:	e00b      	b.n	8006da8 <UART_SetConfig+0x1c0>
 8006d90:	2300      	movs	r3, #0
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0cb      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d96:	2302      	movs	r3, #2
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e0c8      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e0c5      	b.n	8006f2e <UART_SetConfig+0x346>
 8006da2:	2308      	movs	r3, #8
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e0c2      	b.n	8006f2e <UART_SetConfig+0x346>
 8006da8:	2310      	movs	r3, #16
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e0bf      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a45      	ldr	r2, [pc, #276]	; (8006ec8 <UART_SetConfig+0x2e0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d125      	bne.n	8006e04 <UART_SetConfig+0x21c>
 8006db8:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc6:	d017      	beq.n	8006df8 <UART_SetConfig+0x210>
 8006dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dcc:	d817      	bhi.n	8006dfe <UART_SetConfig+0x216>
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd2:	d00b      	beq.n	8006dec <UART_SetConfig+0x204>
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d811      	bhi.n	8006dfe <UART_SetConfig+0x216>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <UART_SetConfig+0x1fe>
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d006      	beq.n	8006df2 <UART_SetConfig+0x20a>
 8006de4:	e00b      	b.n	8006dfe <UART_SetConfig+0x216>
 8006de6:	2300      	movs	r3, #0
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e0a0      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dec:	2302      	movs	r3, #2
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e09d      	b.n	8006f2e <UART_SetConfig+0x346>
 8006df2:	2304      	movs	r3, #4
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e09a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e097      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dfe:	2310      	movs	r3, #16
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e094      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <UART_SetConfig+0x2e4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d125      	bne.n	8006e5a <UART_SetConfig+0x272>
 8006e0e:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1c:	d017      	beq.n	8006e4e <UART_SetConfig+0x266>
 8006e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e22:	d817      	bhi.n	8006e54 <UART_SetConfig+0x26c>
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d00b      	beq.n	8006e42 <UART_SetConfig+0x25a>
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d811      	bhi.n	8006e54 <UART_SetConfig+0x26c>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <UART_SetConfig+0x254>
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e38:	d006      	beq.n	8006e48 <UART_SetConfig+0x260>
 8006e3a:	e00b      	b.n	8006e54 <UART_SetConfig+0x26c>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e075      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e42:	2302      	movs	r3, #2
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e072      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e06f      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e06c      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e54:	2310      	movs	r3, #16
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e069      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <UART_SetConfig+0x2e8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d137      	bne.n	8006ed4 <UART_SetConfig+0x2ec>
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e72:	d017      	beq.n	8006ea4 <UART_SetConfig+0x2bc>
 8006e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e78:	d817      	bhi.n	8006eaa <UART_SetConfig+0x2c2>
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7e:	d00b      	beq.n	8006e98 <UART_SetConfig+0x2b0>
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d811      	bhi.n	8006eaa <UART_SetConfig+0x2c2>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <UART_SetConfig+0x2aa>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d006      	beq.n	8006e9e <UART_SetConfig+0x2b6>
 8006e90:	e00b      	b.n	8006eaa <UART_SetConfig+0x2c2>
 8006e92:	2300      	movs	r3, #0
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e04a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e047      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	77fb      	strb	r3, [r7, #31]
 8006ea2:	e044      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e041      	b.n	8006f2e <UART_SetConfig+0x346>
 8006eaa:	2310      	movs	r3, #16
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e03e      	b.n	8006f2e <UART_SetConfig+0x346>
 8006eb0:	efff69f3 	.word	0xefff69f3
 8006eb4:	40011000 	.word	0x40011000
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40004400 	.word	0x40004400
 8006ec0:	40004800 	.word	0x40004800
 8006ec4:	40004c00 	.word	0x40004c00
 8006ec8:	40005000 	.word	0x40005000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	40007800 	.word	0x40007800
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a71      	ldr	r2, [pc, #452]	; (80070a0 <UART_SetConfig+0x4b8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d125      	bne.n	8006f2a <UART_SetConfig+0x342>
 8006ede:	4b71      	ldr	r3, [pc, #452]	; (80070a4 <UART_SetConfig+0x4bc>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ee8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eec:	d017      	beq.n	8006f1e <UART_SetConfig+0x336>
 8006eee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ef2:	d817      	bhi.n	8006f24 <UART_SetConfig+0x33c>
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d00b      	beq.n	8006f12 <UART_SetConfig+0x32a>
 8006efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efe:	d811      	bhi.n	8006f24 <UART_SetConfig+0x33c>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <UART_SetConfig+0x324>
 8006f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f08:	d006      	beq.n	8006f18 <UART_SetConfig+0x330>
 8006f0a:	e00b      	b.n	8006f24 <UART_SetConfig+0x33c>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e00d      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f12:	2302      	movs	r3, #2
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e00a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e007      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e004      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f24:	2310      	movs	r3, #16
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e001      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f36:	d15a      	bne.n	8006fee <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d827      	bhi.n	8006f8e <UART_SetConfig+0x3a6>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x35c>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	08006f8f 	.word	0x08006f8f
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006f87 	.word	0x08006f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fe facc 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8006f6c:	61b8      	str	r0, [r7, #24]
        break;
 8006f6e:	e013      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fe fadc 	bl	800552c <HAL_RCC_GetPCLK2Freq>
 8006f74:	61b8      	str	r0, [r7, #24]
        break;
 8006f76:	e00f      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f78:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <UART_SetConfig+0x4c0>)
 8006f7a:	61bb      	str	r3, [r7, #24]
        break;
 8006f7c:	e00c      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fe f9ff 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 8006f82:	61b8      	str	r0, [r7, #24]
        break;
 8006f84:	e008      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8a:	61bb      	str	r3, [r7, #24]
        break;
 8006f8c:	e004      	b.n	8006f98 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	77bb      	strb	r3, [r7, #30]
        break;
 8006f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d074      	beq.n	8007088 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d916      	bls.n	8006fe8 <UART_SetConfig+0x400>
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc0:	d212      	bcs.n	8006fe8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f023 030f 	bic.w	r3, r3, #15
 8006fca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	085b      	lsrs	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f003 0307 	and.w	r3, r3, #7
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	89fb      	ldrh	r3, [r7, #14]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	89fa      	ldrh	r2, [r7, #14]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e04f      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	77bb      	strb	r3, [r7, #30]
 8006fec:	e04c      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fee:	7ffb      	ldrb	r3, [r7, #31]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d828      	bhi.n	8007046 <UART_SetConfig+0x45e>
 8006ff4:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x414>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fe fa70 	bl	8005504 <HAL_RCC_GetPCLK1Freq>
 8007024:	61b8      	str	r0, [r7, #24]
        break;
 8007026:	e013      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fe fa80 	bl	800552c <HAL_RCC_GetPCLK2Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e00f      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <UART_SetConfig+0x4c0>)
 8007032:	61bb      	str	r3, [r7, #24]
        break;
 8007034:	e00c      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fe f9a3 	bl	8005380 <HAL_RCC_GetSysClockFreq>
 800703a:	61b8      	str	r0, [r7, #24]
        break;
 800703c:	e008      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	61bb      	str	r3, [r7, #24]
        break;
 8007044:	e004      	b.n	8007050 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	77bb      	strb	r3, [r7, #30]
        break;
 800704e:	bf00      	nop
    }

    if (pclk != 0U)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d018      	beq.n	8007088 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	085a      	lsrs	r2, r3, #1
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	441a      	add	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b0f      	cmp	r3, #15
 800706e:	d909      	bls.n	8007084 <UART_SetConfig+0x49c>
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007076:	d205      	bcs.n	8007084 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e001      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007094:	7fbb      	ldrb	r3, [r7, #30]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40007c00 	.word	0x40007c00
 80070a4:	40023800 	.word	0x40023800
 80070a8:	00f42400 	.word	0x00f42400

080070ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071aa:	d10a      	bne.n	80071c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007200:	f7fb fcee 	bl	8002be0 <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10e      	bne.n	8007232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f817 	bl	8007256 <UART_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e00d      	b.n	800724e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2220      	movs	r2, #32
 8007236:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b09c      	sub	sp, #112	; 0x70
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007266:	e0a5      	b.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	f000 80a1 	beq.w	80073b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007272:	f7fb fcb5 	bl	8002be0 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800727e:	429a      	cmp	r2, r3
 8007280:	d302      	bcc.n	8007288 <UART_WaitOnFlagUntilTimeout+0x32>
 8007282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007284:	2b00      	cmp	r3, #0
 8007286:	d13e      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800729c:	667b      	str	r3, [r7, #100]	; 0x64
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e6      	bne.n	8007288 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3308      	adds	r3, #8
 80072c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	663b      	str	r3, [r7, #96]	; 0x60
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3308      	adds	r3, #8
 80072d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072da:	64ba      	str	r2, [r7, #72]	; 0x48
 80072dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e5      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e067      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d04f      	beq.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007322:	d147      	bne.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800732c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
 800734e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007352:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e6      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3308      	adds	r3, #8
 8007366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	e853 3f00 	ldrex	r3, [r3]
 800736e:	613b      	str	r3, [r7, #16]
   return(result);
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	66bb      	str	r3, [r7, #104]	; 0x68
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007380:	623a      	str	r2, [r7, #32]
 8007382:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007384:	69f9      	ldr	r1, [r7, #28]
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	e841 2300 	strex	r3, r2, [r1]
 800738c:	61bb      	str	r3, [r7, #24]
   return(result);
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1e5      	bne.n	8007360 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2220      	movs	r2, #32
 800739e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e010      	b.n	80073d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	4013      	ands	r3, r2
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	461a      	mov	r2, r3
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	f43f af4a 	beq.w	8007268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3770      	adds	r7, #112	; 0x70
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b097      	sub	sp, #92	; 0x5c
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	88fa      	ldrh	r2, [r7, #6]
 80073f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	88fa      	ldrh	r2, [r7, #6]
 8007400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007412:	d10e      	bne.n	8007432 <UART_Start_Receive_IT+0x52>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d105      	bne.n	8007428 <UART_Start_Receive_IT+0x48>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007426:	e02d      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	22ff      	movs	r2, #255	; 0xff
 800742c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007430:	e028      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10d      	bne.n	8007456 <UART_Start_Receive_IT+0x76>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <UART_Start_Receive_IT+0x6c>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	22ff      	movs	r2, #255	; 0xff
 8007446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800744a:	e01b      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	227f      	movs	r2, #127	; 0x7f
 8007450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007454:	e016      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800745e:	d10d      	bne.n	800747c <UART_Start_Receive_IT+0x9c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <UART_Start_Receive_IT+0x92>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	227f      	movs	r2, #127	; 0x7f
 800746c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007470:	e008      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	223f      	movs	r2, #63	; 0x3f
 8007476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800747a:	e003      	b.n	8007484 <UART_Start_Receive_IT+0xa4>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2200      	movs	r2, #0
 8007480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2222      	movs	r2, #34	; 0x22
 8007490:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3308      	adds	r3, #8
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	657b      	str	r3, [r7, #84]	; 0x54
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3308      	adds	r3, #8
 80074b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80074b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80074b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ba:	e841 2300 	strex	r3, r2, [r1]
 80074be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1e5      	bne.n	8007492 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ce:	d107      	bne.n	80074e0 <UART_Start_Receive_IT+0x100>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4a24      	ldr	r2, [pc, #144]	; (800756c <UART_Start_Receive_IT+0x18c>)
 80074dc:	665a      	str	r2, [r3, #100]	; 0x64
 80074de:	e002      	b.n	80074e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4a23      	ldr	r2, [pc, #140]	; (8007570 <UART_Start_Receive_IT+0x190>)
 80074e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d019      	beq.n	800752a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fe:	e853 3f00 	ldrex	r3, [r3]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800750a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	637b      	str	r3, [r7, #52]	; 0x34
 8007516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800751a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800751c:	e841 2300 	strex	r3, r2, [r1]
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1e6      	bne.n	80074f6 <UART_Start_Receive_IT+0x116>
 8007528:	e018      	b.n	800755c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	613b      	str	r3, [r7, #16]
   return(result);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	f043 0320 	orr.w	r3, r3, #32
 800753e:	653b      	str	r3, [r7, #80]	; 0x50
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007548:	623b      	str	r3, [r7, #32]
 800754a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	69f9      	ldr	r1, [r7, #28]
 800754e:	6a3a      	ldr	r2, [r7, #32]
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	61bb      	str	r3, [r7, #24]
   return(result);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	375c      	adds	r7, #92	; 0x5c
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	08007817 	.word	0x08007817
 8007570:	080076bb 	.word	0x080076bb

08007574 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007574:	b480      	push	{r7}
 8007576:	b095      	sub	sp, #84	; 0x54
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
 800759c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e6      	bne.n	800757c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3308      	adds	r3, #8
 80075b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f023 0301 	bic.w	r3, r3, #1
 80075c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3308      	adds	r3, #8
 80075cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e5      	bne.n	80075ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d118      	bne.n	800761c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 0310 	bic.w	r3, r3, #16
 80075fe:	647b      	str	r3, [r7, #68]	; 0x44
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	6979      	ldr	r1, [r7, #20]
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	613b      	str	r3, [r7, #16]
   return(result);
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2220      	movs	r2, #32
 8007620:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800762e:	bf00      	nop
 8007630:	3754      	adds	r7, #84	; 0x54
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b084      	sub	sp, #16
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007646:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7ff faaf 	bl	8006bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765e:	bf00      	nop
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b088      	sub	sp, #32
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	60bb      	str	r3, [r7, #8]
   return(result);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	61bb      	str	r3, [r7, #24]
 800768e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6979      	ldr	r1, [r7, #20]
 8007692:	69ba      	ldr	r2, [r7, #24]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	613b      	str	r3, [r7, #16]
   return(result);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fa71 	bl	8006b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076b2:	bf00      	nop
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b096      	sub	sp, #88	; 0x58
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d0:	2b22      	cmp	r3, #34	; 0x22
 80076d2:	f040 8094 	bne.w	80077fe <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80076e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80076e4:	b2d9      	uxtb	r1, r3
 80076e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	400a      	ands	r2, r1
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	1c5a      	adds	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d177      	bne.n	800780e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007732:	653b      	str	r3, [r7, #80]	; 0x50
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	461a      	mov	r2, r3
 800773a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800773c:	647b      	str	r3, [r7, #68]	; 0x44
 800773e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007742:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800774a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e6      	bne.n	800771e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	e853 3f00 	ldrex	r3, [r3]
 800775e:	623b      	str	r3, [r7, #32]
   return(result);
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	f023 0301 	bic.w	r3, r3, #1
 8007766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3308      	adds	r3, #8
 800776e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007770:	633a      	str	r2, [r7, #48]	; 0x30
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007778:	e841 2300 	strex	r3, r2, [r1]
 800777c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e5      	bne.n	8007750 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007794:	2b01      	cmp	r3, #1
 8007796:	d12e      	bne.n	80077f6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	69b9      	ldr	r1, [r7, #24]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b10      	cmp	r3, #16
 80077dc:	d103      	bne.n	80077e6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2210      	movs	r2, #16
 80077e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff f9ee 	bl	8006bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077f4:	e00b      	b.n	800780e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff f9d6 	bl	8006ba8 <HAL_UART_RxCpltCallback>
}
 80077fc:	e007      	b.n	800780e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0208 	orr.w	r2, r2, #8
 800780c:	619a      	str	r2, [r3, #24]
}
 800780e:	bf00      	nop
 8007810:	3758      	adds	r7, #88	; 0x58
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b096      	sub	sp, #88	; 0x58
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007824:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800782c:	2b22      	cmp	r3, #34	; 0x22
 800782e:	f040 8094 	bne.w	800795a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007842:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007846:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800784a:	4013      	ands	r3, r2
 800784c:	b29a      	uxth	r2, r3
 800784e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007862:	b29b      	uxth	r3, r3
 8007864:	3b01      	subs	r3, #1
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d177      	bne.n	800796a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	e853 3f00 	ldrex	r3, [r3]
 8007886:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800788e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	461a      	mov	r2, r3
 8007896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007898:	643b      	str	r3, [r7, #64]	; 0x40
 800789a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800789e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80078a0:	e841 2300 	strex	r3, r2, [r1]
 80078a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1e6      	bne.n	800787a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e5      	bne.n	80078ac <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d12e      	bne.n	8007952 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	60bb      	str	r3, [r7, #8]
   return(result);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f023 0310 	bic.w	r3, r3, #16
 800790e:	647b      	str	r3, [r7, #68]	; 0x44
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	6979      	ldr	r1, [r7, #20]
 800791e:	69ba      	ldr	r2, [r7, #24]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	613b      	str	r3, [r7, #16]
   return(result);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e6      	bne.n	80078fa <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b10      	cmp	r3, #16
 8007938:	d103      	bne.n	8007942 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2210      	movs	r2, #16
 8007940:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff f940 	bl	8006bd0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007950:	e00b      	b.n	800796a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff f928 	bl	8006ba8 <HAL_UART_RxCpltCallback>
}
 8007958:	e007      	b.n	800796a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	699a      	ldr	r2, [r3, #24]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0208 	orr.w	r2, r2, #8
 8007968:	619a      	str	r2, [r3, #24]
}
 800796a:	bf00      	nop
 800796c:	3758      	adds	r7, #88	; 0x58
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <__errno>:
 8007974:	4b01      	ldr	r3, [pc, #4]	; (800797c <__errno+0x8>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000014 	.word	0x20000014

08007980 <__libc_init_array>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4d0d      	ldr	r5, [pc, #52]	; (80079b8 <__libc_init_array+0x38>)
 8007984:	4c0d      	ldr	r4, [pc, #52]	; (80079bc <__libc_init_array+0x3c>)
 8007986:	1b64      	subs	r4, r4, r5
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	2600      	movs	r6, #0
 800798c:	42a6      	cmp	r6, r4
 800798e:	d109      	bne.n	80079a4 <__libc_init_array+0x24>
 8007990:	4d0b      	ldr	r5, [pc, #44]	; (80079c0 <__libc_init_array+0x40>)
 8007992:	4c0c      	ldr	r4, [pc, #48]	; (80079c4 <__libc_init_array+0x44>)
 8007994:	f004 fc44 	bl	800c220 <_init>
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	2600      	movs	r6, #0
 800799e:	42a6      	cmp	r6, r4
 80079a0:	d105      	bne.n	80079ae <__libc_init_array+0x2e>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a8:	4798      	blx	r3
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7ee      	b.n	800798c <__libc_init_array+0xc>
 80079ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b2:	4798      	blx	r3
 80079b4:	3601      	adds	r6, #1
 80079b6:	e7f2      	b.n	800799e <__libc_init_array+0x1e>
 80079b8:	0800c714 	.word	0x0800c714
 80079bc:	0800c714 	.word	0x0800c714
 80079c0:	0800c714 	.word	0x0800c714
 80079c4:	0800c718 	.word	0x0800c718

080079c8 <memset>:
 80079c8:	4402      	add	r2, r0
 80079ca:	4603      	mov	r3, r0
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d100      	bne.n	80079d2 <memset+0xa>
 80079d0:	4770      	bx	lr
 80079d2:	f803 1b01 	strb.w	r1, [r3], #1
 80079d6:	e7f9      	b.n	80079cc <memset+0x4>

080079d8 <__cvt>:
 80079d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079dc:	ec55 4b10 	vmov	r4, r5, d0
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	460e      	mov	r6, r1
 80079e4:	4619      	mov	r1, r3
 80079e6:	462b      	mov	r3, r5
 80079e8:	bfbb      	ittet	lt
 80079ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079ee:	461d      	movlt	r5, r3
 80079f0:	2300      	movge	r3, #0
 80079f2:	232d      	movlt	r3, #45	; 0x2d
 80079f4:	700b      	strb	r3, [r1, #0]
 80079f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079fc:	4691      	mov	r9, r2
 80079fe:	f023 0820 	bic.w	r8, r3, #32
 8007a02:	bfbc      	itt	lt
 8007a04:	4622      	movlt	r2, r4
 8007a06:	4614      	movlt	r4, r2
 8007a08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a0c:	d005      	beq.n	8007a1a <__cvt+0x42>
 8007a0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a12:	d100      	bne.n	8007a16 <__cvt+0x3e>
 8007a14:	3601      	adds	r6, #1
 8007a16:	2102      	movs	r1, #2
 8007a18:	e000      	b.n	8007a1c <__cvt+0x44>
 8007a1a:	2103      	movs	r1, #3
 8007a1c:	ab03      	add	r3, sp, #12
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	ab02      	add	r3, sp, #8
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	ec45 4b10 	vmov	d0, r4, r5
 8007a28:	4653      	mov	r3, sl
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	f001 fdb4 	bl	8009598 <_dtoa_r>
 8007a30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a34:	4607      	mov	r7, r0
 8007a36:	d102      	bne.n	8007a3e <__cvt+0x66>
 8007a38:	f019 0f01 	tst.w	r9, #1
 8007a3c:	d022      	beq.n	8007a84 <__cvt+0xac>
 8007a3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a42:	eb07 0906 	add.w	r9, r7, r6
 8007a46:	d110      	bne.n	8007a6a <__cvt+0x92>
 8007a48:	783b      	ldrb	r3, [r7, #0]
 8007a4a:	2b30      	cmp	r3, #48	; 0x30
 8007a4c:	d10a      	bne.n	8007a64 <__cvt+0x8c>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	2300      	movs	r3, #0
 8007a52:	4620      	mov	r0, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	f7f9 f857 	bl	8000b08 <__aeabi_dcmpeq>
 8007a5a:	b918      	cbnz	r0, 8007a64 <__cvt+0x8c>
 8007a5c:	f1c6 0601 	rsb	r6, r6, #1
 8007a60:	f8ca 6000 	str.w	r6, [sl]
 8007a64:	f8da 3000 	ldr.w	r3, [sl]
 8007a68:	4499      	add	r9, r3
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	f7f9 f849 	bl	8000b08 <__aeabi_dcmpeq>
 8007a76:	b108      	cbz	r0, 8007a7c <__cvt+0xa4>
 8007a78:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a7c:	2230      	movs	r2, #48	; 0x30
 8007a7e:	9b03      	ldr	r3, [sp, #12]
 8007a80:	454b      	cmp	r3, r9
 8007a82:	d307      	bcc.n	8007a94 <__cvt+0xbc>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a88:	1bdb      	subs	r3, r3, r7
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	b004      	add	sp, #16
 8007a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a94:	1c59      	adds	r1, r3, #1
 8007a96:	9103      	str	r1, [sp, #12]
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e7f0      	b.n	8007a7e <__cvt+0xa6>

08007a9c <__exponent>:
 8007a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	bfb8      	it	lt
 8007aa4:	4249      	neglt	r1, r1
 8007aa6:	f803 2b02 	strb.w	r2, [r3], #2
 8007aaa:	bfb4      	ite	lt
 8007aac:	222d      	movlt	r2, #45	; 0x2d
 8007aae:	222b      	movge	r2, #43	; 0x2b
 8007ab0:	2909      	cmp	r1, #9
 8007ab2:	7042      	strb	r2, [r0, #1]
 8007ab4:	dd2a      	ble.n	8007b0c <__exponent+0x70>
 8007ab6:	f10d 0407 	add.w	r4, sp, #7
 8007aba:	46a4      	mov	ip, r4
 8007abc:	270a      	movs	r7, #10
 8007abe:	46a6      	mov	lr, r4
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ac6:	fb07 1516 	mls	r5, r7, r6, r1
 8007aca:	3530      	adds	r5, #48	; 0x30
 8007acc:	2a63      	cmp	r2, #99	; 0x63
 8007ace:	f104 34ff 	add.w	r4, r4, #4294967295
 8007ad2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	dcf1      	bgt.n	8007abe <__exponent+0x22>
 8007ada:	3130      	adds	r1, #48	; 0x30
 8007adc:	f1ae 0502 	sub.w	r5, lr, #2
 8007ae0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ae4:	1c44      	adds	r4, r0, #1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4561      	cmp	r1, ip
 8007aea:	d30a      	bcc.n	8007b02 <__exponent+0x66>
 8007aec:	f10d 0209 	add.w	r2, sp, #9
 8007af0:	eba2 020e 	sub.w	r2, r2, lr
 8007af4:	4565      	cmp	r5, ip
 8007af6:	bf88      	it	hi
 8007af8:	2200      	movhi	r2, #0
 8007afa:	4413      	add	r3, r2
 8007afc:	1a18      	subs	r0, r3, r0
 8007afe:	b003      	add	sp, #12
 8007b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007b0a:	e7ed      	b.n	8007ae8 <__exponent+0x4c>
 8007b0c:	2330      	movs	r3, #48	; 0x30
 8007b0e:	3130      	adds	r1, #48	; 0x30
 8007b10:	7083      	strb	r3, [r0, #2]
 8007b12:	70c1      	strb	r1, [r0, #3]
 8007b14:	1d03      	adds	r3, r0, #4
 8007b16:	e7f1      	b.n	8007afc <__exponent+0x60>

08007b18 <_printf_float>:
 8007b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1c:	ed2d 8b02 	vpush	{d8}
 8007b20:	b08d      	sub	sp, #52	; 0x34
 8007b22:	460c      	mov	r4, r1
 8007b24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b28:	4616      	mov	r6, r2
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	f002 fe8f 	bl	800a850 <_localeconv_r>
 8007b32:	f8d0 a000 	ldr.w	sl, [r0]
 8007b36:	4650      	mov	r0, sl
 8007b38:	f7f8 fb6a 	bl	8000210 <strlen>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b40:	6823      	ldr	r3, [r4, #0]
 8007b42:	9305      	str	r3, [sp, #20]
 8007b44:	f8d8 3000 	ldr.w	r3, [r8]
 8007b48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b4c:	3307      	adds	r3, #7
 8007b4e:	f023 0307 	bic.w	r3, r3, #7
 8007b52:	f103 0208 	add.w	r2, r3, #8
 8007b56:	f8c8 2000 	str.w	r2, [r8]
 8007b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b6a:	9307      	str	r3, [sp, #28]
 8007b6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b70:	ee08 0a10 	vmov	s16, r0
 8007b74:	4b9f      	ldr	r3, [pc, #636]	; (8007df4 <_printf_float+0x2dc>)
 8007b76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b7e:	f7f8 fff5 	bl	8000b6c <__aeabi_dcmpun>
 8007b82:	bb88      	cbnz	r0, 8007be8 <_printf_float+0xd0>
 8007b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b88:	4b9a      	ldr	r3, [pc, #616]	; (8007df4 <_printf_float+0x2dc>)
 8007b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b8e:	f7f8 ffcf 	bl	8000b30 <__aeabi_dcmple>
 8007b92:	bb48      	cbnz	r0, 8007be8 <_printf_float+0xd0>
 8007b94:	2200      	movs	r2, #0
 8007b96:	2300      	movs	r3, #0
 8007b98:	4640      	mov	r0, r8
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	f7f8 ffbe 	bl	8000b1c <__aeabi_dcmplt>
 8007ba0:	b110      	cbz	r0, 8007ba8 <_printf_float+0x90>
 8007ba2:	232d      	movs	r3, #45	; 0x2d
 8007ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba8:	4b93      	ldr	r3, [pc, #588]	; (8007df8 <_printf_float+0x2e0>)
 8007baa:	4894      	ldr	r0, [pc, #592]	; (8007dfc <_printf_float+0x2e4>)
 8007bac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007bb0:	bf94      	ite	ls
 8007bb2:	4698      	movls	r8, r3
 8007bb4:	4680      	movhi	r8, r0
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	6123      	str	r3, [r4, #16]
 8007bba:	9b05      	ldr	r3, [sp, #20]
 8007bbc:	f023 0204 	bic.w	r2, r3, #4
 8007bc0:	6022      	str	r2, [r4, #0]
 8007bc2:	f04f 0900 	mov.w	r9, #0
 8007bc6:	9700      	str	r7, [sp, #0]
 8007bc8:	4633      	mov	r3, r6
 8007bca:	aa0b      	add	r2, sp, #44	; 0x2c
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 f9d8 	bl	8007f84 <_printf_common>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	f040 8090 	bne.w	8007cfa <_printf_float+0x1e2>
 8007bda:	f04f 30ff 	mov.w	r0, #4294967295
 8007bde:	b00d      	add	sp, #52	; 0x34
 8007be0:	ecbd 8b02 	vpop	{d8}
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 ffbc 	bl	8000b6c <__aeabi_dcmpun>
 8007bf4:	b140      	cbz	r0, 8007c08 <_printf_float+0xf0>
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfbc      	itt	lt
 8007bfc:	232d      	movlt	r3, #45	; 0x2d
 8007bfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c02:	487f      	ldr	r0, [pc, #508]	; (8007e00 <_printf_float+0x2e8>)
 8007c04:	4b7f      	ldr	r3, [pc, #508]	; (8007e04 <_printf_float+0x2ec>)
 8007c06:	e7d1      	b.n	8007bac <_printf_float+0x94>
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c0e:	9206      	str	r2, [sp, #24]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	d13f      	bne.n	8007c94 <_printf_float+0x17c>
 8007c14:	2306      	movs	r3, #6
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	9b05      	ldr	r3, [sp, #20]
 8007c1a:	6861      	ldr	r1, [r4, #4]
 8007c1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c20:	2300      	movs	r3, #0
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	ab0a      	add	r3, sp, #40	; 0x28
 8007c26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c2a:	ab09      	add	r3, sp, #36	; 0x24
 8007c2c:	ec49 8b10 	vmov	d0, r8, r9
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	6022      	str	r2, [r4, #0]
 8007c34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f7ff fecd 	bl	80079d8 <__cvt>
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c42:	2b47      	cmp	r3, #71	; 0x47
 8007c44:	4680      	mov	r8, r0
 8007c46:	d108      	bne.n	8007c5a <_printf_float+0x142>
 8007c48:	1cc8      	adds	r0, r1, #3
 8007c4a:	db02      	blt.n	8007c52 <_printf_float+0x13a>
 8007c4c:	6863      	ldr	r3, [r4, #4]
 8007c4e:	4299      	cmp	r1, r3
 8007c50:	dd41      	ble.n	8007cd6 <_printf_float+0x1be>
 8007c52:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c56:	fa5f fb8b 	uxtb.w	fp, fp
 8007c5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c5e:	d820      	bhi.n	8007ca2 <_printf_float+0x18a>
 8007c60:	3901      	subs	r1, #1
 8007c62:	465a      	mov	r2, fp
 8007c64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c68:	9109      	str	r1, [sp, #36]	; 0x24
 8007c6a:	f7ff ff17 	bl	8007a9c <__exponent>
 8007c6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c70:	1813      	adds	r3, r2, r0
 8007c72:	2a01      	cmp	r2, #1
 8007c74:	4681      	mov	r9, r0
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	dc02      	bgt.n	8007c80 <_printf_float+0x168>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	07d2      	lsls	r2, r2, #31
 8007c7e:	d501      	bpl.n	8007c84 <_printf_float+0x16c>
 8007c80:	3301      	adds	r3, #1
 8007c82:	6123      	str	r3, [r4, #16]
 8007c84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d09c      	beq.n	8007bc6 <_printf_float+0xae>
 8007c8c:	232d      	movs	r3, #45	; 0x2d
 8007c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c92:	e798      	b.n	8007bc6 <_printf_float+0xae>
 8007c94:	9a06      	ldr	r2, [sp, #24]
 8007c96:	2a47      	cmp	r2, #71	; 0x47
 8007c98:	d1be      	bne.n	8007c18 <_printf_float+0x100>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1bc      	bne.n	8007c18 <_printf_float+0x100>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e7b9      	b.n	8007c16 <_printf_float+0xfe>
 8007ca2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ca6:	d118      	bne.n	8007cda <_printf_float+0x1c2>
 8007ca8:	2900      	cmp	r1, #0
 8007caa:	6863      	ldr	r3, [r4, #4]
 8007cac:	dd0b      	ble.n	8007cc6 <_printf_float+0x1ae>
 8007cae:	6121      	str	r1, [r4, #16]
 8007cb0:	b913      	cbnz	r3, 8007cb8 <_printf_float+0x1a0>
 8007cb2:	6822      	ldr	r2, [r4, #0]
 8007cb4:	07d0      	lsls	r0, r2, #31
 8007cb6:	d502      	bpl.n	8007cbe <_printf_float+0x1a6>
 8007cb8:	3301      	adds	r3, #1
 8007cba:	440b      	add	r3, r1
 8007cbc:	6123      	str	r3, [r4, #16]
 8007cbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cc0:	f04f 0900 	mov.w	r9, #0
 8007cc4:	e7de      	b.n	8007c84 <_printf_float+0x16c>
 8007cc6:	b913      	cbnz	r3, 8007cce <_printf_float+0x1b6>
 8007cc8:	6822      	ldr	r2, [r4, #0]
 8007cca:	07d2      	lsls	r2, r2, #31
 8007ccc:	d501      	bpl.n	8007cd2 <_printf_float+0x1ba>
 8007cce:	3302      	adds	r3, #2
 8007cd0:	e7f4      	b.n	8007cbc <_printf_float+0x1a4>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e7f2      	b.n	8007cbc <_printf_float+0x1a4>
 8007cd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	db05      	blt.n	8007cec <_printf_float+0x1d4>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	6121      	str	r1, [r4, #16]
 8007ce4:	07d8      	lsls	r0, r3, #31
 8007ce6:	d5ea      	bpl.n	8007cbe <_printf_float+0x1a6>
 8007ce8:	1c4b      	adds	r3, r1, #1
 8007cea:	e7e7      	b.n	8007cbc <_printf_float+0x1a4>
 8007cec:	2900      	cmp	r1, #0
 8007cee:	bfd4      	ite	le
 8007cf0:	f1c1 0202 	rsble	r2, r1, #2
 8007cf4:	2201      	movgt	r2, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	e7e0      	b.n	8007cbc <_printf_float+0x1a4>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	055a      	lsls	r2, r3, #21
 8007cfe:	d407      	bmi.n	8007d10 <_printf_float+0x1f8>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	4642      	mov	r2, r8
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b8      	blx	r7
 8007d0a:	3001      	adds	r0, #1
 8007d0c:	d12c      	bne.n	8007d68 <_printf_float+0x250>
 8007d0e:	e764      	b.n	8007bda <_printf_float+0xc2>
 8007d10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d14:	f240 80e0 	bls.w	8007ed8 <_printf_float+0x3c0>
 8007d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f7f8 fef2 	bl	8000b08 <__aeabi_dcmpeq>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d034      	beq.n	8007d92 <_printf_float+0x27a>
 8007d28:	4a37      	ldr	r2, [pc, #220]	; (8007e08 <_printf_float+0x2f0>)
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	47b8      	blx	r7
 8007d32:	3001      	adds	r0, #1
 8007d34:	f43f af51 	beq.w	8007bda <_printf_float+0xc2>
 8007d38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	db02      	blt.n	8007d46 <_printf_float+0x22e>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	07d8      	lsls	r0, r3, #31
 8007d44:	d510      	bpl.n	8007d68 <_printf_float+0x250>
 8007d46:	ee18 3a10 	vmov	r3, s16
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f af41 	beq.w	8007bda <_printf_float+0xc2>
 8007d58:	f04f 0800 	mov.w	r8, #0
 8007d5c:	f104 091a 	add.w	r9, r4, #26
 8007d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d62:	3b01      	subs	r3, #1
 8007d64:	4543      	cmp	r3, r8
 8007d66:	dc09      	bgt.n	8007d7c <_printf_float+0x264>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	f100 8105 	bmi.w	8007f7a <_printf_float+0x462>
 8007d70:	68e0      	ldr	r0, [r4, #12]
 8007d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d74:	4298      	cmp	r0, r3
 8007d76:	bfb8      	it	lt
 8007d78:	4618      	movlt	r0, r3
 8007d7a:	e730      	b.n	8007bde <_printf_float+0xc6>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	464a      	mov	r2, r9
 8007d80:	4631      	mov	r1, r6
 8007d82:	4628      	mov	r0, r5
 8007d84:	47b8      	blx	r7
 8007d86:	3001      	adds	r0, #1
 8007d88:	f43f af27 	beq.w	8007bda <_printf_float+0xc2>
 8007d8c:	f108 0801 	add.w	r8, r8, #1
 8007d90:	e7e6      	b.n	8007d60 <_printf_float+0x248>
 8007d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dc39      	bgt.n	8007e0c <_printf_float+0x2f4>
 8007d98:	4a1b      	ldr	r2, [pc, #108]	; (8007e08 <_printf_float+0x2f0>)
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af19 	beq.w	8007bda <_printf_float+0xc2>
 8007da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dac:	4313      	orrs	r3, r2
 8007dae:	d102      	bne.n	8007db6 <_printf_float+0x29e>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	07d9      	lsls	r1, r3, #31
 8007db4:	d5d8      	bpl.n	8007d68 <_printf_float+0x250>
 8007db6:	ee18 3a10 	vmov	r3, s16
 8007dba:	4652      	mov	r2, sl
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	f43f af09 	beq.w	8007bda <_printf_float+0xc2>
 8007dc8:	f04f 0900 	mov.w	r9, #0
 8007dcc:	f104 0a1a 	add.w	sl, r4, #26
 8007dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd2:	425b      	negs	r3, r3
 8007dd4:	454b      	cmp	r3, r9
 8007dd6:	dc01      	bgt.n	8007ddc <_printf_float+0x2c4>
 8007dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dda:	e792      	b.n	8007d02 <_printf_float+0x1ea>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	4652      	mov	r2, sl
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f aef7 	beq.w	8007bda <_printf_float+0xc2>
 8007dec:	f109 0901 	add.w	r9, r9, #1
 8007df0:	e7ee      	b.n	8007dd0 <_printf_float+0x2b8>
 8007df2:	bf00      	nop
 8007df4:	7fefffff 	.word	0x7fefffff
 8007df8:	0800c25c 	.word	0x0800c25c
 8007dfc:	0800c260 	.word	0x0800c260
 8007e00:	0800c268 	.word	0x0800c268
 8007e04:	0800c264 	.word	0x0800c264
 8007e08:	0800c26c 	.word	0x0800c26c
 8007e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e10:	429a      	cmp	r2, r3
 8007e12:	bfa8      	it	ge
 8007e14:	461a      	movge	r2, r3
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	4691      	mov	r9, r2
 8007e1a:	dc37      	bgt.n	8007e8c <_printf_float+0x374>
 8007e1c:	f04f 0b00 	mov.w	fp, #0
 8007e20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e24:	f104 021a 	add.w	r2, r4, #26
 8007e28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e2a:	9305      	str	r3, [sp, #20]
 8007e2c:	eba3 0309 	sub.w	r3, r3, r9
 8007e30:	455b      	cmp	r3, fp
 8007e32:	dc33      	bgt.n	8007e9c <_printf_float+0x384>
 8007e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	db3b      	blt.n	8007eb4 <_printf_float+0x39c>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07da      	lsls	r2, r3, #31
 8007e40:	d438      	bmi.n	8007eb4 <_printf_float+0x39c>
 8007e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	eba2 0901 	sub.w	r9, r2, r1
 8007e4e:	4599      	cmp	r9, r3
 8007e50:	bfa8      	it	ge
 8007e52:	4699      	movge	r9, r3
 8007e54:	f1b9 0f00 	cmp.w	r9, #0
 8007e58:	dc35      	bgt.n	8007ec6 <_printf_float+0x3ae>
 8007e5a:	f04f 0800 	mov.w	r8, #0
 8007e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e62:	f104 0a1a 	add.w	sl, r4, #26
 8007e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	eba3 0309 	sub.w	r3, r3, r9
 8007e70:	4543      	cmp	r3, r8
 8007e72:	f77f af79 	ble.w	8007d68 <_printf_float+0x250>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	f43f aeaa 	beq.w	8007bda <_printf_float+0xc2>
 8007e86:	f108 0801 	add.w	r8, r8, #1
 8007e8a:	e7ec      	b.n	8007e66 <_printf_float+0x34e>
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4642      	mov	r2, r8
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	d1c0      	bne.n	8007e1c <_printf_float+0x304>
 8007e9a:	e69e      	b.n	8007bda <_printf_float+0xc2>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	9205      	str	r2, [sp, #20]
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f ae97 	beq.w	8007bda <_printf_float+0xc2>
 8007eac:	9a05      	ldr	r2, [sp, #20]
 8007eae:	f10b 0b01 	add.w	fp, fp, #1
 8007eb2:	e7b9      	b.n	8007e28 <_printf_float+0x310>
 8007eb4:	ee18 3a10 	vmov	r3, s16
 8007eb8:	4652      	mov	r2, sl
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	d1be      	bne.n	8007e42 <_printf_float+0x32a>
 8007ec4:	e689      	b.n	8007bda <_printf_float+0xc2>
 8007ec6:	9a05      	ldr	r2, [sp, #20]
 8007ec8:	464b      	mov	r3, r9
 8007eca:	4442      	add	r2, r8
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d1c1      	bne.n	8007e5a <_printf_float+0x342>
 8007ed6:	e680      	b.n	8007bda <_printf_float+0xc2>
 8007ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eda:	2a01      	cmp	r2, #1
 8007edc:	dc01      	bgt.n	8007ee2 <_printf_float+0x3ca>
 8007ede:	07db      	lsls	r3, r3, #31
 8007ee0:	d538      	bpl.n	8007f54 <_printf_float+0x43c>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4642      	mov	r2, r8
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	4628      	mov	r0, r5
 8007eea:	47b8      	blx	r7
 8007eec:	3001      	adds	r0, #1
 8007eee:	f43f ae74 	beq.w	8007bda <_printf_float+0xc2>
 8007ef2:	ee18 3a10 	vmov	r3, s16
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f ae6b 	beq.w	8007bda <_printf_float+0xc2>
 8007f04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f7f8 fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 8007f10:	b9d8      	cbnz	r0, 8007f4a <_printf_float+0x432>
 8007f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f14:	f108 0201 	add.w	r2, r8, #1
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	d10e      	bne.n	8007f42 <_printf_float+0x42a>
 8007f24:	e659      	b.n	8007bda <_printf_float+0xc2>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4652      	mov	r2, sl
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f ae52 	beq.w	8007bda <_printf_float+0xc2>
 8007f36:	f108 0801 	add.w	r8, r8, #1
 8007f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	4543      	cmp	r3, r8
 8007f40:	dcf1      	bgt.n	8007f26 <_printf_float+0x40e>
 8007f42:	464b      	mov	r3, r9
 8007f44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f48:	e6dc      	b.n	8007d04 <_printf_float+0x1ec>
 8007f4a:	f04f 0800 	mov.w	r8, #0
 8007f4e:	f104 0a1a 	add.w	sl, r4, #26
 8007f52:	e7f2      	b.n	8007f3a <_printf_float+0x422>
 8007f54:	2301      	movs	r3, #1
 8007f56:	4642      	mov	r2, r8
 8007f58:	e7df      	b.n	8007f1a <_printf_float+0x402>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	464a      	mov	r2, r9
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4628      	mov	r0, r5
 8007f62:	47b8      	blx	r7
 8007f64:	3001      	adds	r0, #1
 8007f66:	f43f ae38 	beq.w	8007bda <_printf_float+0xc2>
 8007f6a:	f108 0801 	add.w	r8, r8, #1
 8007f6e:	68e3      	ldr	r3, [r4, #12]
 8007f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	4543      	cmp	r3, r8
 8007f76:	dcf0      	bgt.n	8007f5a <_printf_float+0x442>
 8007f78:	e6fa      	b.n	8007d70 <_printf_float+0x258>
 8007f7a:	f04f 0800 	mov.w	r8, #0
 8007f7e:	f104 0919 	add.w	r9, r4, #25
 8007f82:	e7f4      	b.n	8007f6e <_printf_float+0x456>

08007f84 <_printf_common>:
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	4616      	mov	r6, r2
 8007f8a:	4699      	mov	r9, r3
 8007f8c:	688a      	ldr	r2, [r1, #8]
 8007f8e:	690b      	ldr	r3, [r1, #16]
 8007f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bfb8      	it	lt
 8007f98:	4613      	movlt	r3, r2
 8007f9a:	6033      	str	r3, [r6, #0]
 8007f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b10a      	cbz	r2, 8007faa <_printf_common+0x26>
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	0699      	lsls	r1, r3, #26
 8007fae:	bf42      	ittt	mi
 8007fb0:	6833      	ldrmi	r3, [r6, #0]
 8007fb2:	3302      	addmi	r3, #2
 8007fb4:	6033      	strmi	r3, [r6, #0]
 8007fb6:	6825      	ldr	r5, [r4, #0]
 8007fb8:	f015 0506 	ands.w	r5, r5, #6
 8007fbc:	d106      	bne.n	8007fcc <_printf_common+0x48>
 8007fbe:	f104 0a19 	add.w	sl, r4, #25
 8007fc2:	68e3      	ldr	r3, [r4, #12]
 8007fc4:	6832      	ldr	r2, [r6, #0]
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	dc26      	bgt.n	800801a <_printf_common+0x96>
 8007fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd0:	1e13      	subs	r3, r2, #0
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	bf18      	it	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	0692      	lsls	r2, r2, #26
 8007fda:	d42b      	bmi.n	8008034 <_printf_common+0xb0>
 8007fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c0      	blx	r8
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d01e      	beq.n	8008028 <_printf_common+0xa4>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	68e5      	ldr	r5, [r4, #12]
 8007fee:	6832      	ldr	r2, [r6, #0]
 8007ff0:	f003 0306 	and.w	r3, r3, #6
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	bf08      	it	eq
 8007ff8:	1aad      	subeq	r5, r5, r2
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	6922      	ldr	r2, [r4, #16]
 8007ffe:	bf0c      	ite	eq
 8008000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008004:	2500      	movne	r5, #0
 8008006:	4293      	cmp	r3, r2
 8008008:	bfc4      	itt	gt
 800800a:	1a9b      	subgt	r3, r3, r2
 800800c:	18ed      	addgt	r5, r5, r3
 800800e:	2600      	movs	r6, #0
 8008010:	341a      	adds	r4, #26
 8008012:	42b5      	cmp	r5, r6
 8008014:	d11a      	bne.n	800804c <_printf_common+0xc8>
 8008016:	2000      	movs	r0, #0
 8008018:	e008      	b.n	800802c <_printf_common+0xa8>
 800801a:	2301      	movs	r3, #1
 800801c:	4652      	mov	r2, sl
 800801e:	4649      	mov	r1, r9
 8008020:	4638      	mov	r0, r7
 8008022:	47c0      	blx	r8
 8008024:	3001      	adds	r0, #1
 8008026:	d103      	bne.n	8008030 <_printf_common+0xac>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008030:	3501      	adds	r5, #1
 8008032:	e7c6      	b.n	8007fc2 <_printf_common+0x3e>
 8008034:	18e1      	adds	r1, r4, r3
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	2030      	movs	r0, #48	; 0x30
 800803a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800803e:	4422      	add	r2, r4
 8008040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008048:	3302      	adds	r3, #2
 800804a:	e7c7      	b.n	8007fdc <_printf_common+0x58>
 800804c:	2301      	movs	r3, #1
 800804e:	4622      	mov	r2, r4
 8008050:	4649      	mov	r1, r9
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	3001      	adds	r0, #1
 8008058:	d0e6      	beq.n	8008028 <_printf_common+0xa4>
 800805a:	3601      	adds	r6, #1
 800805c:	e7d9      	b.n	8008012 <_printf_common+0x8e>
	...

08008060 <_printf_i>:
 8008060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	460c      	mov	r4, r1
 8008066:	4691      	mov	r9, r2
 8008068:	7e27      	ldrb	r7, [r4, #24]
 800806a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800806c:	2f78      	cmp	r7, #120	; 0x78
 800806e:	4680      	mov	r8, r0
 8008070:	469a      	mov	sl, r3
 8008072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008076:	d807      	bhi.n	8008088 <_printf_i+0x28>
 8008078:	2f62      	cmp	r7, #98	; 0x62
 800807a:	d80a      	bhi.n	8008092 <_printf_i+0x32>
 800807c:	2f00      	cmp	r7, #0
 800807e:	f000 80d8 	beq.w	8008232 <_printf_i+0x1d2>
 8008082:	2f58      	cmp	r7, #88	; 0x58
 8008084:	f000 80a3 	beq.w	80081ce <_printf_i+0x16e>
 8008088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800808c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008090:	e03a      	b.n	8008108 <_printf_i+0xa8>
 8008092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008096:	2b15      	cmp	r3, #21
 8008098:	d8f6      	bhi.n	8008088 <_printf_i+0x28>
 800809a:	a001      	add	r0, pc, #4	; (adr r0, 80080a0 <_printf_i+0x40>)
 800809c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	0800810d 	.word	0x0800810d
 80080a8:	08008089 	.word	0x08008089
 80080ac:	08008089 	.word	0x08008089
 80080b0:	08008089 	.word	0x08008089
 80080b4:	08008089 	.word	0x08008089
 80080b8:	0800810d 	.word	0x0800810d
 80080bc:	08008089 	.word	0x08008089
 80080c0:	08008089 	.word	0x08008089
 80080c4:	08008089 	.word	0x08008089
 80080c8:	08008089 	.word	0x08008089
 80080cc:	08008219 	.word	0x08008219
 80080d0:	0800813d 	.word	0x0800813d
 80080d4:	080081fb 	.word	0x080081fb
 80080d8:	08008089 	.word	0x08008089
 80080dc:	08008089 	.word	0x08008089
 80080e0:	0800823b 	.word	0x0800823b
 80080e4:	08008089 	.word	0x08008089
 80080e8:	0800813d 	.word	0x0800813d
 80080ec:	08008089 	.word	0x08008089
 80080f0:	08008089 	.word	0x08008089
 80080f4:	08008203 	.word	0x08008203
 80080f8:	680b      	ldr	r3, [r1, #0]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	600a      	str	r2, [r1, #0]
 8008100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008108:	2301      	movs	r3, #1
 800810a:	e0a3      	b.n	8008254 <_printf_i+0x1f4>
 800810c:	6825      	ldr	r5, [r4, #0]
 800810e:	6808      	ldr	r0, [r1, #0]
 8008110:	062e      	lsls	r6, r5, #24
 8008112:	f100 0304 	add.w	r3, r0, #4
 8008116:	d50a      	bpl.n	800812e <_printf_i+0xce>
 8008118:	6805      	ldr	r5, [r0, #0]
 800811a:	600b      	str	r3, [r1, #0]
 800811c:	2d00      	cmp	r5, #0
 800811e:	da03      	bge.n	8008128 <_printf_i+0xc8>
 8008120:	232d      	movs	r3, #45	; 0x2d
 8008122:	426d      	negs	r5, r5
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008128:	485e      	ldr	r0, [pc, #376]	; (80082a4 <_printf_i+0x244>)
 800812a:	230a      	movs	r3, #10
 800812c:	e019      	b.n	8008162 <_printf_i+0x102>
 800812e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008132:	6805      	ldr	r5, [r0, #0]
 8008134:	600b      	str	r3, [r1, #0]
 8008136:	bf18      	it	ne
 8008138:	b22d      	sxthne	r5, r5
 800813a:	e7ef      	b.n	800811c <_printf_i+0xbc>
 800813c:	680b      	ldr	r3, [r1, #0]
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	1d18      	adds	r0, r3, #4
 8008142:	6008      	str	r0, [r1, #0]
 8008144:	0628      	lsls	r0, r5, #24
 8008146:	d501      	bpl.n	800814c <_printf_i+0xec>
 8008148:	681d      	ldr	r5, [r3, #0]
 800814a:	e002      	b.n	8008152 <_printf_i+0xf2>
 800814c:	0669      	lsls	r1, r5, #25
 800814e:	d5fb      	bpl.n	8008148 <_printf_i+0xe8>
 8008150:	881d      	ldrh	r5, [r3, #0]
 8008152:	4854      	ldr	r0, [pc, #336]	; (80082a4 <_printf_i+0x244>)
 8008154:	2f6f      	cmp	r7, #111	; 0x6f
 8008156:	bf0c      	ite	eq
 8008158:	2308      	moveq	r3, #8
 800815a:	230a      	movne	r3, #10
 800815c:	2100      	movs	r1, #0
 800815e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008162:	6866      	ldr	r6, [r4, #4]
 8008164:	60a6      	str	r6, [r4, #8]
 8008166:	2e00      	cmp	r6, #0
 8008168:	bfa2      	ittt	ge
 800816a:	6821      	ldrge	r1, [r4, #0]
 800816c:	f021 0104 	bicge.w	r1, r1, #4
 8008170:	6021      	strge	r1, [r4, #0]
 8008172:	b90d      	cbnz	r5, 8008178 <_printf_i+0x118>
 8008174:	2e00      	cmp	r6, #0
 8008176:	d04d      	beq.n	8008214 <_printf_i+0x1b4>
 8008178:	4616      	mov	r6, r2
 800817a:	fbb5 f1f3 	udiv	r1, r5, r3
 800817e:	fb03 5711 	mls	r7, r3, r1, r5
 8008182:	5dc7      	ldrb	r7, [r0, r7]
 8008184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008188:	462f      	mov	r7, r5
 800818a:	42bb      	cmp	r3, r7
 800818c:	460d      	mov	r5, r1
 800818e:	d9f4      	bls.n	800817a <_printf_i+0x11a>
 8008190:	2b08      	cmp	r3, #8
 8008192:	d10b      	bne.n	80081ac <_printf_i+0x14c>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	07df      	lsls	r7, r3, #31
 8008198:	d508      	bpl.n	80081ac <_printf_i+0x14c>
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	6861      	ldr	r1, [r4, #4]
 800819e:	4299      	cmp	r1, r3
 80081a0:	bfde      	ittt	le
 80081a2:	2330      	movle	r3, #48	; 0x30
 80081a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081ac:	1b92      	subs	r2, r2, r6
 80081ae:	6122      	str	r2, [r4, #16]
 80081b0:	f8cd a000 	str.w	sl, [sp]
 80081b4:	464b      	mov	r3, r9
 80081b6:	aa03      	add	r2, sp, #12
 80081b8:	4621      	mov	r1, r4
 80081ba:	4640      	mov	r0, r8
 80081bc:	f7ff fee2 	bl	8007f84 <_printf_common>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d14c      	bne.n	800825e <_printf_i+0x1fe>
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	b004      	add	sp, #16
 80081ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ce:	4835      	ldr	r0, [pc, #212]	; (80082a4 <_printf_i+0x244>)
 80081d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	680e      	ldr	r6, [r1, #0]
 80081d8:	061f      	lsls	r7, r3, #24
 80081da:	f856 5b04 	ldr.w	r5, [r6], #4
 80081de:	600e      	str	r6, [r1, #0]
 80081e0:	d514      	bpl.n	800820c <_printf_i+0x1ac>
 80081e2:	07d9      	lsls	r1, r3, #31
 80081e4:	bf44      	itt	mi
 80081e6:	f043 0320 	orrmi.w	r3, r3, #32
 80081ea:	6023      	strmi	r3, [r4, #0]
 80081ec:	b91d      	cbnz	r5, 80081f6 <_printf_i+0x196>
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	f023 0320 	bic.w	r3, r3, #32
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	2310      	movs	r3, #16
 80081f8:	e7b0      	b.n	800815c <_printf_i+0xfc>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	f043 0320 	orr.w	r3, r3, #32
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	2378      	movs	r3, #120	; 0x78
 8008204:	4828      	ldr	r0, [pc, #160]	; (80082a8 <_printf_i+0x248>)
 8008206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800820a:	e7e3      	b.n	80081d4 <_printf_i+0x174>
 800820c:	065e      	lsls	r6, r3, #25
 800820e:	bf48      	it	mi
 8008210:	b2ad      	uxthmi	r5, r5
 8008212:	e7e6      	b.n	80081e2 <_printf_i+0x182>
 8008214:	4616      	mov	r6, r2
 8008216:	e7bb      	b.n	8008190 <_printf_i+0x130>
 8008218:	680b      	ldr	r3, [r1, #0]
 800821a:	6826      	ldr	r6, [r4, #0]
 800821c:	6960      	ldr	r0, [r4, #20]
 800821e:	1d1d      	adds	r5, r3, #4
 8008220:	600d      	str	r5, [r1, #0]
 8008222:	0635      	lsls	r5, r6, #24
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	d501      	bpl.n	800822c <_printf_i+0x1cc>
 8008228:	6018      	str	r0, [r3, #0]
 800822a:	e002      	b.n	8008232 <_printf_i+0x1d2>
 800822c:	0671      	lsls	r1, r6, #25
 800822e:	d5fb      	bpl.n	8008228 <_printf_i+0x1c8>
 8008230:	8018      	strh	r0, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	4616      	mov	r6, r2
 8008238:	e7ba      	b.n	80081b0 <_printf_i+0x150>
 800823a:	680b      	ldr	r3, [r1, #0]
 800823c:	1d1a      	adds	r2, r3, #4
 800823e:	600a      	str	r2, [r1, #0]
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	2100      	movs	r1, #0
 8008246:	4630      	mov	r0, r6
 8008248:	f7f7 ffea 	bl	8000220 <memchr>
 800824c:	b108      	cbz	r0, 8008252 <_printf_i+0x1f2>
 800824e:	1b80      	subs	r0, r0, r6
 8008250:	6060      	str	r0, [r4, #4]
 8008252:	6863      	ldr	r3, [r4, #4]
 8008254:	6123      	str	r3, [r4, #16]
 8008256:	2300      	movs	r3, #0
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825c:	e7a8      	b.n	80081b0 <_printf_i+0x150>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	4632      	mov	r2, r6
 8008262:	4649      	mov	r1, r9
 8008264:	4640      	mov	r0, r8
 8008266:	47d0      	blx	sl
 8008268:	3001      	adds	r0, #1
 800826a:	d0ab      	beq.n	80081c4 <_printf_i+0x164>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	079b      	lsls	r3, r3, #30
 8008270:	d413      	bmi.n	800829a <_printf_i+0x23a>
 8008272:	68e0      	ldr	r0, [r4, #12]
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	4298      	cmp	r0, r3
 8008278:	bfb8      	it	lt
 800827a:	4618      	movlt	r0, r3
 800827c:	e7a4      	b.n	80081c8 <_printf_i+0x168>
 800827e:	2301      	movs	r3, #1
 8008280:	4632      	mov	r2, r6
 8008282:	4649      	mov	r1, r9
 8008284:	4640      	mov	r0, r8
 8008286:	47d0      	blx	sl
 8008288:	3001      	adds	r0, #1
 800828a:	d09b      	beq.n	80081c4 <_printf_i+0x164>
 800828c:	3501      	adds	r5, #1
 800828e:	68e3      	ldr	r3, [r4, #12]
 8008290:	9903      	ldr	r1, [sp, #12]
 8008292:	1a5b      	subs	r3, r3, r1
 8008294:	42ab      	cmp	r3, r5
 8008296:	dcf2      	bgt.n	800827e <_printf_i+0x21e>
 8008298:	e7eb      	b.n	8008272 <_printf_i+0x212>
 800829a:	2500      	movs	r5, #0
 800829c:	f104 0619 	add.w	r6, r4, #25
 80082a0:	e7f5      	b.n	800828e <_printf_i+0x22e>
 80082a2:	bf00      	nop
 80082a4:	0800c26e 	.word	0x0800c26e
 80082a8:	0800c27f 	.word	0x0800c27f

080082ac <_scanf_float>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	b087      	sub	sp, #28
 80082b2:	4617      	mov	r7, r2
 80082b4:	9303      	str	r3, [sp, #12]
 80082b6:	688b      	ldr	r3, [r1, #8]
 80082b8:	1e5a      	subs	r2, r3, #1
 80082ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80082be:	bf83      	ittte	hi
 80082c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80082c4:	195b      	addhi	r3, r3, r5
 80082c6:	9302      	strhi	r3, [sp, #8]
 80082c8:	2300      	movls	r3, #0
 80082ca:	bf86      	itte	hi
 80082cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082d0:	608b      	strhi	r3, [r1, #8]
 80082d2:	9302      	strls	r3, [sp, #8]
 80082d4:	680b      	ldr	r3, [r1, #0]
 80082d6:	468b      	mov	fp, r1
 80082d8:	2500      	movs	r5, #0
 80082da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082de:	f84b 3b1c 	str.w	r3, [fp], #28
 80082e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082e6:	4680      	mov	r8, r0
 80082e8:	460c      	mov	r4, r1
 80082ea:	465e      	mov	r6, fp
 80082ec:	46aa      	mov	sl, r5
 80082ee:	46a9      	mov	r9, r5
 80082f0:	9501      	str	r5, [sp, #4]
 80082f2:	68a2      	ldr	r2, [r4, #8]
 80082f4:	b152      	cbz	r2, 800830c <_scanf_float+0x60>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b4e      	cmp	r3, #78	; 0x4e
 80082fc:	d864      	bhi.n	80083c8 <_scanf_float+0x11c>
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d83c      	bhi.n	800837c <_scanf_float+0xd0>
 8008302:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008306:	b2c8      	uxtb	r0, r1
 8008308:	280e      	cmp	r0, #14
 800830a:	d93a      	bls.n	8008382 <_scanf_float+0xd6>
 800830c:	f1b9 0f00 	cmp.w	r9, #0
 8008310:	d003      	beq.n	800831a <_scanf_float+0x6e>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800831e:	f1ba 0f01 	cmp.w	sl, #1
 8008322:	f200 8113 	bhi.w	800854c <_scanf_float+0x2a0>
 8008326:	455e      	cmp	r6, fp
 8008328:	f200 8105 	bhi.w	8008536 <_scanf_float+0x28a>
 800832c:	2501      	movs	r5, #1
 800832e:	4628      	mov	r0, r5
 8008330:	b007      	add	sp, #28
 8008332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008336:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800833a:	2a0d      	cmp	r2, #13
 800833c:	d8e6      	bhi.n	800830c <_scanf_float+0x60>
 800833e:	a101      	add	r1, pc, #4	; (adr r1, 8008344 <_scanf_float+0x98>)
 8008340:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008344:	08008483 	.word	0x08008483
 8008348:	0800830d 	.word	0x0800830d
 800834c:	0800830d 	.word	0x0800830d
 8008350:	0800830d 	.word	0x0800830d
 8008354:	080084e3 	.word	0x080084e3
 8008358:	080084bb 	.word	0x080084bb
 800835c:	0800830d 	.word	0x0800830d
 8008360:	0800830d 	.word	0x0800830d
 8008364:	08008491 	.word	0x08008491
 8008368:	0800830d 	.word	0x0800830d
 800836c:	0800830d 	.word	0x0800830d
 8008370:	0800830d 	.word	0x0800830d
 8008374:	0800830d 	.word	0x0800830d
 8008378:	08008449 	.word	0x08008449
 800837c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008380:	e7db      	b.n	800833a <_scanf_float+0x8e>
 8008382:	290e      	cmp	r1, #14
 8008384:	d8c2      	bhi.n	800830c <_scanf_float+0x60>
 8008386:	a001      	add	r0, pc, #4	; (adr r0, 800838c <_scanf_float+0xe0>)
 8008388:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800838c:	0800843b 	.word	0x0800843b
 8008390:	0800830d 	.word	0x0800830d
 8008394:	0800843b 	.word	0x0800843b
 8008398:	080084cf 	.word	0x080084cf
 800839c:	0800830d 	.word	0x0800830d
 80083a0:	080083e9 	.word	0x080083e9
 80083a4:	08008425 	.word	0x08008425
 80083a8:	08008425 	.word	0x08008425
 80083ac:	08008425 	.word	0x08008425
 80083b0:	08008425 	.word	0x08008425
 80083b4:	08008425 	.word	0x08008425
 80083b8:	08008425 	.word	0x08008425
 80083bc:	08008425 	.word	0x08008425
 80083c0:	08008425 	.word	0x08008425
 80083c4:	08008425 	.word	0x08008425
 80083c8:	2b6e      	cmp	r3, #110	; 0x6e
 80083ca:	d809      	bhi.n	80083e0 <_scanf_float+0x134>
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d8b2      	bhi.n	8008336 <_scanf_float+0x8a>
 80083d0:	2b54      	cmp	r3, #84	; 0x54
 80083d2:	d077      	beq.n	80084c4 <_scanf_float+0x218>
 80083d4:	2b59      	cmp	r3, #89	; 0x59
 80083d6:	d199      	bne.n	800830c <_scanf_float+0x60>
 80083d8:	2d07      	cmp	r5, #7
 80083da:	d197      	bne.n	800830c <_scanf_float+0x60>
 80083dc:	2508      	movs	r5, #8
 80083de:	e029      	b.n	8008434 <_scanf_float+0x188>
 80083e0:	2b74      	cmp	r3, #116	; 0x74
 80083e2:	d06f      	beq.n	80084c4 <_scanf_float+0x218>
 80083e4:	2b79      	cmp	r3, #121	; 0x79
 80083e6:	e7f6      	b.n	80083d6 <_scanf_float+0x12a>
 80083e8:	6821      	ldr	r1, [r4, #0]
 80083ea:	05c8      	lsls	r0, r1, #23
 80083ec:	d51a      	bpl.n	8008424 <_scanf_float+0x178>
 80083ee:	9b02      	ldr	r3, [sp, #8]
 80083f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083f4:	6021      	str	r1, [r4, #0]
 80083f6:	f109 0901 	add.w	r9, r9, #1
 80083fa:	b11b      	cbz	r3, 8008404 <_scanf_float+0x158>
 80083fc:	3b01      	subs	r3, #1
 80083fe:	3201      	adds	r2, #1
 8008400:	9302      	str	r3, [sp, #8]
 8008402:	60a2      	str	r2, [r4, #8]
 8008404:	68a3      	ldr	r3, [r4, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	3301      	adds	r3, #1
 800840e:	6123      	str	r3, [r4, #16]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3b01      	subs	r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	f340 8084 	ble.w	8008524 <_scanf_float+0x278>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	603b      	str	r3, [r7, #0]
 8008422:	e766      	b.n	80082f2 <_scanf_float+0x46>
 8008424:	eb1a 0f05 	cmn.w	sl, r5
 8008428:	f47f af70 	bne.w	800830c <_scanf_float+0x60>
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008432:	6022      	str	r2, [r4, #0]
 8008434:	f806 3b01 	strb.w	r3, [r6], #1
 8008438:	e7e4      	b.n	8008404 <_scanf_float+0x158>
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	0610      	lsls	r0, r2, #24
 800843e:	f57f af65 	bpl.w	800830c <_scanf_float+0x60>
 8008442:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008446:	e7f4      	b.n	8008432 <_scanf_float+0x186>
 8008448:	f1ba 0f00 	cmp.w	sl, #0
 800844c:	d10e      	bne.n	800846c <_scanf_float+0x1c0>
 800844e:	f1b9 0f00 	cmp.w	r9, #0
 8008452:	d10e      	bne.n	8008472 <_scanf_float+0x1c6>
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800845a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800845e:	d108      	bne.n	8008472 <_scanf_float+0x1c6>
 8008460:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	f04f 0a01 	mov.w	sl, #1
 800846a:	e7e3      	b.n	8008434 <_scanf_float+0x188>
 800846c:	f1ba 0f02 	cmp.w	sl, #2
 8008470:	d055      	beq.n	800851e <_scanf_float+0x272>
 8008472:	2d01      	cmp	r5, #1
 8008474:	d002      	beq.n	800847c <_scanf_float+0x1d0>
 8008476:	2d04      	cmp	r5, #4
 8008478:	f47f af48 	bne.w	800830c <_scanf_float+0x60>
 800847c:	3501      	adds	r5, #1
 800847e:	b2ed      	uxtb	r5, r5
 8008480:	e7d8      	b.n	8008434 <_scanf_float+0x188>
 8008482:	f1ba 0f01 	cmp.w	sl, #1
 8008486:	f47f af41 	bne.w	800830c <_scanf_float+0x60>
 800848a:	f04f 0a02 	mov.w	sl, #2
 800848e:	e7d1      	b.n	8008434 <_scanf_float+0x188>
 8008490:	b97d      	cbnz	r5, 80084b2 <_scanf_float+0x206>
 8008492:	f1b9 0f00 	cmp.w	r9, #0
 8008496:	f47f af3c 	bne.w	8008312 <_scanf_float+0x66>
 800849a:	6822      	ldr	r2, [r4, #0]
 800849c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084a4:	f47f af39 	bne.w	800831a <_scanf_float+0x6e>
 80084a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	2501      	movs	r5, #1
 80084b0:	e7c0      	b.n	8008434 <_scanf_float+0x188>
 80084b2:	2d03      	cmp	r5, #3
 80084b4:	d0e2      	beq.n	800847c <_scanf_float+0x1d0>
 80084b6:	2d05      	cmp	r5, #5
 80084b8:	e7de      	b.n	8008478 <_scanf_float+0x1cc>
 80084ba:	2d02      	cmp	r5, #2
 80084bc:	f47f af26 	bne.w	800830c <_scanf_float+0x60>
 80084c0:	2503      	movs	r5, #3
 80084c2:	e7b7      	b.n	8008434 <_scanf_float+0x188>
 80084c4:	2d06      	cmp	r5, #6
 80084c6:	f47f af21 	bne.w	800830c <_scanf_float+0x60>
 80084ca:	2507      	movs	r5, #7
 80084cc:	e7b2      	b.n	8008434 <_scanf_float+0x188>
 80084ce:	6822      	ldr	r2, [r4, #0]
 80084d0:	0591      	lsls	r1, r2, #22
 80084d2:	f57f af1b 	bpl.w	800830c <_scanf_float+0x60>
 80084d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084da:	6022      	str	r2, [r4, #0]
 80084dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80084e0:	e7a8      	b.n	8008434 <_scanf_float+0x188>
 80084e2:	6822      	ldr	r2, [r4, #0]
 80084e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084ec:	d006      	beq.n	80084fc <_scanf_float+0x250>
 80084ee:	0550      	lsls	r0, r2, #21
 80084f0:	f57f af0c 	bpl.w	800830c <_scanf_float+0x60>
 80084f4:	f1b9 0f00 	cmp.w	r9, #0
 80084f8:	f43f af0f 	beq.w	800831a <_scanf_float+0x6e>
 80084fc:	0591      	lsls	r1, r2, #22
 80084fe:	bf58      	it	pl
 8008500:	9901      	ldrpl	r1, [sp, #4]
 8008502:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008506:	bf58      	it	pl
 8008508:	eba9 0101 	subpl.w	r1, r9, r1
 800850c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008510:	bf58      	it	pl
 8008512:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	f04f 0900 	mov.w	r9, #0
 800851c:	e78a      	b.n	8008434 <_scanf_float+0x188>
 800851e:	f04f 0a03 	mov.w	sl, #3
 8008522:	e787      	b.n	8008434 <_scanf_float+0x188>
 8008524:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008528:	4639      	mov	r1, r7
 800852a:	4640      	mov	r0, r8
 800852c:	4798      	blx	r3
 800852e:	2800      	cmp	r0, #0
 8008530:	f43f aedf 	beq.w	80082f2 <_scanf_float+0x46>
 8008534:	e6ea      	b.n	800830c <_scanf_float+0x60>
 8008536:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800853a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800853e:	463a      	mov	r2, r7
 8008540:	4640      	mov	r0, r8
 8008542:	4798      	blx	r3
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	3b01      	subs	r3, #1
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	e6ec      	b.n	8008326 <_scanf_float+0x7a>
 800854c:	1e6b      	subs	r3, r5, #1
 800854e:	2b06      	cmp	r3, #6
 8008550:	d825      	bhi.n	800859e <_scanf_float+0x2f2>
 8008552:	2d02      	cmp	r5, #2
 8008554:	d836      	bhi.n	80085c4 <_scanf_float+0x318>
 8008556:	455e      	cmp	r6, fp
 8008558:	f67f aee8 	bls.w	800832c <_scanf_float+0x80>
 800855c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008560:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008564:	463a      	mov	r2, r7
 8008566:	4640      	mov	r0, r8
 8008568:	4798      	blx	r3
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	3b01      	subs	r3, #1
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	e7f1      	b.n	8008556 <_scanf_float+0x2aa>
 8008572:	9802      	ldr	r0, [sp, #8]
 8008574:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008578:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800857c:	9002      	str	r0, [sp, #8]
 800857e:	463a      	mov	r2, r7
 8008580:	4640      	mov	r0, r8
 8008582:	4798      	blx	r3
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	3b01      	subs	r3, #1
 8008588:	6123      	str	r3, [r4, #16]
 800858a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800858e:	fa5f fa8a 	uxtb.w	sl, sl
 8008592:	f1ba 0f02 	cmp.w	sl, #2
 8008596:	d1ec      	bne.n	8008572 <_scanf_float+0x2c6>
 8008598:	3d03      	subs	r5, #3
 800859a:	b2ed      	uxtb	r5, r5
 800859c:	1b76      	subs	r6, r6, r5
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	05da      	lsls	r2, r3, #23
 80085a2:	d52f      	bpl.n	8008604 <_scanf_float+0x358>
 80085a4:	055b      	lsls	r3, r3, #21
 80085a6:	d510      	bpl.n	80085ca <_scanf_float+0x31e>
 80085a8:	455e      	cmp	r6, fp
 80085aa:	f67f aebf 	bls.w	800832c <_scanf_float+0x80>
 80085ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085b6:	463a      	mov	r2, r7
 80085b8:	4640      	mov	r0, r8
 80085ba:	4798      	blx	r3
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	3b01      	subs	r3, #1
 80085c0:	6123      	str	r3, [r4, #16]
 80085c2:	e7f1      	b.n	80085a8 <_scanf_float+0x2fc>
 80085c4:	46aa      	mov	sl, r5
 80085c6:	9602      	str	r6, [sp, #8]
 80085c8:	e7df      	b.n	800858a <_scanf_float+0x2de>
 80085ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085ce:	6923      	ldr	r3, [r4, #16]
 80085d0:	2965      	cmp	r1, #101	; 0x65
 80085d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	d00c      	beq.n	80085f8 <_scanf_float+0x34c>
 80085de:	2945      	cmp	r1, #69	; 0x45
 80085e0:	d00a      	beq.n	80085f8 <_scanf_float+0x34c>
 80085e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085e6:	463a      	mov	r2, r7
 80085e8:	4640      	mov	r0, r8
 80085ea:	4798      	blx	r3
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	1eb5      	subs	r5, r6, #2
 80085f6:	6123      	str	r3, [r4, #16]
 80085f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085fc:	463a      	mov	r2, r7
 80085fe:	4640      	mov	r0, r8
 8008600:	4798      	blx	r3
 8008602:	462e      	mov	r6, r5
 8008604:	6825      	ldr	r5, [r4, #0]
 8008606:	f015 0510 	ands.w	r5, r5, #16
 800860a:	d158      	bne.n	80086be <_scanf_float+0x412>
 800860c:	7035      	strb	r5, [r6, #0]
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008618:	d11c      	bne.n	8008654 <_scanf_float+0x3a8>
 800861a:	9b01      	ldr	r3, [sp, #4]
 800861c:	454b      	cmp	r3, r9
 800861e:	eba3 0209 	sub.w	r2, r3, r9
 8008622:	d124      	bne.n	800866e <_scanf_float+0x3c2>
 8008624:	2200      	movs	r2, #0
 8008626:	4659      	mov	r1, fp
 8008628:	4640      	mov	r0, r8
 800862a:	f000 fe9b 	bl	8009364 <_strtod_r>
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	6821      	ldr	r1, [r4, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f011 0f02 	tst.w	r1, #2
 8008638:	ec57 6b10 	vmov	r6, r7, d0
 800863c:	f103 0204 	add.w	r2, r3, #4
 8008640:	d020      	beq.n	8008684 <_scanf_float+0x3d8>
 8008642:	9903      	ldr	r1, [sp, #12]
 8008644:	600a      	str	r2, [r1, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	e9c3 6700 	strd	r6, r7, [r3]
 800864c:	68e3      	ldr	r3, [r4, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	60e3      	str	r3, [r4, #12]
 8008652:	e66c      	b.n	800832e <_scanf_float+0x82>
 8008654:	9b04      	ldr	r3, [sp, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0e4      	beq.n	8008624 <_scanf_float+0x378>
 800865a:	9905      	ldr	r1, [sp, #20]
 800865c:	230a      	movs	r3, #10
 800865e:	462a      	mov	r2, r5
 8008660:	3101      	adds	r1, #1
 8008662:	4640      	mov	r0, r8
 8008664:	f000 ff08 	bl	8009478 <_strtol_r>
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	9e05      	ldr	r6, [sp, #20]
 800866c:	1ac2      	subs	r2, r0, r3
 800866e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008672:	429e      	cmp	r6, r3
 8008674:	bf28      	it	cs
 8008676:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800867a:	4912      	ldr	r1, [pc, #72]	; (80086c4 <_scanf_float+0x418>)
 800867c:	4630      	mov	r0, r6
 800867e:	f000 f82b 	bl	80086d8 <siprintf>
 8008682:	e7cf      	b.n	8008624 <_scanf_float+0x378>
 8008684:	f011 0f04 	tst.w	r1, #4
 8008688:	9903      	ldr	r1, [sp, #12]
 800868a:	600a      	str	r2, [r1, #0]
 800868c:	d1db      	bne.n	8008646 <_scanf_float+0x39a>
 800868e:	f8d3 8000 	ldr.w	r8, [r3]
 8008692:	ee10 2a10 	vmov	r2, s0
 8008696:	ee10 0a10 	vmov	r0, s0
 800869a:	463b      	mov	r3, r7
 800869c:	4639      	mov	r1, r7
 800869e:	f7f8 fa65 	bl	8000b6c <__aeabi_dcmpun>
 80086a2:	b128      	cbz	r0, 80086b0 <_scanf_float+0x404>
 80086a4:	4808      	ldr	r0, [pc, #32]	; (80086c8 <_scanf_float+0x41c>)
 80086a6:	f000 f811 	bl	80086cc <nanf>
 80086aa:	ed88 0a00 	vstr	s0, [r8]
 80086ae:	e7cd      	b.n	800864c <_scanf_float+0x3a0>
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	f7f8 fab8 	bl	8000c28 <__aeabi_d2f>
 80086b8:	f8c8 0000 	str.w	r0, [r8]
 80086bc:	e7c6      	b.n	800864c <_scanf_float+0x3a0>
 80086be:	2500      	movs	r5, #0
 80086c0:	e635      	b.n	800832e <_scanf_float+0x82>
 80086c2:	bf00      	nop
 80086c4:	0800c290 	.word	0x0800c290
 80086c8:	0800c6a8 	.word	0x0800c6a8

080086cc <nanf>:
 80086cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086d4 <nanf+0x8>
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	7fc00000 	.word	0x7fc00000

080086d8 <siprintf>:
 80086d8:	b40e      	push	{r1, r2, r3}
 80086da:	b500      	push	{lr}
 80086dc:	b09c      	sub	sp, #112	; 0x70
 80086de:	ab1d      	add	r3, sp, #116	; 0x74
 80086e0:	9002      	str	r0, [sp, #8]
 80086e2:	9006      	str	r0, [sp, #24]
 80086e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086e8:	4809      	ldr	r0, [pc, #36]	; (8008710 <siprintf+0x38>)
 80086ea:	9107      	str	r1, [sp, #28]
 80086ec:	9104      	str	r1, [sp, #16]
 80086ee:	4909      	ldr	r1, [pc, #36]	; (8008714 <siprintf+0x3c>)
 80086f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086f4:	9105      	str	r1, [sp, #20]
 80086f6:	6800      	ldr	r0, [r0, #0]
 80086f8:	9301      	str	r3, [sp, #4]
 80086fa:	a902      	add	r1, sp, #8
 80086fc:	f002 fea4 	bl	800b448 <_svfiprintf_r>
 8008700:	9b02      	ldr	r3, [sp, #8]
 8008702:	2200      	movs	r2, #0
 8008704:	701a      	strb	r2, [r3, #0]
 8008706:	b01c      	add	sp, #112	; 0x70
 8008708:	f85d eb04 	ldr.w	lr, [sp], #4
 800870c:	b003      	add	sp, #12
 800870e:	4770      	bx	lr
 8008710:	20000014 	.word	0x20000014
 8008714:	ffff0208 	.word	0xffff0208

08008718 <sulp>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	4604      	mov	r4, r0
 800871c:	460d      	mov	r5, r1
 800871e:	ec45 4b10 	vmov	d0, r4, r5
 8008722:	4616      	mov	r6, r2
 8008724:	f002 fc2c 	bl	800af80 <__ulp>
 8008728:	ec51 0b10 	vmov	r0, r1, d0
 800872c:	b17e      	cbz	r6, 800874e <sulp+0x36>
 800872e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008736:	2b00      	cmp	r3, #0
 8008738:	dd09      	ble.n	800874e <sulp+0x36>
 800873a:	051b      	lsls	r3, r3, #20
 800873c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008740:	2400      	movs	r4, #0
 8008742:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008746:	4622      	mov	r2, r4
 8008748:	462b      	mov	r3, r5
 800874a:	f7f7 ff75 	bl	8000638 <__aeabi_dmul>
 800874e:	bd70      	pop	{r4, r5, r6, pc}

08008750 <_strtod_l>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	b0a3      	sub	sp, #140	; 0x8c
 8008756:	461f      	mov	r7, r3
 8008758:	2300      	movs	r3, #0
 800875a:	931e      	str	r3, [sp, #120]	; 0x78
 800875c:	4ba4      	ldr	r3, [pc, #656]	; (80089f0 <_strtod_l+0x2a0>)
 800875e:	9219      	str	r2, [sp, #100]	; 0x64
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	9307      	str	r3, [sp, #28]
 8008764:	4604      	mov	r4, r0
 8008766:	4618      	mov	r0, r3
 8008768:	4688      	mov	r8, r1
 800876a:	f7f7 fd51 	bl	8000210 <strlen>
 800876e:	f04f 0a00 	mov.w	sl, #0
 8008772:	4605      	mov	r5, r0
 8008774:	f04f 0b00 	mov.w	fp, #0
 8008778:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800877c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800877e:	781a      	ldrb	r2, [r3, #0]
 8008780:	2a2b      	cmp	r2, #43	; 0x2b
 8008782:	d04c      	beq.n	800881e <_strtod_l+0xce>
 8008784:	d839      	bhi.n	80087fa <_strtod_l+0xaa>
 8008786:	2a0d      	cmp	r2, #13
 8008788:	d832      	bhi.n	80087f0 <_strtod_l+0xa0>
 800878a:	2a08      	cmp	r2, #8
 800878c:	d832      	bhi.n	80087f4 <_strtod_l+0xa4>
 800878e:	2a00      	cmp	r2, #0
 8008790:	d03c      	beq.n	800880c <_strtod_l+0xbc>
 8008792:	2300      	movs	r3, #0
 8008794:	930e      	str	r3, [sp, #56]	; 0x38
 8008796:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008798:	7833      	ldrb	r3, [r6, #0]
 800879a:	2b30      	cmp	r3, #48	; 0x30
 800879c:	f040 80b4 	bne.w	8008908 <_strtod_l+0x1b8>
 80087a0:	7873      	ldrb	r3, [r6, #1]
 80087a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087a6:	2b58      	cmp	r3, #88	; 0x58
 80087a8:	d16c      	bne.n	8008884 <_strtod_l+0x134>
 80087aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	ab1e      	add	r3, sp, #120	; 0x78
 80087b0:	9702      	str	r7, [sp, #8]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4a8f      	ldr	r2, [pc, #572]	; (80089f4 <_strtod_l+0x2a4>)
 80087b6:	ab1f      	add	r3, sp, #124	; 0x7c
 80087b8:	a91d      	add	r1, sp, #116	; 0x74
 80087ba:	4620      	mov	r0, r4
 80087bc:	f001 fd40 	bl	800a240 <__gethex>
 80087c0:	f010 0707 	ands.w	r7, r0, #7
 80087c4:	4605      	mov	r5, r0
 80087c6:	d005      	beq.n	80087d4 <_strtod_l+0x84>
 80087c8:	2f06      	cmp	r7, #6
 80087ca:	d12a      	bne.n	8008822 <_strtod_l+0xd2>
 80087cc:	3601      	adds	r6, #1
 80087ce:	2300      	movs	r3, #0
 80087d0:	961d      	str	r6, [sp, #116]	; 0x74
 80087d2:	930e      	str	r3, [sp, #56]	; 0x38
 80087d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f040 8596 	bne.w	8009308 <_strtod_l+0xbb8>
 80087dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087de:	b1db      	cbz	r3, 8008818 <_strtod_l+0xc8>
 80087e0:	4652      	mov	r2, sl
 80087e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087e6:	ec43 2b10 	vmov	d0, r2, r3
 80087ea:	b023      	add	sp, #140	; 0x8c
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	2a20      	cmp	r2, #32
 80087f2:	d1ce      	bne.n	8008792 <_strtod_l+0x42>
 80087f4:	3301      	adds	r3, #1
 80087f6:	931d      	str	r3, [sp, #116]	; 0x74
 80087f8:	e7c0      	b.n	800877c <_strtod_l+0x2c>
 80087fa:	2a2d      	cmp	r2, #45	; 0x2d
 80087fc:	d1c9      	bne.n	8008792 <_strtod_l+0x42>
 80087fe:	2201      	movs	r2, #1
 8008800:	920e      	str	r2, [sp, #56]	; 0x38
 8008802:	1c5a      	adds	r2, r3, #1
 8008804:	921d      	str	r2, [sp, #116]	; 0x74
 8008806:	785b      	ldrb	r3, [r3, #1]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1c4      	bne.n	8008796 <_strtod_l+0x46>
 800880c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800880e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008812:	2b00      	cmp	r3, #0
 8008814:	f040 8576 	bne.w	8009304 <_strtod_l+0xbb4>
 8008818:	4652      	mov	r2, sl
 800881a:	465b      	mov	r3, fp
 800881c:	e7e3      	b.n	80087e6 <_strtod_l+0x96>
 800881e:	2200      	movs	r2, #0
 8008820:	e7ee      	b.n	8008800 <_strtod_l+0xb0>
 8008822:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008824:	b13a      	cbz	r2, 8008836 <_strtod_l+0xe6>
 8008826:	2135      	movs	r1, #53	; 0x35
 8008828:	a820      	add	r0, sp, #128	; 0x80
 800882a:	f002 fcb4 	bl	800b196 <__copybits>
 800882e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008830:	4620      	mov	r0, r4
 8008832:	f002 f879 	bl	800a928 <_Bfree>
 8008836:	3f01      	subs	r7, #1
 8008838:	2f05      	cmp	r7, #5
 800883a:	d807      	bhi.n	800884c <_strtod_l+0xfc>
 800883c:	e8df f007 	tbb	[pc, r7]
 8008840:	1d180b0e 	.word	0x1d180b0e
 8008844:	030e      	.short	0x030e
 8008846:	f04f 0b00 	mov.w	fp, #0
 800884a:	46da      	mov	sl, fp
 800884c:	0728      	lsls	r0, r5, #28
 800884e:	d5c1      	bpl.n	80087d4 <_strtod_l+0x84>
 8008850:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008854:	e7be      	b.n	80087d4 <_strtod_l+0x84>
 8008856:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800885a:	e7f7      	b.n	800884c <_strtod_l+0xfc>
 800885c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008860:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008862:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008866:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800886a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800886e:	e7ed      	b.n	800884c <_strtod_l+0xfc>
 8008870:	f8df b184 	ldr.w	fp, [pc, #388]	; 80089f8 <_strtod_l+0x2a8>
 8008874:	f04f 0a00 	mov.w	sl, #0
 8008878:	e7e8      	b.n	800884c <_strtod_l+0xfc>
 800887a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800887e:	f04f 3aff 	mov.w	sl, #4294967295
 8008882:	e7e3      	b.n	800884c <_strtod_l+0xfc>
 8008884:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	921d      	str	r2, [sp, #116]	; 0x74
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b30      	cmp	r3, #48	; 0x30
 800888e:	d0f9      	beq.n	8008884 <_strtod_l+0x134>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d09f      	beq.n	80087d4 <_strtod_l+0x84>
 8008894:	2301      	movs	r3, #1
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800889e:	930a      	str	r3, [sp, #40]	; 0x28
 80088a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80088a4:	464f      	mov	r7, r9
 80088a6:	220a      	movs	r2, #10
 80088a8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80088aa:	7806      	ldrb	r6, [r0, #0]
 80088ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80088b0:	b2d9      	uxtb	r1, r3
 80088b2:	2909      	cmp	r1, #9
 80088b4:	d92a      	bls.n	800890c <_strtod_l+0x1bc>
 80088b6:	9907      	ldr	r1, [sp, #28]
 80088b8:	462a      	mov	r2, r5
 80088ba:	f002 fedd 	bl	800b678 <strncmp>
 80088be:	b398      	cbz	r0, 8008928 <_strtod_l+0x1d8>
 80088c0:	2000      	movs	r0, #0
 80088c2:	4633      	mov	r3, r6
 80088c4:	463d      	mov	r5, r7
 80088c6:	9007      	str	r0, [sp, #28]
 80088c8:	4602      	mov	r2, r0
 80088ca:	2b65      	cmp	r3, #101	; 0x65
 80088cc:	d001      	beq.n	80088d2 <_strtod_l+0x182>
 80088ce:	2b45      	cmp	r3, #69	; 0x45
 80088d0:	d118      	bne.n	8008904 <_strtod_l+0x1b4>
 80088d2:	b91d      	cbnz	r5, 80088dc <_strtod_l+0x18c>
 80088d4:	9b04      	ldr	r3, [sp, #16]
 80088d6:	4303      	orrs	r3, r0
 80088d8:	d098      	beq.n	800880c <_strtod_l+0xbc>
 80088da:	2500      	movs	r5, #0
 80088dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80088e0:	f108 0301 	add.w	r3, r8, #1
 80088e4:	931d      	str	r3, [sp, #116]	; 0x74
 80088e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80088ea:	2b2b      	cmp	r3, #43	; 0x2b
 80088ec:	d075      	beq.n	80089da <_strtod_l+0x28a>
 80088ee:	2b2d      	cmp	r3, #45	; 0x2d
 80088f0:	d07b      	beq.n	80089ea <_strtod_l+0x29a>
 80088f2:	f04f 0c00 	mov.w	ip, #0
 80088f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80088fa:	2909      	cmp	r1, #9
 80088fc:	f240 8082 	bls.w	8008a04 <_strtod_l+0x2b4>
 8008900:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008904:	2600      	movs	r6, #0
 8008906:	e09d      	b.n	8008a44 <_strtod_l+0x2f4>
 8008908:	2300      	movs	r3, #0
 800890a:	e7c4      	b.n	8008896 <_strtod_l+0x146>
 800890c:	2f08      	cmp	r7, #8
 800890e:	bfd8      	it	le
 8008910:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008912:	f100 0001 	add.w	r0, r0, #1
 8008916:	bfda      	itte	le
 8008918:	fb02 3301 	mlale	r3, r2, r1, r3
 800891c:	9309      	strle	r3, [sp, #36]	; 0x24
 800891e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008922:	3701      	adds	r7, #1
 8008924:	901d      	str	r0, [sp, #116]	; 0x74
 8008926:	e7bf      	b.n	80088a8 <_strtod_l+0x158>
 8008928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800892a:	195a      	adds	r2, r3, r5
 800892c:	921d      	str	r2, [sp, #116]	; 0x74
 800892e:	5d5b      	ldrb	r3, [r3, r5]
 8008930:	2f00      	cmp	r7, #0
 8008932:	d037      	beq.n	80089a4 <_strtod_l+0x254>
 8008934:	9007      	str	r0, [sp, #28]
 8008936:	463d      	mov	r5, r7
 8008938:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800893c:	2a09      	cmp	r2, #9
 800893e:	d912      	bls.n	8008966 <_strtod_l+0x216>
 8008940:	2201      	movs	r2, #1
 8008942:	e7c2      	b.n	80088ca <_strtod_l+0x17a>
 8008944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	921d      	str	r2, [sp, #116]	; 0x74
 800894a:	785b      	ldrb	r3, [r3, #1]
 800894c:	3001      	adds	r0, #1
 800894e:	2b30      	cmp	r3, #48	; 0x30
 8008950:	d0f8      	beq.n	8008944 <_strtod_l+0x1f4>
 8008952:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008956:	2a08      	cmp	r2, #8
 8008958:	f200 84db 	bhi.w	8009312 <_strtod_l+0xbc2>
 800895c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800895e:	9007      	str	r0, [sp, #28]
 8008960:	2000      	movs	r0, #0
 8008962:	920a      	str	r2, [sp, #40]	; 0x28
 8008964:	4605      	mov	r5, r0
 8008966:	3b30      	subs	r3, #48	; 0x30
 8008968:	f100 0201 	add.w	r2, r0, #1
 800896c:	d014      	beq.n	8008998 <_strtod_l+0x248>
 800896e:	9907      	ldr	r1, [sp, #28]
 8008970:	4411      	add	r1, r2
 8008972:	9107      	str	r1, [sp, #28]
 8008974:	462a      	mov	r2, r5
 8008976:	eb00 0e05 	add.w	lr, r0, r5
 800897a:	210a      	movs	r1, #10
 800897c:	4572      	cmp	r2, lr
 800897e:	d113      	bne.n	80089a8 <_strtod_l+0x258>
 8008980:	182a      	adds	r2, r5, r0
 8008982:	2a08      	cmp	r2, #8
 8008984:	f105 0501 	add.w	r5, r5, #1
 8008988:	4405      	add	r5, r0
 800898a:	dc1c      	bgt.n	80089c6 <_strtod_l+0x276>
 800898c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800898e:	220a      	movs	r2, #10
 8008990:	fb02 3301 	mla	r3, r2, r1, r3
 8008994:	9309      	str	r3, [sp, #36]	; 0x24
 8008996:	2200      	movs	r2, #0
 8008998:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800899a:	1c59      	adds	r1, r3, #1
 800899c:	911d      	str	r1, [sp, #116]	; 0x74
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	4610      	mov	r0, r2
 80089a2:	e7c9      	b.n	8008938 <_strtod_l+0x1e8>
 80089a4:	4638      	mov	r0, r7
 80089a6:	e7d2      	b.n	800894e <_strtod_l+0x1fe>
 80089a8:	2a08      	cmp	r2, #8
 80089aa:	dc04      	bgt.n	80089b6 <_strtod_l+0x266>
 80089ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089ae:	434e      	muls	r6, r1
 80089b0:	9609      	str	r6, [sp, #36]	; 0x24
 80089b2:	3201      	adds	r2, #1
 80089b4:	e7e2      	b.n	800897c <_strtod_l+0x22c>
 80089b6:	f102 0c01 	add.w	ip, r2, #1
 80089ba:	f1bc 0f10 	cmp.w	ip, #16
 80089be:	bfd8      	it	le
 80089c0:	fb01 f909 	mulle.w	r9, r1, r9
 80089c4:	e7f5      	b.n	80089b2 <_strtod_l+0x262>
 80089c6:	2d10      	cmp	r5, #16
 80089c8:	bfdc      	itt	le
 80089ca:	220a      	movle	r2, #10
 80089cc:	fb02 3909 	mlale	r9, r2, r9, r3
 80089d0:	e7e1      	b.n	8008996 <_strtod_l+0x246>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9307      	str	r3, [sp, #28]
 80089d6:	2201      	movs	r2, #1
 80089d8:	e77c      	b.n	80088d4 <_strtod_l+0x184>
 80089da:	f04f 0c00 	mov.w	ip, #0
 80089de:	f108 0302 	add.w	r3, r8, #2
 80089e2:	931d      	str	r3, [sp, #116]	; 0x74
 80089e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80089e8:	e785      	b.n	80088f6 <_strtod_l+0x1a6>
 80089ea:	f04f 0c01 	mov.w	ip, #1
 80089ee:	e7f6      	b.n	80089de <_strtod_l+0x28e>
 80089f0:	0800c4e8 	.word	0x0800c4e8
 80089f4:	0800c298 	.word	0x0800c298
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089fe:	1c59      	adds	r1, r3, #1
 8008a00:	911d      	str	r1, [sp, #116]	; 0x74
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	2b30      	cmp	r3, #48	; 0x30
 8008a06:	d0f9      	beq.n	80089fc <_strtod_l+0x2ac>
 8008a08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008a0c:	2908      	cmp	r1, #8
 8008a0e:	f63f af79 	bhi.w	8008904 <_strtod_l+0x1b4>
 8008a12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008a16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a18:	9308      	str	r3, [sp, #32]
 8008a1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a1c:	1c59      	adds	r1, r3, #1
 8008a1e:	911d      	str	r1, [sp, #116]	; 0x74
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008a26:	2e09      	cmp	r6, #9
 8008a28:	d937      	bls.n	8008a9a <_strtod_l+0x34a>
 8008a2a:	9e08      	ldr	r6, [sp, #32]
 8008a2c:	1b89      	subs	r1, r1, r6
 8008a2e:	2908      	cmp	r1, #8
 8008a30:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a34:	dc02      	bgt.n	8008a3c <_strtod_l+0x2ec>
 8008a36:	4576      	cmp	r6, lr
 8008a38:	bfa8      	it	ge
 8008a3a:	4676      	movge	r6, lr
 8008a3c:	f1bc 0f00 	cmp.w	ip, #0
 8008a40:	d000      	beq.n	8008a44 <_strtod_l+0x2f4>
 8008a42:	4276      	negs	r6, r6
 8008a44:	2d00      	cmp	r5, #0
 8008a46:	d14f      	bne.n	8008ae8 <_strtod_l+0x398>
 8008a48:	9904      	ldr	r1, [sp, #16]
 8008a4a:	4301      	orrs	r1, r0
 8008a4c:	f47f aec2 	bne.w	80087d4 <_strtod_l+0x84>
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	f47f aedb 	bne.w	800880c <_strtod_l+0xbc>
 8008a56:	2b69      	cmp	r3, #105	; 0x69
 8008a58:	d027      	beq.n	8008aaa <_strtod_l+0x35a>
 8008a5a:	dc24      	bgt.n	8008aa6 <_strtod_l+0x356>
 8008a5c:	2b49      	cmp	r3, #73	; 0x49
 8008a5e:	d024      	beq.n	8008aaa <_strtod_l+0x35a>
 8008a60:	2b4e      	cmp	r3, #78	; 0x4e
 8008a62:	f47f aed3 	bne.w	800880c <_strtod_l+0xbc>
 8008a66:	499e      	ldr	r1, [pc, #632]	; (8008ce0 <_strtod_l+0x590>)
 8008a68:	a81d      	add	r0, sp, #116	; 0x74
 8008a6a:	f001 fe41 	bl	800a6f0 <__match>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f aecc 	beq.w	800880c <_strtod_l+0xbc>
 8008a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b28      	cmp	r3, #40	; 0x28
 8008a7a:	d12d      	bne.n	8008ad8 <_strtod_l+0x388>
 8008a7c:	4999      	ldr	r1, [pc, #612]	; (8008ce4 <_strtod_l+0x594>)
 8008a7e:	aa20      	add	r2, sp, #128	; 0x80
 8008a80:	a81d      	add	r0, sp, #116	; 0x74
 8008a82:	f001 fe49 	bl	800a718 <__hexnan>
 8008a86:	2805      	cmp	r0, #5
 8008a88:	d126      	bne.n	8008ad8 <_strtod_l+0x388>
 8008a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008a90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008a94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008a98:	e69c      	b.n	80087d4 <_strtod_l+0x84>
 8008a9a:	210a      	movs	r1, #10
 8008a9c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008aa0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008aa4:	e7b9      	b.n	8008a1a <_strtod_l+0x2ca>
 8008aa6:	2b6e      	cmp	r3, #110	; 0x6e
 8008aa8:	e7db      	b.n	8008a62 <_strtod_l+0x312>
 8008aaa:	498f      	ldr	r1, [pc, #572]	; (8008ce8 <_strtod_l+0x598>)
 8008aac:	a81d      	add	r0, sp, #116	; 0x74
 8008aae:	f001 fe1f 	bl	800a6f0 <__match>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f43f aeaa 	beq.w	800880c <_strtod_l+0xbc>
 8008ab8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aba:	498c      	ldr	r1, [pc, #560]	; (8008cec <_strtod_l+0x59c>)
 8008abc:	3b01      	subs	r3, #1
 8008abe:	a81d      	add	r0, sp, #116	; 0x74
 8008ac0:	931d      	str	r3, [sp, #116]	; 0x74
 8008ac2:	f001 fe15 	bl	800a6f0 <__match>
 8008ac6:	b910      	cbnz	r0, 8008ace <_strtod_l+0x37e>
 8008ac8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008aca:	3301      	adds	r3, #1
 8008acc:	931d      	str	r3, [sp, #116]	; 0x74
 8008ace:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008cfc <_strtod_l+0x5ac>
 8008ad2:	f04f 0a00 	mov.w	sl, #0
 8008ad6:	e67d      	b.n	80087d4 <_strtod_l+0x84>
 8008ad8:	4885      	ldr	r0, [pc, #532]	; (8008cf0 <_strtod_l+0x5a0>)
 8008ada:	f002 fdb5 	bl	800b648 <nan>
 8008ade:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008ae2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008ae6:	e675      	b.n	80087d4 <_strtod_l+0x84>
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aec:	1af3      	subs	r3, r6, r3
 8008aee:	2f00      	cmp	r7, #0
 8008af0:	bf08      	it	eq
 8008af2:	462f      	moveq	r7, r5
 8008af4:	2d10      	cmp	r5, #16
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	46a8      	mov	r8, r5
 8008afa:	bfa8      	it	ge
 8008afc:	f04f 0810 	movge.w	r8, #16
 8008b00:	f7f7 fd20 	bl	8000544 <__aeabi_ui2d>
 8008b04:	2d09      	cmp	r5, #9
 8008b06:	4682      	mov	sl, r0
 8008b08:	468b      	mov	fp, r1
 8008b0a:	dd13      	ble.n	8008b34 <_strtod_l+0x3e4>
 8008b0c:	4b79      	ldr	r3, [pc, #484]	; (8008cf4 <_strtod_l+0x5a4>)
 8008b0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b16:	f7f7 fd8f 	bl	8000638 <__aeabi_dmul>
 8008b1a:	4682      	mov	sl, r0
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	468b      	mov	fp, r1
 8008b20:	f7f7 fd10 	bl	8000544 <__aeabi_ui2d>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4650      	mov	r0, sl
 8008b2a:	4659      	mov	r1, fp
 8008b2c:	f7f7 fbce 	bl	80002cc <__adddf3>
 8008b30:	4682      	mov	sl, r0
 8008b32:	468b      	mov	fp, r1
 8008b34:	2d0f      	cmp	r5, #15
 8008b36:	dc38      	bgt.n	8008baa <_strtod_l+0x45a>
 8008b38:	9b08      	ldr	r3, [sp, #32]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f43f ae4a 	beq.w	80087d4 <_strtod_l+0x84>
 8008b40:	dd24      	ble.n	8008b8c <_strtod_l+0x43c>
 8008b42:	2b16      	cmp	r3, #22
 8008b44:	dc0b      	bgt.n	8008b5e <_strtod_l+0x40e>
 8008b46:	4d6b      	ldr	r5, [pc, #428]	; (8008cf4 <_strtod_l+0x5a4>)
 8008b48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	f7f7 fd70 	bl	8000638 <__aeabi_dmul>
 8008b58:	4682      	mov	sl, r0
 8008b5a:	468b      	mov	fp, r1
 8008b5c:	e63a      	b.n	80087d4 <_strtod_l+0x84>
 8008b5e:	9a08      	ldr	r2, [sp, #32]
 8008b60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008b64:	4293      	cmp	r3, r2
 8008b66:	db20      	blt.n	8008baa <_strtod_l+0x45a>
 8008b68:	4c62      	ldr	r4, [pc, #392]	; (8008cf4 <_strtod_l+0x5a4>)
 8008b6a:	f1c5 050f 	rsb	r5, r5, #15
 8008b6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b72:	4652      	mov	r2, sl
 8008b74:	465b      	mov	r3, fp
 8008b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b7a:	f7f7 fd5d 	bl	8000638 <__aeabi_dmul>
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	1b5d      	subs	r5, r3, r5
 8008b82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b8a:	e7e3      	b.n	8008b54 <_strtod_l+0x404>
 8008b8c:	9b08      	ldr	r3, [sp, #32]
 8008b8e:	3316      	adds	r3, #22
 8008b90:	db0b      	blt.n	8008baa <_strtod_l+0x45a>
 8008b92:	9b07      	ldr	r3, [sp, #28]
 8008b94:	4a57      	ldr	r2, [pc, #348]	; (8008cf4 <_strtod_l+0x5a4>)
 8008b96:	1b9e      	subs	r6, r3, r6
 8008b98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008b9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ba0:	4650      	mov	r0, sl
 8008ba2:	4659      	mov	r1, fp
 8008ba4:	f7f7 fe72 	bl	800088c <__aeabi_ddiv>
 8008ba8:	e7d6      	b.n	8008b58 <_strtod_l+0x408>
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	eba5 0808 	sub.w	r8, r5, r8
 8008bb0:	4498      	add	r8, r3
 8008bb2:	f1b8 0f00 	cmp.w	r8, #0
 8008bb6:	dd71      	ble.n	8008c9c <_strtod_l+0x54c>
 8008bb8:	f018 030f 	ands.w	r3, r8, #15
 8008bbc:	d00a      	beq.n	8008bd4 <_strtod_l+0x484>
 8008bbe:	494d      	ldr	r1, [pc, #308]	; (8008cf4 <_strtod_l+0x5a4>)
 8008bc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bc4:	4652      	mov	r2, sl
 8008bc6:	465b      	mov	r3, fp
 8008bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bcc:	f7f7 fd34 	bl	8000638 <__aeabi_dmul>
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	468b      	mov	fp, r1
 8008bd4:	f038 080f 	bics.w	r8, r8, #15
 8008bd8:	d04d      	beq.n	8008c76 <_strtod_l+0x526>
 8008bda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008bde:	dd22      	ble.n	8008c26 <_strtod_l+0x4d6>
 8008be0:	2500      	movs	r5, #0
 8008be2:	462e      	mov	r6, r5
 8008be4:	9509      	str	r5, [sp, #36]	; 0x24
 8008be6:	9507      	str	r5, [sp, #28]
 8008be8:	2322      	movs	r3, #34	; 0x22
 8008bea:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008cfc <_strtod_l+0x5ac>
 8008bee:	6023      	str	r3, [r4, #0]
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f43f adec 	beq.w	80087d4 <_strtod_l+0x84>
 8008bfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f001 fe92 	bl	800a928 <_Bfree>
 8008c04:	9907      	ldr	r1, [sp, #28]
 8008c06:	4620      	mov	r0, r4
 8008c08:	f001 fe8e 	bl	800a928 <_Bfree>
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f001 fe8a 	bl	800a928 <_Bfree>
 8008c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c16:	4620      	mov	r0, r4
 8008c18:	f001 fe86 	bl	800a928 <_Bfree>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f001 fe82 	bl	800a928 <_Bfree>
 8008c24:	e5d6      	b.n	80087d4 <_strtod_l+0x84>
 8008c26:	2300      	movs	r3, #0
 8008c28:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	4659      	mov	r1, fp
 8008c30:	4699      	mov	r9, r3
 8008c32:	f1b8 0f01 	cmp.w	r8, #1
 8008c36:	dc21      	bgt.n	8008c7c <_strtod_l+0x52c>
 8008c38:	b10b      	cbz	r3, 8008c3e <_strtod_l+0x4ee>
 8008c3a:	4682      	mov	sl, r0
 8008c3c:	468b      	mov	fp, r1
 8008c3e:	4b2e      	ldr	r3, [pc, #184]	; (8008cf8 <_strtod_l+0x5a8>)
 8008c40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008c48:	4652      	mov	r2, sl
 8008c4a:	465b      	mov	r3, fp
 8008c4c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c50:	f7f7 fcf2 	bl	8000638 <__aeabi_dmul>
 8008c54:	4b29      	ldr	r3, [pc, #164]	; (8008cfc <_strtod_l+0x5ac>)
 8008c56:	460a      	mov	r2, r1
 8008c58:	400b      	ands	r3, r1
 8008c5a:	4929      	ldr	r1, [pc, #164]	; (8008d00 <_strtod_l+0x5b0>)
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	4682      	mov	sl, r0
 8008c60:	d8be      	bhi.n	8008be0 <_strtod_l+0x490>
 8008c62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c66:	428b      	cmp	r3, r1
 8008c68:	bf86      	itte	hi
 8008c6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008d04 <_strtod_l+0x5b4>
 8008c6e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c76:	2300      	movs	r3, #0
 8008c78:	9304      	str	r3, [sp, #16]
 8008c7a:	e081      	b.n	8008d80 <_strtod_l+0x630>
 8008c7c:	f018 0f01 	tst.w	r8, #1
 8008c80:	d007      	beq.n	8008c92 <_strtod_l+0x542>
 8008c82:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <_strtod_l+0x5a8>)
 8008c84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fcd4 	bl	8000638 <__aeabi_dmul>
 8008c90:	2301      	movs	r3, #1
 8008c92:	f109 0901 	add.w	r9, r9, #1
 8008c96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c9a:	e7ca      	b.n	8008c32 <_strtod_l+0x4e2>
 8008c9c:	d0eb      	beq.n	8008c76 <_strtod_l+0x526>
 8008c9e:	f1c8 0800 	rsb	r8, r8, #0
 8008ca2:	f018 020f 	ands.w	r2, r8, #15
 8008ca6:	d00a      	beq.n	8008cbe <_strtod_l+0x56e>
 8008ca8:	4b12      	ldr	r3, [pc, #72]	; (8008cf4 <_strtod_l+0x5a4>)
 8008caa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cae:	4650      	mov	r0, sl
 8008cb0:	4659      	mov	r1, fp
 8008cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb6:	f7f7 fde9 	bl	800088c <__aeabi_ddiv>
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008cc2:	d0d8      	beq.n	8008c76 <_strtod_l+0x526>
 8008cc4:	f1b8 0f1f 	cmp.w	r8, #31
 8008cc8:	dd1e      	ble.n	8008d08 <_strtod_l+0x5b8>
 8008cca:	2500      	movs	r5, #0
 8008ccc:	462e      	mov	r6, r5
 8008cce:	9509      	str	r5, [sp, #36]	; 0x24
 8008cd0:	9507      	str	r5, [sp, #28]
 8008cd2:	2322      	movs	r3, #34	; 0x22
 8008cd4:	f04f 0a00 	mov.w	sl, #0
 8008cd8:	f04f 0b00 	mov.w	fp, #0
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	e789      	b.n	8008bf4 <_strtod_l+0x4a4>
 8008ce0:	0800c269 	.word	0x0800c269
 8008ce4:	0800c2ac 	.word	0x0800c2ac
 8008ce8:	0800c261 	.word	0x0800c261
 8008cec:	0800c3ec 	.word	0x0800c3ec
 8008cf0:	0800c6a8 	.word	0x0800c6a8
 8008cf4:	0800c588 	.word	0x0800c588
 8008cf8:	0800c560 	.word	0x0800c560
 8008cfc:	7ff00000 	.word	0x7ff00000
 8008d00:	7ca00000 	.word	0x7ca00000
 8008d04:	7fefffff 	.word	0x7fefffff
 8008d08:	f018 0310 	ands.w	r3, r8, #16
 8008d0c:	bf18      	it	ne
 8008d0e:	236a      	movne	r3, #106	; 0x6a
 8008d10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80090c8 <_strtod_l+0x978>
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	4650      	mov	r0, sl
 8008d18:	4659      	mov	r1, fp
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f018 0f01 	tst.w	r8, #1
 8008d20:	d004      	beq.n	8008d2c <_strtod_l+0x5dc>
 8008d22:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d30:	f109 0908 	add.w	r9, r9, #8
 8008d34:	d1f2      	bne.n	8008d1c <_strtod_l+0x5cc>
 8008d36:	b10b      	cbz	r3, 8008d3c <_strtod_l+0x5ec>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	b1bb      	cbz	r3, 8008d70 <_strtod_l+0x620>
 8008d40:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008d44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	4659      	mov	r1, fp
 8008d4c:	dd10      	ble.n	8008d70 <_strtod_l+0x620>
 8008d4e:	2b1f      	cmp	r3, #31
 8008d50:	f340 8128 	ble.w	8008fa4 <_strtod_l+0x854>
 8008d54:	2b34      	cmp	r3, #52	; 0x34
 8008d56:	bfde      	ittt	le
 8008d58:	3b20      	suble	r3, #32
 8008d5a:	f04f 32ff 	movle.w	r2, #4294967295
 8008d5e:	fa02 f303 	lslle.w	r3, r2, r3
 8008d62:	f04f 0a00 	mov.w	sl, #0
 8008d66:	bfcc      	ite	gt
 8008d68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d6c:	ea03 0b01 	andle.w	fp, r3, r1
 8008d70:	2200      	movs	r2, #0
 8008d72:	2300      	movs	r3, #0
 8008d74:	4650      	mov	r0, sl
 8008d76:	4659      	mov	r1, fp
 8008d78:	f7f7 fec6 	bl	8000b08 <__aeabi_dcmpeq>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1a4      	bne.n	8008cca <_strtod_l+0x57a>
 8008d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d86:	462b      	mov	r3, r5
 8008d88:	463a      	mov	r2, r7
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f001 fe38 	bl	800aa00 <__s2b>
 8008d90:	9009      	str	r0, [sp, #36]	; 0x24
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f43f af24 	beq.w	8008be0 <_strtod_l+0x490>
 8008d98:	9b07      	ldr	r3, [sp, #28]
 8008d9a:	1b9e      	subs	r6, r3, r6
 8008d9c:	9b08      	ldr	r3, [sp, #32]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bfb4      	ite	lt
 8008da2:	4633      	movlt	r3, r6
 8008da4:	2300      	movge	r3, #0
 8008da6:	9310      	str	r3, [sp, #64]	; 0x40
 8008da8:	9b08      	ldr	r3, [sp, #32]
 8008daa:	2500      	movs	r5, #0
 8008dac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008db0:	9318      	str	r3, [sp, #96]	; 0x60
 8008db2:	462e      	mov	r6, r5
 8008db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db6:	4620      	mov	r0, r4
 8008db8:	6859      	ldr	r1, [r3, #4]
 8008dba:	f001 fd75 	bl	800a8a8 <_Balloc>
 8008dbe:	9007      	str	r0, [sp, #28]
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f43f af11 	beq.w	8008be8 <_strtod_l+0x498>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	3202      	adds	r2, #2
 8008dcc:	f103 010c 	add.w	r1, r3, #12
 8008dd0:	0092      	lsls	r2, r2, #2
 8008dd2:	300c      	adds	r0, #12
 8008dd4:	f001 fd5a 	bl	800a88c <memcpy>
 8008dd8:	ec4b ab10 	vmov	d0, sl, fp
 8008ddc:	aa20      	add	r2, sp, #128	; 0x80
 8008dde:	a91f      	add	r1, sp, #124	; 0x7c
 8008de0:	4620      	mov	r0, r4
 8008de2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008de6:	f002 f947 	bl	800b078 <__d2b>
 8008dea:	901e      	str	r0, [sp, #120]	; 0x78
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f43f aefb 	beq.w	8008be8 <_strtod_l+0x498>
 8008df2:	2101      	movs	r1, #1
 8008df4:	4620      	mov	r0, r4
 8008df6:	f001 fe9d 	bl	800ab34 <__i2b>
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	f43f aef3 	beq.w	8008be8 <_strtod_l+0x498>
 8008e02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e04:	9904      	ldr	r1, [sp, #16]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	bfab      	itete	ge
 8008e0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008e0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008e0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008e10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008e14:	bfac      	ite	ge
 8008e16:	eb03 0902 	addge.w	r9, r3, r2
 8008e1a:	1ad7      	sublt	r7, r2, r3
 8008e1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e1e:	eba3 0801 	sub.w	r8, r3, r1
 8008e22:	4490      	add	r8, r2
 8008e24:	4ba3      	ldr	r3, [pc, #652]	; (80090b4 <_strtod_l+0x964>)
 8008e26:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e2a:	4598      	cmp	r8, r3
 8008e2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e30:	f280 80cc 	bge.w	8008fcc <_strtod_l+0x87c>
 8008e34:	eba3 0308 	sub.w	r3, r3, r8
 8008e38:	2b1f      	cmp	r3, #31
 8008e3a:	eba2 0203 	sub.w	r2, r2, r3
 8008e3e:	f04f 0101 	mov.w	r1, #1
 8008e42:	f300 80b6 	bgt.w	8008fb2 <_strtod_l+0x862>
 8008e46:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4a:	9311      	str	r3, [sp, #68]	; 0x44
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008e50:	eb09 0802 	add.w	r8, r9, r2
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	45c1      	cmp	r9, r8
 8008e58:	4417      	add	r7, r2
 8008e5a:	441f      	add	r7, r3
 8008e5c:	464b      	mov	r3, r9
 8008e5e:	bfa8      	it	ge
 8008e60:	4643      	movge	r3, r8
 8008e62:	42bb      	cmp	r3, r7
 8008e64:	bfa8      	it	ge
 8008e66:	463b      	movge	r3, r7
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfc2      	ittt	gt
 8008e6c:	eba8 0803 	subgt.w	r8, r8, r3
 8008e70:	1aff      	subgt	r7, r7, r3
 8008e72:	eba9 0903 	subgt.w	r9, r9, r3
 8008e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dd17      	ble.n	8008eac <_strtod_l+0x75c>
 8008e7c:	4631      	mov	r1, r6
 8008e7e:	461a      	mov	r2, r3
 8008e80:	4620      	mov	r0, r4
 8008e82:	f001 ff13 	bl	800acac <__pow5mult>
 8008e86:	4606      	mov	r6, r0
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f43f aead 	beq.w	8008be8 <_strtod_l+0x498>
 8008e8e:	4601      	mov	r1, r0
 8008e90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e92:	4620      	mov	r0, r4
 8008e94:	f001 fe64 	bl	800ab60 <__multiply>
 8008e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	f43f aea4 	beq.w	8008be8 <_strtod_l+0x498>
 8008ea0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f001 fd40 	bl	800a928 <_Bfree>
 8008ea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008eaa:	931e      	str	r3, [sp, #120]	; 0x78
 8008eac:	f1b8 0f00 	cmp.w	r8, #0
 8008eb0:	f300 8091 	bgt.w	8008fd6 <_strtod_l+0x886>
 8008eb4:	9b08      	ldr	r3, [sp, #32]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	dd08      	ble.n	8008ecc <_strtod_l+0x77c>
 8008eba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ebc:	9907      	ldr	r1, [sp, #28]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 fef4 	bl	800acac <__pow5mult>
 8008ec4:	9007      	str	r0, [sp, #28]
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	f43f ae8e 	beq.w	8008be8 <_strtod_l+0x498>
 8008ecc:	2f00      	cmp	r7, #0
 8008ece:	dd08      	ble.n	8008ee2 <_strtod_l+0x792>
 8008ed0:	9907      	ldr	r1, [sp, #28]
 8008ed2:	463a      	mov	r2, r7
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f001 ff43 	bl	800ad60 <__lshift>
 8008eda:	9007      	str	r0, [sp, #28]
 8008edc:	2800      	cmp	r0, #0
 8008ede:	f43f ae83 	beq.w	8008be8 <_strtod_l+0x498>
 8008ee2:	f1b9 0f00 	cmp.w	r9, #0
 8008ee6:	dd08      	ble.n	8008efa <_strtod_l+0x7aa>
 8008ee8:	4631      	mov	r1, r6
 8008eea:	464a      	mov	r2, r9
 8008eec:	4620      	mov	r0, r4
 8008eee:	f001 ff37 	bl	800ad60 <__lshift>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	f43f ae77 	beq.w	8008be8 <_strtod_l+0x498>
 8008efa:	9a07      	ldr	r2, [sp, #28]
 8008efc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008efe:	4620      	mov	r0, r4
 8008f00:	f001 ffb6 	bl	800ae70 <__mdiff>
 8008f04:	4605      	mov	r5, r0
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f43f ae6e 	beq.w	8008be8 <_strtod_l+0x498>
 8008f0c:	68c3      	ldr	r3, [r0, #12]
 8008f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f10:	2300      	movs	r3, #0
 8008f12:	60c3      	str	r3, [r0, #12]
 8008f14:	4631      	mov	r1, r6
 8008f16:	f001 ff8f 	bl	800ae38 <__mcmp>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	da65      	bge.n	8008fea <_strtod_l+0x89a>
 8008f1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f20:	ea53 030a 	orrs.w	r3, r3, sl
 8008f24:	f040 8087 	bne.w	8009036 <_strtod_l+0x8e6>
 8008f28:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8082 	bne.w	8009036 <_strtod_l+0x8e6>
 8008f32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f36:	0d1b      	lsrs	r3, r3, #20
 8008f38:	051b      	lsls	r3, r3, #20
 8008f3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f3e:	d97a      	bls.n	8009036 <_strtod_l+0x8e6>
 8008f40:	696b      	ldr	r3, [r5, #20]
 8008f42:	b913      	cbnz	r3, 8008f4a <_strtod_l+0x7fa>
 8008f44:	692b      	ldr	r3, [r5, #16]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	dd75      	ble.n	8009036 <_strtod_l+0x8e6>
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	4620      	mov	r0, r4
 8008f50:	f001 ff06 	bl	800ad60 <__lshift>
 8008f54:	4631      	mov	r1, r6
 8008f56:	4605      	mov	r5, r0
 8008f58:	f001 ff6e 	bl	800ae38 <__mcmp>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	dd6a      	ble.n	8009036 <_strtod_l+0x8e6>
 8008f60:	9904      	ldr	r1, [sp, #16]
 8008f62:	4a55      	ldr	r2, [pc, #340]	; (80090b8 <_strtod_l+0x968>)
 8008f64:	465b      	mov	r3, fp
 8008f66:	2900      	cmp	r1, #0
 8008f68:	f000 8085 	beq.w	8009076 <_strtod_l+0x926>
 8008f6c:	ea02 010b 	and.w	r1, r2, fp
 8008f70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f74:	dc7f      	bgt.n	8009076 <_strtod_l+0x926>
 8008f76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f7a:	f77f aeaa 	ble.w	8008cd2 <_strtod_l+0x582>
 8008f7e:	4a4f      	ldr	r2, [pc, #316]	; (80090bc <_strtod_l+0x96c>)
 8008f80:	2300      	movs	r3, #0
 8008f82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008f86:	4650      	mov	r0, sl
 8008f88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 fb53 	bl	8000638 <__aeabi_dmul>
 8008f92:	460b      	mov	r3, r1
 8008f94:	4303      	orrs	r3, r0
 8008f96:	bf08      	it	eq
 8008f98:	2322      	moveq	r3, #34	; 0x22
 8008f9a:	4682      	mov	sl, r0
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	bf08      	it	eq
 8008fa0:	6023      	streq	r3, [r4, #0]
 8008fa2:	e62b      	b.n	8008bfc <_strtod_l+0x4ac>
 8008fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	ea03 0a0a 	and.w	sl, r3, sl
 8008fb0:	e6de      	b.n	8008d70 <_strtod_l+0x620>
 8008fb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008fb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008fba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008fbe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008fc2:	fa01 f308 	lsl.w	r3, r1, r8
 8008fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fc8:	9111      	str	r1, [sp, #68]	; 0x44
 8008fca:	e741      	b.n	8008e50 <_strtod_l+0x700>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	930c      	str	r3, [sp, #48]	; 0x30
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	9311      	str	r3, [sp, #68]	; 0x44
 8008fd4:	e73c      	b.n	8008e50 <_strtod_l+0x700>
 8008fd6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008fd8:	4642      	mov	r2, r8
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f001 fec0 	bl	800ad60 <__lshift>
 8008fe0:	901e      	str	r0, [sp, #120]	; 0x78
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	f47f af66 	bne.w	8008eb4 <_strtod_l+0x764>
 8008fe8:	e5fe      	b.n	8008be8 <_strtod_l+0x498>
 8008fea:	465f      	mov	r7, fp
 8008fec:	d16e      	bne.n	80090cc <_strtod_l+0x97c>
 8008fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008ff0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ff4:	b342      	cbz	r2, 8009048 <_strtod_l+0x8f8>
 8008ff6:	4a32      	ldr	r2, [pc, #200]	; (80090c0 <_strtod_l+0x970>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d128      	bne.n	800904e <_strtod_l+0x8fe>
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	4650      	mov	r0, sl
 8009000:	b1eb      	cbz	r3, 800903e <_strtod_l+0x8ee>
 8009002:	4a2d      	ldr	r2, [pc, #180]	; (80090b8 <_strtod_l+0x968>)
 8009004:	403a      	ands	r2, r7
 8009006:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800900a:	f04f 31ff 	mov.w	r1, #4294967295
 800900e:	d819      	bhi.n	8009044 <_strtod_l+0x8f4>
 8009010:	0d12      	lsrs	r2, r2, #20
 8009012:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009016:	fa01 f303 	lsl.w	r3, r1, r3
 800901a:	4298      	cmp	r0, r3
 800901c:	d117      	bne.n	800904e <_strtod_l+0x8fe>
 800901e:	4b29      	ldr	r3, [pc, #164]	; (80090c4 <_strtod_l+0x974>)
 8009020:	429f      	cmp	r7, r3
 8009022:	d102      	bne.n	800902a <_strtod_l+0x8da>
 8009024:	3001      	adds	r0, #1
 8009026:	f43f addf 	beq.w	8008be8 <_strtod_l+0x498>
 800902a:	4b23      	ldr	r3, [pc, #140]	; (80090b8 <_strtod_l+0x968>)
 800902c:	403b      	ands	r3, r7
 800902e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009032:	f04f 0a00 	mov.w	sl, #0
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1a0      	bne.n	8008f7e <_strtod_l+0x82e>
 800903c:	e5de      	b.n	8008bfc <_strtod_l+0x4ac>
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	e7ea      	b.n	800901a <_strtod_l+0x8ca>
 8009044:	460b      	mov	r3, r1
 8009046:	e7e8      	b.n	800901a <_strtod_l+0x8ca>
 8009048:	ea53 030a 	orrs.w	r3, r3, sl
 800904c:	d088      	beq.n	8008f60 <_strtod_l+0x810>
 800904e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009050:	b1db      	cbz	r3, 800908a <_strtod_l+0x93a>
 8009052:	423b      	tst	r3, r7
 8009054:	d0ef      	beq.n	8009036 <_strtod_l+0x8e6>
 8009056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009058:	9a04      	ldr	r2, [sp, #16]
 800905a:	4650      	mov	r0, sl
 800905c:	4659      	mov	r1, fp
 800905e:	b1c3      	cbz	r3, 8009092 <_strtod_l+0x942>
 8009060:	f7ff fb5a 	bl	8008718 <sulp>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800906c:	f7f7 f92e 	bl	80002cc <__adddf3>
 8009070:	4682      	mov	sl, r0
 8009072:	468b      	mov	fp, r1
 8009074:	e7df      	b.n	8009036 <_strtod_l+0x8e6>
 8009076:	4013      	ands	r3, r2
 8009078:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800907c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009080:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009084:	f04f 3aff 	mov.w	sl, #4294967295
 8009088:	e7d5      	b.n	8009036 <_strtod_l+0x8e6>
 800908a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800908c:	ea13 0f0a 	tst.w	r3, sl
 8009090:	e7e0      	b.n	8009054 <_strtod_l+0x904>
 8009092:	f7ff fb41 	bl	8008718 <sulp>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800909e:	f7f7 f913 	bl	80002c8 <__aeabi_dsub>
 80090a2:	2200      	movs	r2, #0
 80090a4:	2300      	movs	r3, #0
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	f7f7 fd2d 	bl	8000b08 <__aeabi_dcmpeq>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d0c1      	beq.n	8009036 <_strtod_l+0x8e6>
 80090b2:	e60e      	b.n	8008cd2 <_strtod_l+0x582>
 80090b4:	fffffc02 	.word	0xfffffc02
 80090b8:	7ff00000 	.word	0x7ff00000
 80090bc:	39500000 	.word	0x39500000
 80090c0:	000fffff 	.word	0x000fffff
 80090c4:	7fefffff 	.word	0x7fefffff
 80090c8:	0800c2c0 	.word	0x0800c2c0
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	f002 f82e 	bl	800b130 <__ratio>
 80090d4:	ec59 8b10 	vmov	r8, r9, d0
 80090d8:	ee10 0a10 	vmov	r0, s0
 80090dc:	2200      	movs	r2, #0
 80090de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090e2:	4649      	mov	r1, r9
 80090e4:	f7f7 fd24 	bl	8000b30 <__aeabi_dcmple>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d07c      	beq.n	80091e6 <_strtod_l+0xa96>
 80090ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d04c      	beq.n	800918c <_strtod_l+0xa3c>
 80090f2:	4b95      	ldr	r3, [pc, #596]	; (8009348 <_strtod_l+0xbf8>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80090fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009348 <_strtod_l+0xbf8>
 80090fe:	f04f 0800 	mov.w	r8, #0
 8009102:	4b92      	ldr	r3, [pc, #584]	; (800934c <_strtod_l+0xbfc>)
 8009104:	403b      	ands	r3, r7
 8009106:	9311      	str	r3, [sp, #68]	; 0x44
 8009108:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800910a:	4b91      	ldr	r3, [pc, #580]	; (8009350 <_strtod_l+0xc00>)
 800910c:	429a      	cmp	r2, r3
 800910e:	f040 80b2 	bne.w	8009276 <_strtod_l+0xb26>
 8009112:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800911a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800911e:	ec4b ab10 	vmov	d0, sl, fp
 8009122:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009126:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800912a:	f001 ff29 	bl	800af80 <__ulp>
 800912e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009132:	ec53 2b10 	vmov	r2, r3, d0
 8009136:	f7f7 fa7f 	bl	8000638 <__aeabi_dmul>
 800913a:	4652      	mov	r2, sl
 800913c:	465b      	mov	r3, fp
 800913e:	f7f7 f8c5 	bl	80002cc <__adddf3>
 8009142:	460b      	mov	r3, r1
 8009144:	4981      	ldr	r1, [pc, #516]	; (800934c <_strtod_l+0xbfc>)
 8009146:	4a83      	ldr	r2, [pc, #524]	; (8009354 <_strtod_l+0xc04>)
 8009148:	4019      	ands	r1, r3
 800914a:	4291      	cmp	r1, r2
 800914c:	4682      	mov	sl, r0
 800914e:	d95e      	bls.n	800920e <_strtod_l+0xabe>
 8009150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009152:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009156:	4293      	cmp	r3, r2
 8009158:	d103      	bne.n	8009162 <_strtod_l+0xa12>
 800915a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915c:	3301      	adds	r3, #1
 800915e:	f43f ad43 	beq.w	8008be8 <_strtod_l+0x498>
 8009162:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009360 <_strtod_l+0xc10>
 8009166:	f04f 3aff 	mov.w	sl, #4294967295
 800916a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800916c:	4620      	mov	r0, r4
 800916e:	f001 fbdb 	bl	800a928 <_Bfree>
 8009172:	9907      	ldr	r1, [sp, #28]
 8009174:	4620      	mov	r0, r4
 8009176:	f001 fbd7 	bl	800a928 <_Bfree>
 800917a:	4631      	mov	r1, r6
 800917c:	4620      	mov	r0, r4
 800917e:	f001 fbd3 	bl	800a928 <_Bfree>
 8009182:	4629      	mov	r1, r5
 8009184:	4620      	mov	r0, r4
 8009186:	f001 fbcf 	bl	800a928 <_Bfree>
 800918a:	e613      	b.n	8008db4 <_strtod_l+0x664>
 800918c:	f1ba 0f00 	cmp.w	sl, #0
 8009190:	d11b      	bne.n	80091ca <_strtod_l+0xa7a>
 8009192:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009196:	b9f3      	cbnz	r3, 80091d6 <_strtod_l+0xa86>
 8009198:	4b6b      	ldr	r3, [pc, #428]	; (8009348 <_strtod_l+0xbf8>)
 800919a:	2200      	movs	r2, #0
 800919c:	4640      	mov	r0, r8
 800919e:	4649      	mov	r1, r9
 80091a0:	f7f7 fcbc 	bl	8000b1c <__aeabi_dcmplt>
 80091a4:	b9d0      	cbnz	r0, 80091dc <_strtod_l+0xa8c>
 80091a6:	4640      	mov	r0, r8
 80091a8:	4649      	mov	r1, r9
 80091aa:	4b6b      	ldr	r3, [pc, #428]	; (8009358 <_strtod_l+0xc08>)
 80091ac:	2200      	movs	r2, #0
 80091ae:	f7f7 fa43 	bl	8000638 <__aeabi_dmul>
 80091b2:	4680      	mov	r8, r0
 80091b4:	4689      	mov	r9, r1
 80091b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80091ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80091be:	931b      	str	r3, [sp, #108]	; 0x6c
 80091c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80091c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80091c8:	e79b      	b.n	8009102 <_strtod_l+0x9b2>
 80091ca:	f1ba 0f01 	cmp.w	sl, #1
 80091ce:	d102      	bne.n	80091d6 <_strtod_l+0xa86>
 80091d0:	2f00      	cmp	r7, #0
 80091d2:	f43f ad7e 	beq.w	8008cd2 <_strtod_l+0x582>
 80091d6:	4b61      	ldr	r3, [pc, #388]	; (800935c <_strtod_l+0xc0c>)
 80091d8:	2200      	movs	r2, #0
 80091da:	e78c      	b.n	80090f6 <_strtod_l+0x9a6>
 80091dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009358 <_strtod_l+0xc08>
 80091e0:	f04f 0800 	mov.w	r8, #0
 80091e4:	e7e7      	b.n	80091b6 <_strtod_l+0xa66>
 80091e6:	4b5c      	ldr	r3, [pc, #368]	; (8009358 <_strtod_l+0xc08>)
 80091e8:	4640      	mov	r0, r8
 80091ea:	4649      	mov	r1, r9
 80091ec:	2200      	movs	r2, #0
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	b933      	cbnz	r3, 8009208 <_strtod_l+0xab8>
 80091fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091fe:	9012      	str	r0, [sp, #72]	; 0x48
 8009200:	9313      	str	r3, [sp, #76]	; 0x4c
 8009202:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009206:	e7dd      	b.n	80091c4 <_strtod_l+0xa74>
 8009208:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800920c:	e7f9      	b.n	8009202 <_strtod_l+0xab2>
 800920e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009212:	9b04      	ldr	r3, [sp, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1a8      	bne.n	800916a <_strtod_l+0xa1a>
 8009218:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800921c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800921e:	0d1b      	lsrs	r3, r3, #20
 8009220:	051b      	lsls	r3, r3, #20
 8009222:	429a      	cmp	r2, r3
 8009224:	d1a1      	bne.n	800916a <_strtod_l+0xa1a>
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 fdb5 	bl	8000d98 <__aeabi_d2lz>
 800922e:	f7f7 f9d5 	bl	80005dc <__aeabi_l2d>
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	4640      	mov	r0, r8
 8009238:	4649      	mov	r1, r9
 800923a:	f7f7 f845 	bl	80002c8 <__aeabi_dsub>
 800923e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009240:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009244:	ea43 030a 	orr.w	r3, r3, sl
 8009248:	4313      	orrs	r3, r2
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	d053      	beq.n	80092f8 <_strtod_l+0xba8>
 8009250:	a335      	add	r3, pc, #212	; (adr r3, 8009328 <_strtod_l+0xbd8>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f7 fc61 	bl	8000b1c <__aeabi_dcmplt>
 800925a:	2800      	cmp	r0, #0
 800925c:	f47f acce 	bne.w	8008bfc <_strtod_l+0x4ac>
 8009260:	a333      	add	r3, pc, #204	; (adr r3, 8009330 <_strtod_l+0xbe0>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	4640      	mov	r0, r8
 8009268:	4649      	mov	r1, r9
 800926a:	f7f7 fc75 	bl	8000b58 <__aeabi_dcmpgt>
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f af7b 	beq.w	800916a <_strtod_l+0xa1a>
 8009274:	e4c2      	b.n	8008bfc <_strtod_l+0x4ac>
 8009276:	9b04      	ldr	r3, [sp, #16]
 8009278:	b333      	cbz	r3, 80092c8 <_strtod_l+0xb78>
 800927a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800927c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009280:	d822      	bhi.n	80092c8 <_strtod_l+0xb78>
 8009282:	a32d      	add	r3, pc, #180	; (adr r3, 8009338 <_strtod_l+0xbe8>)
 8009284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fc50 	bl	8000b30 <__aeabi_dcmple>
 8009290:	b1a0      	cbz	r0, 80092bc <_strtod_l+0xb6c>
 8009292:	4649      	mov	r1, r9
 8009294:	4640      	mov	r0, r8
 8009296:	f7f7 fca7 	bl	8000be8 <__aeabi_d2uiz>
 800929a:	2801      	cmp	r0, #1
 800929c:	bf38      	it	cc
 800929e:	2001      	movcc	r0, #1
 80092a0:	f7f7 f950 	bl	8000544 <__aeabi_ui2d>
 80092a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	bb13      	cbnz	r3, 80092f2 <_strtod_l+0xba2>
 80092ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092b0:	9014      	str	r0, [sp, #80]	; 0x50
 80092b2:	9315      	str	r3, [sp, #84]	; 0x54
 80092b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80092b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	930d      	str	r3, [sp, #52]	; 0x34
 80092c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80092d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80092d4:	f001 fe54 	bl	800af80 <__ulp>
 80092d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092dc:	ec53 2b10 	vmov	r2, r3, d0
 80092e0:	f7f7 f9aa 	bl	8000638 <__aeabi_dmul>
 80092e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092e8:	f7f6 fff0 	bl	80002cc <__adddf3>
 80092ec:	4682      	mov	sl, r0
 80092ee:	468b      	mov	fp, r1
 80092f0:	e78f      	b.n	8009212 <_strtod_l+0xac2>
 80092f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80092f6:	e7dd      	b.n	80092b4 <_strtod_l+0xb64>
 80092f8:	a311      	add	r3, pc, #68	; (adr r3, 8009340 <_strtod_l+0xbf0>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f7 fc0d 	bl	8000b1c <__aeabi_dcmplt>
 8009302:	e7b4      	b.n	800926e <_strtod_l+0xb1e>
 8009304:	2300      	movs	r3, #0
 8009306:	930e      	str	r3, [sp, #56]	; 0x38
 8009308:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800930a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800930c:	6013      	str	r3, [r2, #0]
 800930e:	f7ff ba65 	b.w	80087dc <_strtod_l+0x8c>
 8009312:	2b65      	cmp	r3, #101	; 0x65
 8009314:	f43f ab5d 	beq.w	80089d2 <_strtod_l+0x282>
 8009318:	2b45      	cmp	r3, #69	; 0x45
 800931a:	f43f ab5a 	beq.w	80089d2 <_strtod_l+0x282>
 800931e:	2201      	movs	r2, #1
 8009320:	f7ff bb92 	b.w	8008a48 <_strtod_l+0x2f8>
 8009324:	f3af 8000 	nop.w
 8009328:	94a03595 	.word	0x94a03595
 800932c:	3fdfffff 	.word	0x3fdfffff
 8009330:	35afe535 	.word	0x35afe535
 8009334:	3fe00000 	.word	0x3fe00000
 8009338:	ffc00000 	.word	0xffc00000
 800933c:	41dfffff 	.word	0x41dfffff
 8009340:	94a03595 	.word	0x94a03595
 8009344:	3fcfffff 	.word	0x3fcfffff
 8009348:	3ff00000 	.word	0x3ff00000
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	7fe00000 	.word	0x7fe00000
 8009354:	7c9fffff 	.word	0x7c9fffff
 8009358:	3fe00000 	.word	0x3fe00000
 800935c:	bff00000 	.word	0xbff00000
 8009360:	7fefffff 	.word	0x7fefffff

08009364 <_strtod_r>:
 8009364:	4b01      	ldr	r3, [pc, #4]	; (800936c <_strtod_r+0x8>)
 8009366:	f7ff b9f3 	b.w	8008750 <_strtod_l>
 800936a:	bf00      	nop
 800936c:	2000007c 	.word	0x2000007c

08009370 <_strtol_l.isra.0>:
 8009370:	2b01      	cmp	r3, #1
 8009372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009376:	d001      	beq.n	800937c <_strtol_l.isra.0+0xc>
 8009378:	2b24      	cmp	r3, #36	; 0x24
 800937a:	d906      	bls.n	800938a <_strtol_l.isra.0+0x1a>
 800937c:	f7fe fafa 	bl	8007974 <__errno>
 8009380:	2316      	movs	r3, #22
 8009382:	6003      	str	r3, [r0, #0]
 8009384:	2000      	movs	r0, #0
 8009386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938a:	4f3a      	ldr	r7, [pc, #232]	; (8009474 <_strtol_l.isra.0+0x104>)
 800938c:	468e      	mov	lr, r1
 800938e:	4676      	mov	r6, lr
 8009390:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009394:	5de5      	ldrb	r5, [r4, r7]
 8009396:	f015 0508 	ands.w	r5, r5, #8
 800939a:	d1f8      	bne.n	800938e <_strtol_l.isra.0+0x1e>
 800939c:	2c2d      	cmp	r4, #45	; 0x2d
 800939e:	d134      	bne.n	800940a <_strtol_l.isra.0+0x9a>
 80093a0:	f89e 4000 	ldrb.w	r4, [lr]
 80093a4:	f04f 0801 	mov.w	r8, #1
 80093a8:	f106 0e02 	add.w	lr, r6, #2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d05c      	beq.n	800946a <_strtol_l.isra.0+0xfa>
 80093b0:	2b10      	cmp	r3, #16
 80093b2:	d10c      	bne.n	80093ce <_strtol_l.isra.0+0x5e>
 80093b4:	2c30      	cmp	r4, #48	; 0x30
 80093b6:	d10a      	bne.n	80093ce <_strtol_l.isra.0+0x5e>
 80093b8:	f89e 4000 	ldrb.w	r4, [lr]
 80093bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093c0:	2c58      	cmp	r4, #88	; 0x58
 80093c2:	d14d      	bne.n	8009460 <_strtol_l.isra.0+0xf0>
 80093c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80093c8:	2310      	movs	r3, #16
 80093ca:	f10e 0e02 	add.w	lr, lr, #2
 80093ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80093d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093d6:	2600      	movs	r6, #0
 80093d8:	fbbc f9f3 	udiv	r9, ip, r3
 80093dc:	4635      	mov	r5, r6
 80093de:	fb03 ca19 	mls	sl, r3, r9, ip
 80093e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80093e6:	2f09      	cmp	r7, #9
 80093e8:	d818      	bhi.n	800941c <_strtol_l.isra.0+0xac>
 80093ea:	463c      	mov	r4, r7
 80093ec:	42a3      	cmp	r3, r4
 80093ee:	dd24      	ble.n	800943a <_strtol_l.isra.0+0xca>
 80093f0:	2e00      	cmp	r6, #0
 80093f2:	db1f      	blt.n	8009434 <_strtol_l.isra.0+0xc4>
 80093f4:	45a9      	cmp	r9, r5
 80093f6:	d31d      	bcc.n	8009434 <_strtol_l.isra.0+0xc4>
 80093f8:	d101      	bne.n	80093fe <_strtol_l.isra.0+0x8e>
 80093fa:	45a2      	cmp	sl, r4
 80093fc:	db1a      	blt.n	8009434 <_strtol_l.isra.0+0xc4>
 80093fe:	fb05 4503 	mla	r5, r5, r3, r4
 8009402:	2601      	movs	r6, #1
 8009404:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009408:	e7eb      	b.n	80093e2 <_strtol_l.isra.0+0x72>
 800940a:	2c2b      	cmp	r4, #43	; 0x2b
 800940c:	bf08      	it	eq
 800940e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009412:	46a8      	mov	r8, r5
 8009414:	bf08      	it	eq
 8009416:	f106 0e02 	addeq.w	lr, r6, #2
 800941a:	e7c7      	b.n	80093ac <_strtol_l.isra.0+0x3c>
 800941c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009420:	2f19      	cmp	r7, #25
 8009422:	d801      	bhi.n	8009428 <_strtol_l.isra.0+0xb8>
 8009424:	3c37      	subs	r4, #55	; 0x37
 8009426:	e7e1      	b.n	80093ec <_strtol_l.isra.0+0x7c>
 8009428:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800942c:	2f19      	cmp	r7, #25
 800942e:	d804      	bhi.n	800943a <_strtol_l.isra.0+0xca>
 8009430:	3c57      	subs	r4, #87	; 0x57
 8009432:	e7db      	b.n	80093ec <_strtol_l.isra.0+0x7c>
 8009434:	f04f 36ff 	mov.w	r6, #4294967295
 8009438:	e7e4      	b.n	8009404 <_strtol_l.isra.0+0x94>
 800943a:	2e00      	cmp	r6, #0
 800943c:	da05      	bge.n	800944a <_strtol_l.isra.0+0xda>
 800943e:	2322      	movs	r3, #34	; 0x22
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	4665      	mov	r5, ip
 8009444:	b942      	cbnz	r2, 8009458 <_strtol_l.isra.0+0xe8>
 8009446:	4628      	mov	r0, r5
 8009448:	e79d      	b.n	8009386 <_strtol_l.isra.0+0x16>
 800944a:	f1b8 0f00 	cmp.w	r8, #0
 800944e:	d000      	beq.n	8009452 <_strtol_l.isra.0+0xe2>
 8009450:	426d      	negs	r5, r5
 8009452:	2a00      	cmp	r2, #0
 8009454:	d0f7      	beq.n	8009446 <_strtol_l.isra.0+0xd6>
 8009456:	b10e      	cbz	r6, 800945c <_strtol_l.isra.0+0xec>
 8009458:	f10e 31ff 	add.w	r1, lr, #4294967295
 800945c:	6011      	str	r1, [r2, #0]
 800945e:	e7f2      	b.n	8009446 <_strtol_l.isra.0+0xd6>
 8009460:	2430      	movs	r4, #48	; 0x30
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1b3      	bne.n	80093ce <_strtol_l.isra.0+0x5e>
 8009466:	2308      	movs	r3, #8
 8009468:	e7b1      	b.n	80093ce <_strtol_l.isra.0+0x5e>
 800946a:	2c30      	cmp	r4, #48	; 0x30
 800946c:	d0a4      	beq.n	80093b8 <_strtol_l.isra.0+0x48>
 800946e:	230a      	movs	r3, #10
 8009470:	e7ad      	b.n	80093ce <_strtol_l.isra.0+0x5e>
 8009472:	bf00      	nop
 8009474:	0800c2e9 	.word	0x0800c2e9

08009478 <_strtol_r>:
 8009478:	f7ff bf7a 	b.w	8009370 <_strtol_l.isra.0>

0800947c <quorem>:
 800947c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	6903      	ldr	r3, [r0, #16]
 8009482:	690c      	ldr	r4, [r1, #16]
 8009484:	42a3      	cmp	r3, r4
 8009486:	4607      	mov	r7, r0
 8009488:	f2c0 8081 	blt.w	800958e <quorem+0x112>
 800948c:	3c01      	subs	r4, #1
 800948e:	f101 0814 	add.w	r8, r1, #20
 8009492:	f100 0514 	add.w	r5, r0, #20
 8009496:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800949a:	9301      	str	r3, [sp, #4]
 800949c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094a4:	3301      	adds	r3, #1
 80094a6:	429a      	cmp	r2, r3
 80094a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80094b4:	d331      	bcc.n	800951a <quorem+0x9e>
 80094b6:	f04f 0e00 	mov.w	lr, #0
 80094ba:	4640      	mov	r0, r8
 80094bc:	46ac      	mov	ip, r5
 80094be:	46f2      	mov	sl, lr
 80094c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80094c4:	b293      	uxth	r3, r2
 80094c6:	fb06 e303 	mla	r3, r6, r3, lr
 80094ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	ebaa 0303 	sub.w	r3, sl, r3
 80094d4:	0c12      	lsrs	r2, r2, #16
 80094d6:	f8dc a000 	ldr.w	sl, [ip]
 80094da:	fb06 e202 	mla	r2, r6, r2, lr
 80094de:	fa13 f38a 	uxtah	r3, r3, sl
 80094e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80094e6:	fa1f fa82 	uxth.w	sl, r2
 80094ea:	f8dc 2000 	ldr.w	r2, [ip]
 80094ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80094f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094fc:	4581      	cmp	r9, r0
 80094fe:	f84c 3b04 	str.w	r3, [ip], #4
 8009502:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009506:	d2db      	bcs.n	80094c0 <quorem+0x44>
 8009508:	f855 300b 	ldr.w	r3, [r5, fp]
 800950c:	b92b      	cbnz	r3, 800951a <quorem+0x9e>
 800950e:	9b01      	ldr	r3, [sp, #4]
 8009510:	3b04      	subs	r3, #4
 8009512:	429d      	cmp	r5, r3
 8009514:	461a      	mov	r2, r3
 8009516:	d32e      	bcc.n	8009576 <quorem+0xfa>
 8009518:	613c      	str	r4, [r7, #16]
 800951a:	4638      	mov	r0, r7
 800951c:	f001 fc8c 	bl	800ae38 <__mcmp>
 8009520:	2800      	cmp	r0, #0
 8009522:	db24      	blt.n	800956e <quorem+0xf2>
 8009524:	3601      	adds	r6, #1
 8009526:	4628      	mov	r0, r5
 8009528:	f04f 0c00 	mov.w	ip, #0
 800952c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009530:	f8d0 e000 	ldr.w	lr, [r0]
 8009534:	b293      	uxth	r3, r2
 8009536:	ebac 0303 	sub.w	r3, ip, r3
 800953a:	0c12      	lsrs	r2, r2, #16
 800953c:	fa13 f38e 	uxtah	r3, r3, lr
 8009540:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009548:	b29b      	uxth	r3, r3
 800954a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800954e:	45c1      	cmp	r9, r8
 8009550:	f840 3b04 	str.w	r3, [r0], #4
 8009554:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009558:	d2e8      	bcs.n	800952c <quorem+0xb0>
 800955a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800955e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009562:	b922      	cbnz	r2, 800956e <quorem+0xf2>
 8009564:	3b04      	subs	r3, #4
 8009566:	429d      	cmp	r5, r3
 8009568:	461a      	mov	r2, r3
 800956a:	d30a      	bcc.n	8009582 <quorem+0x106>
 800956c:	613c      	str	r4, [r7, #16]
 800956e:	4630      	mov	r0, r6
 8009570:	b003      	add	sp, #12
 8009572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	3b04      	subs	r3, #4
 800957a:	2a00      	cmp	r2, #0
 800957c:	d1cc      	bne.n	8009518 <quorem+0x9c>
 800957e:	3c01      	subs	r4, #1
 8009580:	e7c7      	b.n	8009512 <quorem+0x96>
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	3b04      	subs	r3, #4
 8009586:	2a00      	cmp	r2, #0
 8009588:	d1f0      	bne.n	800956c <quorem+0xf0>
 800958a:	3c01      	subs	r4, #1
 800958c:	e7eb      	b.n	8009566 <quorem+0xea>
 800958e:	2000      	movs	r0, #0
 8009590:	e7ee      	b.n	8009570 <quorem+0xf4>
 8009592:	0000      	movs	r0, r0
 8009594:	0000      	movs	r0, r0
	...

08009598 <_dtoa_r>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	ed2d 8b02 	vpush	{d8}
 80095a0:	ec57 6b10 	vmov	r6, r7, d0
 80095a4:	b095      	sub	sp, #84	; 0x54
 80095a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095ac:	9105      	str	r1, [sp, #20]
 80095ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80095b2:	4604      	mov	r4, r0
 80095b4:	9209      	str	r2, [sp, #36]	; 0x24
 80095b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b8:	b975      	cbnz	r5, 80095d8 <_dtoa_r+0x40>
 80095ba:	2010      	movs	r0, #16
 80095bc:	f001 f94c 	bl	800a858 <malloc>
 80095c0:	4602      	mov	r2, r0
 80095c2:	6260      	str	r0, [r4, #36]	; 0x24
 80095c4:	b920      	cbnz	r0, 80095d0 <_dtoa_r+0x38>
 80095c6:	4bb2      	ldr	r3, [pc, #712]	; (8009890 <_dtoa_r+0x2f8>)
 80095c8:	21ea      	movs	r1, #234	; 0xea
 80095ca:	48b2      	ldr	r0, [pc, #712]	; (8009894 <_dtoa_r+0x2fc>)
 80095cc:	f002 f874 	bl	800b6b8 <__assert_func>
 80095d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80095d4:	6005      	str	r5, [r0, #0]
 80095d6:	60c5      	str	r5, [r0, #12]
 80095d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095da:	6819      	ldr	r1, [r3, #0]
 80095dc:	b151      	cbz	r1, 80095f4 <_dtoa_r+0x5c>
 80095de:	685a      	ldr	r2, [r3, #4]
 80095e0:	604a      	str	r2, [r1, #4]
 80095e2:	2301      	movs	r3, #1
 80095e4:	4093      	lsls	r3, r2
 80095e6:	608b      	str	r3, [r1, #8]
 80095e8:	4620      	mov	r0, r4
 80095ea:	f001 f99d 	bl	800a928 <_Bfree>
 80095ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095f0:	2200      	movs	r2, #0
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	1e3b      	subs	r3, r7, #0
 80095f6:	bfb9      	ittee	lt
 80095f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80095fc:	9303      	strlt	r3, [sp, #12]
 80095fe:	2300      	movge	r3, #0
 8009600:	f8c8 3000 	strge.w	r3, [r8]
 8009604:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009608:	4ba3      	ldr	r3, [pc, #652]	; (8009898 <_dtoa_r+0x300>)
 800960a:	bfbc      	itt	lt
 800960c:	2201      	movlt	r2, #1
 800960e:	f8c8 2000 	strlt.w	r2, [r8]
 8009612:	ea33 0309 	bics.w	r3, r3, r9
 8009616:	d11b      	bne.n	8009650 <_dtoa_r+0xb8>
 8009618:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800961a:	f242 730f 	movw	r3, #9999	; 0x270f
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009624:	4333      	orrs	r3, r6
 8009626:	f000 857a 	beq.w	800a11e <_dtoa_r+0xb86>
 800962a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800962c:	b963      	cbnz	r3, 8009648 <_dtoa_r+0xb0>
 800962e:	4b9b      	ldr	r3, [pc, #620]	; (800989c <_dtoa_r+0x304>)
 8009630:	e024      	b.n	800967c <_dtoa_r+0xe4>
 8009632:	4b9b      	ldr	r3, [pc, #620]	; (80098a0 <_dtoa_r+0x308>)
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	9800      	ldr	r0, [sp, #0]
 800963e:	b015      	add	sp, #84	; 0x54
 8009640:	ecbd 8b02 	vpop	{d8}
 8009644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009648:	4b94      	ldr	r3, [pc, #592]	; (800989c <_dtoa_r+0x304>)
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	3303      	adds	r3, #3
 800964e:	e7f3      	b.n	8009638 <_dtoa_r+0xa0>
 8009650:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	ec51 0b17 	vmov	r0, r1, d7
 800965a:	2300      	movs	r3, #0
 800965c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009660:	f7f7 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 8009664:	4680      	mov	r8, r0
 8009666:	b158      	cbz	r0, 8009680 <_dtoa_r+0xe8>
 8009668:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800966a:	2301      	movs	r3, #1
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 8551 	beq.w	800a118 <_dtoa_r+0xb80>
 8009676:	488b      	ldr	r0, [pc, #556]	; (80098a4 <_dtoa_r+0x30c>)
 8009678:	6018      	str	r0, [r3, #0]
 800967a:	1e43      	subs	r3, r0, #1
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	e7dd      	b.n	800963c <_dtoa_r+0xa4>
 8009680:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009684:	aa12      	add	r2, sp, #72	; 0x48
 8009686:	a913      	add	r1, sp, #76	; 0x4c
 8009688:	4620      	mov	r0, r4
 800968a:	f001 fcf5 	bl	800b078 <__d2b>
 800968e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009692:	4683      	mov	fp, r0
 8009694:	2d00      	cmp	r5, #0
 8009696:	d07c      	beq.n	8009792 <_dtoa_r+0x1fa>
 8009698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800969a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800969e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80096a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096b2:	4b7d      	ldr	r3, [pc, #500]	; (80098a8 <_dtoa_r+0x310>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	4630      	mov	r0, r6
 80096b8:	4639      	mov	r1, r7
 80096ba:	f7f6 fe05 	bl	80002c8 <__aeabi_dsub>
 80096be:	a36e      	add	r3, pc, #440	; (adr r3, 8009878 <_dtoa_r+0x2e0>)
 80096c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c4:	f7f6 ffb8 	bl	8000638 <__aeabi_dmul>
 80096c8:	a36d      	add	r3, pc, #436	; (adr r3, 8009880 <_dtoa_r+0x2e8>)
 80096ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ce:	f7f6 fdfd 	bl	80002cc <__adddf3>
 80096d2:	4606      	mov	r6, r0
 80096d4:	4628      	mov	r0, r5
 80096d6:	460f      	mov	r7, r1
 80096d8:	f7f6 ff44 	bl	8000564 <__aeabi_i2d>
 80096dc:	a36a      	add	r3, pc, #424	; (adr r3, 8009888 <_dtoa_r+0x2f0>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 ffa9 	bl	8000638 <__aeabi_dmul>
 80096e6:	4602      	mov	r2, r0
 80096e8:	460b      	mov	r3, r1
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	f7f6 fded 	bl	80002cc <__adddf3>
 80096f2:	4606      	mov	r6, r0
 80096f4:	460f      	mov	r7, r1
 80096f6:	f7f7 fa4f 	bl	8000b98 <__aeabi_d2iz>
 80096fa:	2200      	movs	r2, #0
 80096fc:	4682      	mov	sl, r0
 80096fe:	2300      	movs	r3, #0
 8009700:	4630      	mov	r0, r6
 8009702:	4639      	mov	r1, r7
 8009704:	f7f7 fa0a 	bl	8000b1c <__aeabi_dcmplt>
 8009708:	b148      	cbz	r0, 800971e <_dtoa_r+0x186>
 800970a:	4650      	mov	r0, sl
 800970c:	f7f6 ff2a 	bl	8000564 <__aeabi_i2d>
 8009710:	4632      	mov	r2, r6
 8009712:	463b      	mov	r3, r7
 8009714:	f7f7 f9f8 	bl	8000b08 <__aeabi_dcmpeq>
 8009718:	b908      	cbnz	r0, 800971e <_dtoa_r+0x186>
 800971a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800971e:	f1ba 0f16 	cmp.w	sl, #22
 8009722:	d854      	bhi.n	80097ce <_dtoa_r+0x236>
 8009724:	4b61      	ldr	r3, [pc, #388]	; (80098ac <_dtoa_r+0x314>)
 8009726:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009732:	f7f7 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d04b      	beq.n	80097d2 <_dtoa_r+0x23a>
 800973a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800973e:	2300      	movs	r3, #0
 8009740:	930e      	str	r3, [sp, #56]	; 0x38
 8009742:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009744:	1b5d      	subs	r5, r3, r5
 8009746:	1e6b      	subs	r3, r5, #1
 8009748:	9304      	str	r3, [sp, #16]
 800974a:	bf43      	ittte	mi
 800974c:	2300      	movmi	r3, #0
 800974e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009752:	9304      	strmi	r3, [sp, #16]
 8009754:	f04f 0800 	movpl.w	r8, #0
 8009758:	f1ba 0f00 	cmp.w	sl, #0
 800975c:	db3b      	blt.n	80097d6 <_dtoa_r+0x23e>
 800975e:	9b04      	ldr	r3, [sp, #16]
 8009760:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009764:	4453      	add	r3, sl
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	2300      	movs	r3, #0
 800976a:	9306      	str	r3, [sp, #24]
 800976c:	9b05      	ldr	r3, [sp, #20]
 800976e:	2b09      	cmp	r3, #9
 8009770:	d869      	bhi.n	8009846 <_dtoa_r+0x2ae>
 8009772:	2b05      	cmp	r3, #5
 8009774:	bfc4      	itt	gt
 8009776:	3b04      	subgt	r3, #4
 8009778:	9305      	strgt	r3, [sp, #20]
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	f1a3 0302 	sub.w	r3, r3, #2
 8009780:	bfcc      	ite	gt
 8009782:	2500      	movgt	r5, #0
 8009784:	2501      	movle	r5, #1
 8009786:	2b03      	cmp	r3, #3
 8009788:	d869      	bhi.n	800985e <_dtoa_r+0x2c6>
 800978a:	e8df f003 	tbb	[pc, r3]
 800978e:	4e2c      	.short	0x4e2c
 8009790:	5a4c      	.short	0x5a4c
 8009792:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009796:	441d      	add	r5, r3
 8009798:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800979c:	2b20      	cmp	r3, #32
 800979e:	bfc1      	itttt	gt
 80097a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80097ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097b0:	bfda      	itte	le
 80097b2:	f1c3 0320 	rsble	r3, r3, #32
 80097b6:	fa06 f003 	lslle.w	r0, r6, r3
 80097ba:	4318      	orrgt	r0, r3
 80097bc:	f7f6 fec2 	bl	8000544 <__aeabi_ui2d>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4606      	mov	r6, r0
 80097c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80097c8:	3d01      	subs	r5, #1
 80097ca:	9310      	str	r3, [sp, #64]	; 0x40
 80097cc:	e771      	b.n	80096b2 <_dtoa_r+0x11a>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e7b6      	b.n	8009740 <_dtoa_r+0x1a8>
 80097d2:	900e      	str	r0, [sp, #56]	; 0x38
 80097d4:	e7b5      	b.n	8009742 <_dtoa_r+0x1aa>
 80097d6:	f1ca 0300 	rsb	r3, sl, #0
 80097da:	9306      	str	r3, [sp, #24]
 80097dc:	2300      	movs	r3, #0
 80097de:	eba8 080a 	sub.w	r8, r8, sl
 80097e2:	930d      	str	r3, [sp, #52]	; 0x34
 80097e4:	e7c2      	b.n	800976c <_dtoa_r+0x1d4>
 80097e6:	2300      	movs	r3, #0
 80097e8:	9308      	str	r3, [sp, #32]
 80097ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	dc39      	bgt.n	8009864 <_dtoa_r+0x2cc>
 80097f0:	f04f 0901 	mov.w	r9, #1
 80097f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80097f8:	464b      	mov	r3, r9
 80097fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80097fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009800:	2200      	movs	r2, #0
 8009802:	6042      	str	r2, [r0, #4]
 8009804:	2204      	movs	r2, #4
 8009806:	f102 0614 	add.w	r6, r2, #20
 800980a:	429e      	cmp	r6, r3
 800980c:	6841      	ldr	r1, [r0, #4]
 800980e:	d92f      	bls.n	8009870 <_dtoa_r+0x2d8>
 8009810:	4620      	mov	r0, r4
 8009812:	f001 f849 	bl	800a8a8 <_Balloc>
 8009816:	9000      	str	r0, [sp, #0]
 8009818:	2800      	cmp	r0, #0
 800981a:	d14b      	bne.n	80098b4 <_dtoa_r+0x31c>
 800981c:	4b24      	ldr	r3, [pc, #144]	; (80098b0 <_dtoa_r+0x318>)
 800981e:	4602      	mov	r2, r0
 8009820:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009824:	e6d1      	b.n	80095ca <_dtoa_r+0x32>
 8009826:	2301      	movs	r3, #1
 8009828:	e7de      	b.n	80097e8 <_dtoa_r+0x250>
 800982a:	2300      	movs	r3, #0
 800982c:	9308      	str	r3, [sp, #32]
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	eb0a 0903 	add.w	r9, sl, r3
 8009834:	f109 0301 	add.w	r3, r9, #1
 8009838:	2b01      	cmp	r3, #1
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	bfb8      	it	lt
 800983e:	2301      	movlt	r3, #1
 8009840:	e7dd      	b.n	80097fe <_dtoa_r+0x266>
 8009842:	2301      	movs	r3, #1
 8009844:	e7f2      	b.n	800982c <_dtoa_r+0x294>
 8009846:	2501      	movs	r5, #1
 8009848:	2300      	movs	r3, #0
 800984a:	9305      	str	r3, [sp, #20]
 800984c:	9508      	str	r5, [sp, #32]
 800984e:	f04f 39ff 	mov.w	r9, #4294967295
 8009852:	2200      	movs	r2, #0
 8009854:	f8cd 9004 	str.w	r9, [sp, #4]
 8009858:	2312      	movs	r3, #18
 800985a:	9209      	str	r2, [sp, #36]	; 0x24
 800985c:	e7cf      	b.n	80097fe <_dtoa_r+0x266>
 800985e:	2301      	movs	r3, #1
 8009860:	9308      	str	r3, [sp, #32]
 8009862:	e7f4      	b.n	800984e <_dtoa_r+0x2b6>
 8009864:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009868:	f8cd 9004 	str.w	r9, [sp, #4]
 800986c:	464b      	mov	r3, r9
 800986e:	e7c6      	b.n	80097fe <_dtoa_r+0x266>
 8009870:	3101      	adds	r1, #1
 8009872:	6041      	str	r1, [r0, #4]
 8009874:	0052      	lsls	r2, r2, #1
 8009876:	e7c6      	b.n	8009806 <_dtoa_r+0x26e>
 8009878:	636f4361 	.word	0x636f4361
 800987c:	3fd287a7 	.word	0x3fd287a7
 8009880:	8b60c8b3 	.word	0x8b60c8b3
 8009884:	3fc68a28 	.word	0x3fc68a28
 8009888:	509f79fb 	.word	0x509f79fb
 800988c:	3fd34413 	.word	0x3fd34413
 8009890:	0800c3f6 	.word	0x0800c3f6
 8009894:	0800c40d 	.word	0x0800c40d
 8009898:	7ff00000 	.word	0x7ff00000
 800989c:	0800c3f2 	.word	0x0800c3f2
 80098a0:	0800c3e9 	.word	0x0800c3e9
 80098a4:	0800c26d 	.word	0x0800c26d
 80098a8:	3ff80000 	.word	0x3ff80000
 80098ac:	0800c588 	.word	0x0800c588
 80098b0:	0800c46c 	.word	0x0800c46c
 80098b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b6:	9a00      	ldr	r2, [sp, #0]
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	9b01      	ldr	r3, [sp, #4]
 80098bc:	2b0e      	cmp	r3, #14
 80098be:	f200 80ad 	bhi.w	8009a1c <_dtoa_r+0x484>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	f000 80aa 	beq.w	8009a1c <_dtoa_r+0x484>
 80098c8:	f1ba 0f00 	cmp.w	sl, #0
 80098cc:	dd36      	ble.n	800993c <_dtoa_r+0x3a4>
 80098ce:	4ac3      	ldr	r2, [pc, #780]	; (8009bdc <_dtoa_r+0x644>)
 80098d0:	f00a 030f 	and.w	r3, sl, #15
 80098d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098d8:	ed93 7b00 	vldr	d7, [r3]
 80098dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80098e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80098e4:	eeb0 8a47 	vmov.f32	s16, s14
 80098e8:	eef0 8a67 	vmov.f32	s17, s15
 80098ec:	d016      	beq.n	800991c <_dtoa_r+0x384>
 80098ee:	4bbc      	ldr	r3, [pc, #752]	; (8009be0 <_dtoa_r+0x648>)
 80098f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80098f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098f8:	f7f6 ffc8 	bl	800088c <__aeabi_ddiv>
 80098fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009900:	f007 070f 	and.w	r7, r7, #15
 8009904:	2503      	movs	r5, #3
 8009906:	4eb6      	ldr	r6, [pc, #728]	; (8009be0 <_dtoa_r+0x648>)
 8009908:	b957      	cbnz	r7, 8009920 <_dtoa_r+0x388>
 800990a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800990e:	ec53 2b18 	vmov	r2, r3, d8
 8009912:	f7f6 ffbb 	bl	800088c <__aeabi_ddiv>
 8009916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800991a:	e029      	b.n	8009970 <_dtoa_r+0x3d8>
 800991c:	2502      	movs	r5, #2
 800991e:	e7f2      	b.n	8009906 <_dtoa_r+0x36e>
 8009920:	07f9      	lsls	r1, r7, #31
 8009922:	d508      	bpl.n	8009936 <_dtoa_r+0x39e>
 8009924:	ec51 0b18 	vmov	r0, r1, d8
 8009928:	e9d6 2300 	ldrd	r2, r3, [r6]
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	ec41 0b18 	vmov	d8, r0, r1
 8009934:	3501      	adds	r5, #1
 8009936:	107f      	asrs	r7, r7, #1
 8009938:	3608      	adds	r6, #8
 800993a:	e7e5      	b.n	8009908 <_dtoa_r+0x370>
 800993c:	f000 80a6 	beq.w	8009a8c <_dtoa_r+0x4f4>
 8009940:	f1ca 0600 	rsb	r6, sl, #0
 8009944:	4ba5      	ldr	r3, [pc, #660]	; (8009bdc <_dtoa_r+0x644>)
 8009946:	4fa6      	ldr	r7, [pc, #664]	; (8009be0 <_dtoa_r+0x648>)
 8009948:	f006 020f 	and.w	r2, r6, #15
 800994c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009958:	f7f6 fe6e 	bl	8000638 <__aeabi_dmul>
 800995c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009960:	1136      	asrs	r6, r6, #4
 8009962:	2300      	movs	r3, #0
 8009964:	2502      	movs	r5, #2
 8009966:	2e00      	cmp	r6, #0
 8009968:	f040 8085 	bne.w	8009a76 <_dtoa_r+0x4de>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1d2      	bne.n	8009916 <_dtoa_r+0x37e>
 8009970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 808c 	beq.w	8009a90 <_dtoa_r+0x4f8>
 8009978:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800997c:	4b99      	ldr	r3, [pc, #612]	; (8009be4 <_dtoa_r+0x64c>)
 800997e:	2200      	movs	r2, #0
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f7 f8ca 	bl	8000b1c <__aeabi_dcmplt>
 8009988:	2800      	cmp	r0, #0
 800998a:	f000 8081 	beq.w	8009a90 <_dtoa_r+0x4f8>
 800998e:	9b01      	ldr	r3, [sp, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d07d      	beq.n	8009a90 <_dtoa_r+0x4f8>
 8009994:	f1b9 0f00 	cmp.w	r9, #0
 8009998:	dd3c      	ble.n	8009a14 <_dtoa_r+0x47c>
 800999a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	2200      	movs	r2, #0
 80099a2:	4b91      	ldr	r3, [pc, #580]	; (8009be8 <_dtoa_r+0x650>)
 80099a4:	4630      	mov	r0, r6
 80099a6:	4639      	mov	r1, r7
 80099a8:	f7f6 fe46 	bl	8000638 <__aeabi_dmul>
 80099ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099b0:	3501      	adds	r5, #1
 80099b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80099b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80099ba:	4628      	mov	r0, r5
 80099bc:	f7f6 fdd2 	bl	8000564 <__aeabi_i2d>
 80099c0:	4632      	mov	r2, r6
 80099c2:	463b      	mov	r3, r7
 80099c4:	f7f6 fe38 	bl	8000638 <__aeabi_dmul>
 80099c8:	4b88      	ldr	r3, [pc, #544]	; (8009bec <_dtoa_r+0x654>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fc7e 	bl	80002cc <__adddf3>
 80099d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80099d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099d8:	9303      	str	r3, [sp, #12]
 80099da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d15c      	bne.n	8009a9a <_dtoa_r+0x502>
 80099e0:	4b83      	ldr	r3, [pc, #524]	; (8009bf0 <_dtoa_r+0x658>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	4630      	mov	r0, r6
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7f6 fc6e 	bl	80002c8 <__aeabi_dsub>
 80099ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099f0:	4606      	mov	r6, r0
 80099f2:	460f      	mov	r7, r1
 80099f4:	f7f7 f8b0 	bl	8000b58 <__aeabi_dcmpgt>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 8296 	bne.w	8009f2a <_dtoa_r+0x992>
 80099fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009a02:	4630      	mov	r0, r6
 8009a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009a08:	4639      	mov	r1, r7
 8009a0a:	f7f7 f887 	bl	8000b1c <__aeabi_dcmplt>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	f040 8288 	bne.w	8009f24 <_dtoa_r+0x98c>
 8009a14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009a18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f2c0 8158 	blt.w	8009cd4 <_dtoa_r+0x73c>
 8009a24:	f1ba 0f0e 	cmp.w	sl, #14
 8009a28:	f300 8154 	bgt.w	8009cd4 <_dtoa_r+0x73c>
 8009a2c:	4b6b      	ldr	r3, [pc, #428]	; (8009bdc <_dtoa_r+0x644>)
 8009a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009a32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f280 80e3 	bge.w	8009c04 <_dtoa_r+0x66c>
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f300 80df 	bgt.w	8009c04 <_dtoa_r+0x66c>
 8009a46:	f040 826d 	bne.w	8009f24 <_dtoa_r+0x98c>
 8009a4a:	4b69      	ldr	r3, [pc, #420]	; (8009bf0 <_dtoa_r+0x658>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4640      	mov	r0, r8
 8009a50:	4649      	mov	r1, r9
 8009a52:	f7f6 fdf1 	bl	8000638 <__aeabi_dmul>
 8009a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a5a:	f7f7 f873 	bl	8000b44 <__aeabi_dcmpge>
 8009a5e:	9e01      	ldr	r6, [sp, #4]
 8009a60:	4637      	mov	r7, r6
 8009a62:	2800      	cmp	r0, #0
 8009a64:	f040 8243 	bne.w	8009eee <_dtoa_r+0x956>
 8009a68:	9d00      	ldr	r5, [sp, #0]
 8009a6a:	2331      	movs	r3, #49	; 0x31
 8009a6c:	f805 3b01 	strb.w	r3, [r5], #1
 8009a70:	f10a 0a01 	add.w	sl, sl, #1
 8009a74:	e23f      	b.n	8009ef6 <_dtoa_r+0x95e>
 8009a76:	07f2      	lsls	r2, r6, #31
 8009a78:	d505      	bpl.n	8009a86 <_dtoa_r+0x4ee>
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f7f6 fddb 	bl	8000638 <__aeabi_dmul>
 8009a82:	3501      	adds	r5, #1
 8009a84:	2301      	movs	r3, #1
 8009a86:	1076      	asrs	r6, r6, #1
 8009a88:	3708      	adds	r7, #8
 8009a8a:	e76c      	b.n	8009966 <_dtoa_r+0x3ce>
 8009a8c:	2502      	movs	r5, #2
 8009a8e:	e76f      	b.n	8009970 <_dtoa_r+0x3d8>
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	f8cd a01c 	str.w	sl, [sp, #28]
 8009a96:	930c      	str	r3, [sp, #48]	; 0x30
 8009a98:	e78d      	b.n	80099b6 <_dtoa_r+0x41e>
 8009a9a:	9900      	ldr	r1, [sp, #0]
 8009a9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa0:	4b4e      	ldr	r3, [pc, #312]	; (8009bdc <_dtoa_r+0x644>)
 8009aa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aa6:	4401      	add	r1, r0
 8009aa8:	9102      	str	r1, [sp, #8]
 8009aaa:	9908      	ldr	r1, [sp, #32]
 8009aac:	eeb0 8a47 	vmov.f32	s16, s14
 8009ab0:	eef0 8a67 	vmov.f32	s17, s15
 8009ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d045      	beq.n	8009b4c <_dtoa_r+0x5b4>
 8009ac0:	494c      	ldr	r1, [pc, #304]	; (8009bf4 <_dtoa_r+0x65c>)
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	f7f6 fee2 	bl	800088c <__aeabi_ddiv>
 8009ac8:	ec53 2b18 	vmov	r2, r3, d8
 8009acc:	f7f6 fbfc 	bl	80002c8 <__aeabi_dsub>
 8009ad0:	9d00      	ldr	r5, [sp, #0]
 8009ad2:	ec41 0b18 	vmov	d8, r0, r1
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7f7 f85d 	bl	8000b98 <__aeabi_d2iz>
 8009ade:	900c      	str	r0, [sp, #48]	; 0x30
 8009ae0:	f7f6 fd40 	bl	8000564 <__aeabi_i2d>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fbec 	bl	80002c8 <__aeabi_dsub>
 8009af0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009af2:	3330      	adds	r3, #48	; 0x30
 8009af4:	f805 3b01 	strb.w	r3, [r5], #1
 8009af8:	ec53 2b18 	vmov	r2, r3, d8
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	f7f7 f80c 	bl	8000b1c <__aeabi_dcmplt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d165      	bne.n	8009bd4 <_dtoa_r+0x63c>
 8009b08:	4632      	mov	r2, r6
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	4935      	ldr	r1, [pc, #212]	; (8009be4 <_dtoa_r+0x64c>)
 8009b0e:	2000      	movs	r0, #0
 8009b10:	f7f6 fbda 	bl	80002c8 <__aeabi_dsub>
 8009b14:	ec53 2b18 	vmov	r2, r3, d8
 8009b18:	f7f7 f800 	bl	8000b1c <__aeabi_dcmplt>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f040 80b9 	bne.w	8009c94 <_dtoa_r+0x6fc>
 8009b22:	9b02      	ldr	r3, [sp, #8]
 8009b24:	429d      	cmp	r5, r3
 8009b26:	f43f af75 	beq.w	8009a14 <_dtoa_r+0x47c>
 8009b2a:	4b2f      	ldr	r3, [pc, #188]	; (8009be8 <_dtoa_r+0x650>)
 8009b2c:	ec51 0b18 	vmov	r0, r1, d8
 8009b30:	2200      	movs	r2, #0
 8009b32:	f7f6 fd81 	bl	8000638 <__aeabi_dmul>
 8009b36:	4b2c      	ldr	r3, [pc, #176]	; (8009be8 <_dtoa_r+0x650>)
 8009b38:	ec41 0b18 	vmov	d8, r0, r1
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 fd79 	bl	8000638 <__aeabi_dmul>
 8009b46:	4606      	mov	r6, r0
 8009b48:	460f      	mov	r7, r1
 8009b4a:	e7c4      	b.n	8009ad6 <_dtoa_r+0x53e>
 8009b4c:	ec51 0b17 	vmov	r0, r1, d7
 8009b50:	f7f6 fd72 	bl	8000638 <__aeabi_dmul>
 8009b54:	9b02      	ldr	r3, [sp, #8]
 8009b56:	9d00      	ldr	r5, [sp, #0]
 8009b58:	930c      	str	r3, [sp, #48]	; 0x30
 8009b5a:	ec41 0b18 	vmov	d8, r0, r1
 8009b5e:	4639      	mov	r1, r7
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7f7 f819 	bl	8000b98 <__aeabi_d2iz>
 8009b66:	9011      	str	r0, [sp, #68]	; 0x44
 8009b68:	f7f6 fcfc 	bl	8000564 <__aeabi_i2d>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4630      	mov	r0, r6
 8009b72:	4639      	mov	r1, r7
 8009b74:	f7f6 fba8 	bl	80002c8 <__aeabi_dsub>
 8009b78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b7a:	3330      	adds	r3, #48	; 0x30
 8009b7c:	f805 3b01 	strb.w	r3, [r5], #1
 8009b80:	9b02      	ldr	r3, [sp, #8]
 8009b82:	429d      	cmp	r5, r3
 8009b84:	4606      	mov	r6, r0
 8009b86:	460f      	mov	r7, r1
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	d134      	bne.n	8009bf8 <_dtoa_r+0x660>
 8009b8e:	4b19      	ldr	r3, [pc, #100]	; (8009bf4 <_dtoa_r+0x65c>)
 8009b90:	ec51 0b18 	vmov	r0, r1, d8
 8009b94:	f7f6 fb9a 	bl	80002cc <__adddf3>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	4639      	mov	r1, r7
 8009ba0:	f7f6 ffda 	bl	8000b58 <__aeabi_dcmpgt>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d175      	bne.n	8009c94 <_dtoa_r+0x6fc>
 8009ba8:	ec53 2b18 	vmov	r2, r3, d8
 8009bac:	4911      	ldr	r1, [pc, #68]	; (8009bf4 <_dtoa_r+0x65c>)
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f7f6 fb8a 	bl	80002c8 <__aeabi_dsub>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4630      	mov	r0, r6
 8009bba:	4639      	mov	r1, r7
 8009bbc:	f7f6 ffae 	bl	8000b1c <__aeabi_dcmplt>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f af27 	beq.w	8009a14 <_dtoa_r+0x47c>
 8009bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bc8:	1e6b      	subs	r3, r5, #1
 8009bca:	930c      	str	r3, [sp, #48]	; 0x30
 8009bcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bd0:	2b30      	cmp	r3, #48	; 0x30
 8009bd2:	d0f8      	beq.n	8009bc6 <_dtoa_r+0x62e>
 8009bd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009bd8:	e04a      	b.n	8009c70 <_dtoa_r+0x6d8>
 8009bda:	bf00      	nop
 8009bdc:	0800c588 	.word	0x0800c588
 8009be0:	0800c560 	.word	0x0800c560
 8009be4:	3ff00000 	.word	0x3ff00000
 8009be8:	40240000 	.word	0x40240000
 8009bec:	401c0000 	.word	0x401c0000
 8009bf0:	40140000 	.word	0x40140000
 8009bf4:	3fe00000 	.word	0x3fe00000
 8009bf8:	4baf      	ldr	r3, [pc, #700]	; (8009eb8 <_dtoa_r+0x920>)
 8009bfa:	f7f6 fd1d 	bl	8000638 <__aeabi_dmul>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	460f      	mov	r7, r1
 8009c02:	e7ac      	b.n	8009b5e <_dtoa_r+0x5c6>
 8009c04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c08:	9d00      	ldr	r5, [sp, #0]
 8009c0a:	4642      	mov	r2, r8
 8009c0c:	464b      	mov	r3, r9
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fe3b 	bl	800088c <__aeabi_ddiv>
 8009c16:	f7f6 ffbf 	bl	8000b98 <__aeabi_d2iz>
 8009c1a:	9002      	str	r0, [sp, #8]
 8009c1c:	f7f6 fca2 	bl	8000564 <__aeabi_i2d>
 8009c20:	4642      	mov	r2, r8
 8009c22:	464b      	mov	r3, r9
 8009c24:	f7f6 fd08 	bl	8000638 <__aeabi_dmul>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	4639      	mov	r1, r7
 8009c30:	f7f6 fb4a 	bl	80002c8 <__aeabi_dsub>
 8009c34:	9e02      	ldr	r6, [sp, #8]
 8009c36:	9f01      	ldr	r7, [sp, #4]
 8009c38:	3630      	adds	r6, #48	; 0x30
 8009c3a:	f805 6b01 	strb.w	r6, [r5], #1
 8009c3e:	9e00      	ldr	r6, [sp, #0]
 8009c40:	1bae      	subs	r6, r5, r6
 8009c42:	42b7      	cmp	r7, r6
 8009c44:	4602      	mov	r2, r0
 8009c46:	460b      	mov	r3, r1
 8009c48:	d137      	bne.n	8009cba <_dtoa_r+0x722>
 8009c4a:	f7f6 fb3f 	bl	80002cc <__adddf3>
 8009c4e:	4642      	mov	r2, r8
 8009c50:	464b      	mov	r3, r9
 8009c52:	4606      	mov	r6, r0
 8009c54:	460f      	mov	r7, r1
 8009c56:	f7f6 ff7f 	bl	8000b58 <__aeabi_dcmpgt>
 8009c5a:	b9c8      	cbnz	r0, 8009c90 <_dtoa_r+0x6f8>
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	4630      	mov	r0, r6
 8009c62:	4639      	mov	r1, r7
 8009c64:	f7f6 ff50 	bl	8000b08 <__aeabi_dcmpeq>
 8009c68:	b110      	cbz	r0, 8009c70 <_dtoa_r+0x6d8>
 8009c6a:	9b02      	ldr	r3, [sp, #8]
 8009c6c:	07d9      	lsls	r1, r3, #31
 8009c6e:	d40f      	bmi.n	8009c90 <_dtoa_r+0x6f8>
 8009c70:	4620      	mov	r0, r4
 8009c72:	4659      	mov	r1, fp
 8009c74:	f000 fe58 	bl	800a928 <_Bfree>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	702b      	strb	r3, [r5, #0]
 8009c7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c7e:	f10a 0001 	add.w	r0, sl, #1
 8009c82:	6018      	str	r0, [r3, #0]
 8009c84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f43f acd8 	beq.w	800963c <_dtoa_r+0xa4>
 8009c8c:	601d      	str	r5, [r3, #0]
 8009c8e:	e4d5      	b.n	800963c <_dtoa_r+0xa4>
 8009c90:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c94:	462b      	mov	r3, r5
 8009c96:	461d      	mov	r5, r3
 8009c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c9c:	2a39      	cmp	r2, #57	; 0x39
 8009c9e:	d108      	bne.n	8009cb2 <_dtoa_r+0x71a>
 8009ca0:	9a00      	ldr	r2, [sp, #0]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d1f7      	bne.n	8009c96 <_dtoa_r+0x6fe>
 8009ca6:	9a07      	ldr	r2, [sp, #28]
 8009ca8:	9900      	ldr	r1, [sp, #0]
 8009caa:	3201      	adds	r2, #1
 8009cac:	9207      	str	r2, [sp, #28]
 8009cae:	2230      	movs	r2, #48	; 0x30
 8009cb0:	700a      	strb	r2, [r1, #0]
 8009cb2:	781a      	ldrb	r2, [r3, #0]
 8009cb4:	3201      	adds	r2, #1
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	e78c      	b.n	8009bd4 <_dtoa_r+0x63c>
 8009cba:	4b7f      	ldr	r3, [pc, #508]	; (8009eb8 <_dtoa_r+0x920>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f7f6 fcbb 	bl	8000638 <__aeabi_dmul>
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460f      	mov	r7, r1
 8009cca:	f7f6 ff1d 	bl	8000b08 <__aeabi_dcmpeq>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d09b      	beq.n	8009c0a <_dtoa_r+0x672>
 8009cd2:	e7cd      	b.n	8009c70 <_dtoa_r+0x6d8>
 8009cd4:	9a08      	ldr	r2, [sp, #32]
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	f000 80c4 	beq.w	8009e64 <_dtoa_r+0x8cc>
 8009cdc:	9a05      	ldr	r2, [sp, #20]
 8009cde:	2a01      	cmp	r2, #1
 8009ce0:	f300 80a8 	bgt.w	8009e34 <_dtoa_r+0x89c>
 8009ce4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	f000 80a0 	beq.w	8009e2c <_dtoa_r+0x894>
 8009cec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cf0:	9e06      	ldr	r6, [sp, #24]
 8009cf2:	4645      	mov	r5, r8
 8009cf4:	9a04      	ldr	r2, [sp, #16]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	441a      	add	r2, r3
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4498      	add	r8, r3
 8009cfe:	9204      	str	r2, [sp, #16]
 8009d00:	f000 ff18 	bl	800ab34 <__i2b>
 8009d04:	4607      	mov	r7, r0
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	dd0b      	ble.n	8009d22 <_dtoa_r+0x78a>
 8009d0a:	9b04      	ldr	r3, [sp, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dd08      	ble.n	8009d22 <_dtoa_r+0x78a>
 8009d10:	42ab      	cmp	r3, r5
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	bfa8      	it	ge
 8009d16:	462b      	movge	r3, r5
 8009d18:	eba8 0803 	sub.w	r8, r8, r3
 8009d1c:	1aed      	subs	r5, r5, r3
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9b06      	ldr	r3, [sp, #24]
 8009d24:	b1fb      	cbz	r3, 8009d66 <_dtoa_r+0x7ce>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 809f 	beq.w	8009e6c <_dtoa_r+0x8d4>
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	dd11      	ble.n	8009d56 <_dtoa_r+0x7be>
 8009d32:	4639      	mov	r1, r7
 8009d34:	4632      	mov	r2, r6
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 ffb8 	bl	800acac <__pow5mult>
 8009d3c:	465a      	mov	r2, fp
 8009d3e:	4601      	mov	r1, r0
 8009d40:	4607      	mov	r7, r0
 8009d42:	4620      	mov	r0, r4
 8009d44:	f000 ff0c 	bl	800ab60 <__multiply>
 8009d48:	4659      	mov	r1, fp
 8009d4a:	9007      	str	r0, [sp, #28]
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 fdeb 	bl	800a928 <_Bfree>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	469b      	mov	fp, r3
 8009d56:	9b06      	ldr	r3, [sp, #24]
 8009d58:	1b9a      	subs	r2, r3, r6
 8009d5a:	d004      	beq.n	8009d66 <_dtoa_r+0x7ce>
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f000 ffa4 	bl	800acac <__pow5mult>
 8009d64:	4683      	mov	fp, r0
 8009d66:	2101      	movs	r1, #1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f000 fee3 	bl	800ab34 <__i2b>
 8009d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	4606      	mov	r6, r0
 8009d74:	dd7c      	ble.n	8009e70 <_dtoa_r+0x8d8>
 8009d76:	461a      	mov	r2, r3
 8009d78:	4601      	mov	r1, r0
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 ff96 	bl	800acac <__pow5mult>
 8009d80:	9b05      	ldr	r3, [sp, #20]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	4606      	mov	r6, r0
 8009d86:	dd76      	ble.n	8009e76 <_dtoa_r+0x8de>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9306      	str	r3, [sp, #24]
 8009d8c:	6933      	ldr	r3, [r6, #16]
 8009d8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009d92:	6918      	ldr	r0, [r3, #16]
 8009d94:	f000 fe7e 	bl	800aa94 <__hi0bits>
 8009d98:	f1c0 0020 	rsb	r0, r0, #32
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	4418      	add	r0, r3
 8009da0:	f010 001f 	ands.w	r0, r0, #31
 8009da4:	f000 8086 	beq.w	8009eb4 <_dtoa_r+0x91c>
 8009da8:	f1c0 0320 	rsb	r3, r0, #32
 8009dac:	2b04      	cmp	r3, #4
 8009dae:	dd7f      	ble.n	8009eb0 <_dtoa_r+0x918>
 8009db0:	f1c0 001c 	rsb	r0, r0, #28
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	4403      	add	r3, r0
 8009db8:	4480      	add	r8, r0
 8009dba:	4405      	add	r5, r0
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	f1b8 0f00 	cmp.w	r8, #0
 8009dc2:	dd05      	ble.n	8009dd0 <_dtoa_r+0x838>
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	4642      	mov	r2, r8
 8009dc8:	4620      	mov	r0, r4
 8009dca:	f000 ffc9 	bl	800ad60 <__lshift>
 8009dce:	4683      	mov	fp, r0
 8009dd0:	9b04      	ldr	r3, [sp, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd05      	ble.n	8009de2 <_dtoa_r+0x84a>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f000 ffc0 	bl	800ad60 <__lshift>
 8009de0:	4606      	mov	r6, r0
 8009de2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d069      	beq.n	8009ebc <_dtoa_r+0x924>
 8009de8:	4631      	mov	r1, r6
 8009dea:	4658      	mov	r0, fp
 8009dec:	f001 f824 	bl	800ae38 <__mcmp>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	da63      	bge.n	8009ebc <_dtoa_r+0x924>
 8009df4:	2300      	movs	r3, #0
 8009df6:	4659      	mov	r1, fp
 8009df8:	220a      	movs	r2, #10
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fdb6 	bl	800a96c <__multadd>
 8009e00:	9b08      	ldr	r3, [sp, #32]
 8009e02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e06:	4683      	mov	fp, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 818f 	beq.w	800a12c <_dtoa_r+0xb94>
 8009e0e:	4639      	mov	r1, r7
 8009e10:	2300      	movs	r3, #0
 8009e12:	220a      	movs	r2, #10
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 fda9 	bl	800a96c <__multadd>
 8009e1a:	f1b9 0f00 	cmp.w	r9, #0
 8009e1e:	4607      	mov	r7, r0
 8009e20:	f300 808e 	bgt.w	8009f40 <_dtoa_r+0x9a8>
 8009e24:	9b05      	ldr	r3, [sp, #20]
 8009e26:	2b02      	cmp	r3, #2
 8009e28:	dc50      	bgt.n	8009ecc <_dtoa_r+0x934>
 8009e2a:	e089      	b.n	8009f40 <_dtoa_r+0x9a8>
 8009e2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e32:	e75d      	b.n	8009cf0 <_dtoa_r+0x758>
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	1e5e      	subs	r6, r3, #1
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	42b3      	cmp	r3, r6
 8009e3c:	bfbf      	itttt	lt
 8009e3e:	9b06      	ldrlt	r3, [sp, #24]
 8009e40:	9606      	strlt	r6, [sp, #24]
 8009e42:	1af2      	sublt	r2, r6, r3
 8009e44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009e46:	bfb6      	itet	lt
 8009e48:	189b      	addlt	r3, r3, r2
 8009e4a:	1b9e      	subge	r6, r3, r6
 8009e4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	bfb8      	it	lt
 8009e52:	2600      	movlt	r6, #0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bfb5      	itete	lt
 8009e58:	eba8 0503 	sublt.w	r5, r8, r3
 8009e5c:	9b01      	ldrge	r3, [sp, #4]
 8009e5e:	2300      	movlt	r3, #0
 8009e60:	4645      	movge	r5, r8
 8009e62:	e747      	b.n	8009cf4 <_dtoa_r+0x75c>
 8009e64:	9e06      	ldr	r6, [sp, #24]
 8009e66:	9f08      	ldr	r7, [sp, #32]
 8009e68:	4645      	mov	r5, r8
 8009e6a:	e74c      	b.n	8009d06 <_dtoa_r+0x76e>
 8009e6c:	9a06      	ldr	r2, [sp, #24]
 8009e6e:	e775      	b.n	8009d5c <_dtoa_r+0x7c4>
 8009e70:	9b05      	ldr	r3, [sp, #20]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	dc18      	bgt.n	8009ea8 <_dtoa_r+0x910>
 8009e76:	9b02      	ldr	r3, [sp, #8]
 8009e78:	b9b3      	cbnz	r3, 8009ea8 <_dtoa_r+0x910>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e80:	b9a3      	cbnz	r3, 8009eac <_dtoa_r+0x914>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e88:	0d1b      	lsrs	r3, r3, #20
 8009e8a:	051b      	lsls	r3, r3, #20
 8009e8c:	b12b      	cbz	r3, 8009e9a <_dtoa_r+0x902>
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	3301      	adds	r3, #1
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	f108 0801 	add.w	r8, r8, #1
 8009e98:	2301      	movs	r3, #1
 8009e9a:	9306      	str	r3, [sp, #24]
 8009e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f47f af74 	bne.w	8009d8c <_dtoa_r+0x7f4>
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	e779      	b.n	8009d9c <_dtoa_r+0x804>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e7f6      	b.n	8009e9a <_dtoa_r+0x902>
 8009eac:	9b02      	ldr	r3, [sp, #8]
 8009eae:	e7f4      	b.n	8009e9a <_dtoa_r+0x902>
 8009eb0:	d085      	beq.n	8009dbe <_dtoa_r+0x826>
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	301c      	adds	r0, #28
 8009eb6:	e77d      	b.n	8009db4 <_dtoa_r+0x81c>
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	9b01      	ldr	r3, [sp, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dc38      	bgt.n	8009f34 <_dtoa_r+0x99c>
 8009ec2:	9b05      	ldr	r3, [sp, #20]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	dd35      	ble.n	8009f34 <_dtoa_r+0x99c>
 8009ec8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009ecc:	f1b9 0f00 	cmp.w	r9, #0
 8009ed0:	d10d      	bne.n	8009eee <_dtoa_r+0x956>
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	2205      	movs	r2, #5
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fd47 	bl	800a96c <__multadd>
 8009ede:	4601      	mov	r1, r0
 8009ee0:	4606      	mov	r6, r0
 8009ee2:	4658      	mov	r0, fp
 8009ee4:	f000 ffa8 	bl	800ae38 <__mcmp>
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	f73f adbd 	bgt.w	8009a68 <_dtoa_r+0x4d0>
 8009eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef0:	9d00      	ldr	r5, [sp, #0]
 8009ef2:	ea6f 0a03 	mvn.w	sl, r3
 8009ef6:	f04f 0800 	mov.w	r8, #0
 8009efa:	4631      	mov	r1, r6
 8009efc:	4620      	mov	r0, r4
 8009efe:	f000 fd13 	bl	800a928 <_Bfree>
 8009f02:	2f00      	cmp	r7, #0
 8009f04:	f43f aeb4 	beq.w	8009c70 <_dtoa_r+0x6d8>
 8009f08:	f1b8 0f00 	cmp.w	r8, #0
 8009f0c:	d005      	beq.n	8009f1a <_dtoa_r+0x982>
 8009f0e:	45b8      	cmp	r8, r7
 8009f10:	d003      	beq.n	8009f1a <_dtoa_r+0x982>
 8009f12:	4641      	mov	r1, r8
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 fd07 	bl	800a928 <_Bfree>
 8009f1a:	4639      	mov	r1, r7
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f000 fd03 	bl	800a928 <_Bfree>
 8009f22:	e6a5      	b.n	8009c70 <_dtoa_r+0x6d8>
 8009f24:	2600      	movs	r6, #0
 8009f26:	4637      	mov	r7, r6
 8009f28:	e7e1      	b.n	8009eee <_dtoa_r+0x956>
 8009f2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009f30:	4637      	mov	r7, r6
 8009f32:	e599      	b.n	8009a68 <_dtoa_r+0x4d0>
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 80fd 	beq.w	800a13a <_dtoa_r+0xba2>
 8009f40:	2d00      	cmp	r5, #0
 8009f42:	dd05      	ble.n	8009f50 <_dtoa_r+0x9b8>
 8009f44:	4639      	mov	r1, r7
 8009f46:	462a      	mov	r2, r5
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 ff09 	bl	800ad60 <__lshift>
 8009f4e:	4607      	mov	r7, r0
 8009f50:	9b06      	ldr	r3, [sp, #24]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d05c      	beq.n	800a010 <_dtoa_r+0xa78>
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 fca5 	bl	800a8a8 <_Balloc>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	b928      	cbnz	r0, 8009f6e <_dtoa_r+0x9d6>
 8009f62:	4b80      	ldr	r3, [pc, #512]	; (800a164 <_dtoa_r+0xbcc>)
 8009f64:	4602      	mov	r2, r0
 8009f66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f6a:	f7ff bb2e 	b.w	80095ca <_dtoa_r+0x32>
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	3202      	adds	r2, #2
 8009f72:	0092      	lsls	r2, r2, #2
 8009f74:	f107 010c 	add.w	r1, r7, #12
 8009f78:	300c      	adds	r0, #12
 8009f7a:	f000 fc87 	bl	800a88c <memcpy>
 8009f7e:	2201      	movs	r2, #1
 8009f80:	4629      	mov	r1, r5
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 feec 	bl	800ad60 <__lshift>
 8009f88:	9b00      	ldr	r3, [sp, #0]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	9301      	str	r3, [sp, #4]
 8009f8e:	9b00      	ldr	r3, [sp, #0]
 8009f90:	444b      	add	r3, r9
 8009f92:	9307      	str	r3, [sp, #28]
 8009f94:	9b02      	ldr	r3, [sp, #8]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	46b8      	mov	r8, r7
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	4607      	mov	r7, r0
 8009fa0:	9b01      	ldr	r3, [sp, #4]
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	9302      	str	r3, [sp, #8]
 8009faa:	f7ff fa67 	bl	800947c <quorem>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	3330      	adds	r3, #48	; 0x30
 8009fb2:	9004      	str	r0, [sp, #16]
 8009fb4:	4641      	mov	r1, r8
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	9308      	str	r3, [sp, #32]
 8009fba:	f000 ff3d 	bl	800ae38 <__mcmp>
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4681      	mov	r9, r0
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f000 ff53 	bl	800ae70 <__mdiff>
 8009fca:	68c2      	ldr	r2, [r0, #12]
 8009fcc:	9b08      	ldr	r3, [sp, #32]
 8009fce:	4605      	mov	r5, r0
 8009fd0:	bb02      	cbnz	r2, 800a014 <_dtoa_r+0xa7c>
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4658      	mov	r0, fp
 8009fd6:	f000 ff2f 	bl	800ae38 <__mcmp>
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	4602      	mov	r2, r0
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009fe6:	f000 fc9f 	bl	800a928 <_Bfree>
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fee:	9d01      	ldr	r5, [sp, #4]
 8009ff0:	ea43 0102 	orr.w	r1, r3, r2
 8009ff4:	9b06      	ldr	r3, [sp, #24]
 8009ff6:	430b      	orrs	r3, r1
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	d10d      	bne.n	800a018 <_dtoa_r+0xa80>
 8009ffc:	2b39      	cmp	r3, #57	; 0x39
 8009ffe:	d029      	beq.n	800a054 <_dtoa_r+0xabc>
 800a000:	f1b9 0f00 	cmp.w	r9, #0
 800a004:	dd01      	ble.n	800a00a <_dtoa_r+0xa72>
 800a006:	9b04      	ldr	r3, [sp, #16]
 800a008:	3331      	adds	r3, #49	; 0x31
 800a00a:	9a02      	ldr	r2, [sp, #8]
 800a00c:	7013      	strb	r3, [r2, #0]
 800a00e:	e774      	b.n	8009efa <_dtoa_r+0x962>
 800a010:	4638      	mov	r0, r7
 800a012:	e7b9      	b.n	8009f88 <_dtoa_r+0x9f0>
 800a014:	2201      	movs	r2, #1
 800a016:	e7e2      	b.n	8009fde <_dtoa_r+0xa46>
 800a018:	f1b9 0f00 	cmp.w	r9, #0
 800a01c:	db06      	blt.n	800a02c <_dtoa_r+0xa94>
 800a01e:	9905      	ldr	r1, [sp, #20]
 800a020:	ea41 0909 	orr.w	r9, r1, r9
 800a024:	9906      	ldr	r1, [sp, #24]
 800a026:	ea59 0101 	orrs.w	r1, r9, r1
 800a02a:	d120      	bne.n	800a06e <_dtoa_r+0xad6>
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	ddec      	ble.n	800a00a <_dtoa_r+0xa72>
 800a030:	4659      	mov	r1, fp
 800a032:	2201      	movs	r2, #1
 800a034:	4620      	mov	r0, r4
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	f000 fe92 	bl	800ad60 <__lshift>
 800a03c:	4631      	mov	r1, r6
 800a03e:	4683      	mov	fp, r0
 800a040:	f000 fefa 	bl	800ae38 <__mcmp>
 800a044:	2800      	cmp	r0, #0
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	dc02      	bgt.n	800a050 <_dtoa_r+0xab8>
 800a04a:	d1de      	bne.n	800a00a <_dtoa_r+0xa72>
 800a04c:	07da      	lsls	r2, r3, #31
 800a04e:	d5dc      	bpl.n	800a00a <_dtoa_r+0xa72>
 800a050:	2b39      	cmp	r3, #57	; 0x39
 800a052:	d1d8      	bne.n	800a006 <_dtoa_r+0xa6e>
 800a054:	9a02      	ldr	r2, [sp, #8]
 800a056:	2339      	movs	r3, #57	; 0x39
 800a058:	7013      	strb	r3, [r2, #0]
 800a05a:	462b      	mov	r3, r5
 800a05c:	461d      	mov	r5, r3
 800a05e:	3b01      	subs	r3, #1
 800a060:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a064:	2a39      	cmp	r2, #57	; 0x39
 800a066:	d050      	beq.n	800a10a <_dtoa_r+0xb72>
 800a068:	3201      	adds	r2, #1
 800a06a:	701a      	strb	r2, [r3, #0]
 800a06c:	e745      	b.n	8009efa <_dtoa_r+0x962>
 800a06e:	2a00      	cmp	r2, #0
 800a070:	dd03      	ble.n	800a07a <_dtoa_r+0xae2>
 800a072:	2b39      	cmp	r3, #57	; 0x39
 800a074:	d0ee      	beq.n	800a054 <_dtoa_r+0xabc>
 800a076:	3301      	adds	r3, #1
 800a078:	e7c7      	b.n	800a00a <_dtoa_r+0xa72>
 800a07a:	9a01      	ldr	r2, [sp, #4]
 800a07c:	9907      	ldr	r1, [sp, #28]
 800a07e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a082:	428a      	cmp	r2, r1
 800a084:	d02a      	beq.n	800a0dc <_dtoa_r+0xb44>
 800a086:	4659      	mov	r1, fp
 800a088:	2300      	movs	r3, #0
 800a08a:	220a      	movs	r2, #10
 800a08c:	4620      	mov	r0, r4
 800a08e:	f000 fc6d 	bl	800a96c <__multadd>
 800a092:	45b8      	cmp	r8, r7
 800a094:	4683      	mov	fp, r0
 800a096:	f04f 0300 	mov.w	r3, #0
 800a09a:	f04f 020a 	mov.w	r2, #10
 800a09e:	4641      	mov	r1, r8
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	d107      	bne.n	800a0b4 <_dtoa_r+0xb1c>
 800a0a4:	f000 fc62 	bl	800a96c <__multadd>
 800a0a8:	4680      	mov	r8, r0
 800a0aa:	4607      	mov	r7, r0
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	e775      	b.n	8009fa0 <_dtoa_r+0xa08>
 800a0b4:	f000 fc5a 	bl	800a96c <__multadd>
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	220a      	movs	r2, #10
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fc53 	bl	800a96c <__multadd>
 800a0c6:	4607      	mov	r7, r0
 800a0c8:	e7f0      	b.n	800a0ac <_dtoa_r+0xb14>
 800a0ca:	f1b9 0f00 	cmp.w	r9, #0
 800a0ce:	9a00      	ldr	r2, [sp, #0]
 800a0d0:	bfcc      	ite	gt
 800a0d2:	464d      	movgt	r5, r9
 800a0d4:	2501      	movle	r5, #1
 800a0d6:	4415      	add	r5, r2
 800a0d8:	f04f 0800 	mov.w	r8, #0
 800a0dc:	4659      	mov	r1, fp
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	9301      	str	r3, [sp, #4]
 800a0e4:	f000 fe3c 	bl	800ad60 <__lshift>
 800a0e8:	4631      	mov	r1, r6
 800a0ea:	4683      	mov	fp, r0
 800a0ec:	f000 fea4 	bl	800ae38 <__mcmp>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	dcb2      	bgt.n	800a05a <_dtoa_r+0xac2>
 800a0f4:	d102      	bne.n	800a0fc <_dtoa_r+0xb64>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	07db      	lsls	r3, r3, #31
 800a0fa:	d4ae      	bmi.n	800a05a <_dtoa_r+0xac2>
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	461d      	mov	r5, r3
 800a100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a104:	2a30      	cmp	r2, #48	; 0x30
 800a106:	d0fa      	beq.n	800a0fe <_dtoa_r+0xb66>
 800a108:	e6f7      	b.n	8009efa <_dtoa_r+0x962>
 800a10a:	9a00      	ldr	r2, [sp, #0]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d1a5      	bne.n	800a05c <_dtoa_r+0xac4>
 800a110:	f10a 0a01 	add.w	sl, sl, #1
 800a114:	2331      	movs	r3, #49	; 0x31
 800a116:	e779      	b.n	800a00c <_dtoa_r+0xa74>
 800a118:	4b13      	ldr	r3, [pc, #76]	; (800a168 <_dtoa_r+0xbd0>)
 800a11a:	f7ff baaf 	b.w	800967c <_dtoa_r+0xe4>
 800a11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f aa86 	bne.w	8009632 <_dtoa_r+0x9a>
 800a126:	4b11      	ldr	r3, [pc, #68]	; (800a16c <_dtoa_r+0xbd4>)
 800a128:	f7ff baa8 	b.w	800967c <_dtoa_r+0xe4>
 800a12c:	f1b9 0f00 	cmp.w	r9, #0
 800a130:	dc03      	bgt.n	800a13a <_dtoa_r+0xba2>
 800a132:	9b05      	ldr	r3, [sp, #20]
 800a134:	2b02      	cmp	r3, #2
 800a136:	f73f aec9 	bgt.w	8009ecc <_dtoa_r+0x934>
 800a13a:	9d00      	ldr	r5, [sp, #0]
 800a13c:	4631      	mov	r1, r6
 800a13e:	4658      	mov	r0, fp
 800a140:	f7ff f99c 	bl	800947c <quorem>
 800a144:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a148:	f805 3b01 	strb.w	r3, [r5], #1
 800a14c:	9a00      	ldr	r2, [sp, #0]
 800a14e:	1aaa      	subs	r2, r5, r2
 800a150:	4591      	cmp	r9, r2
 800a152:	ddba      	ble.n	800a0ca <_dtoa_r+0xb32>
 800a154:	4659      	mov	r1, fp
 800a156:	2300      	movs	r3, #0
 800a158:	220a      	movs	r2, #10
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fc06 	bl	800a96c <__multadd>
 800a160:	4683      	mov	fp, r0
 800a162:	e7eb      	b.n	800a13c <_dtoa_r+0xba4>
 800a164:	0800c46c 	.word	0x0800c46c
 800a168:	0800c26c 	.word	0x0800c26c
 800a16c:	0800c3e9 	.word	0x0800c3e9

0800a170 <rshift>:
 800a170:	6903      	ldr	r3, [r0, #16]
 800a172:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a17a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a17e:	f100 0414 	add.w	r4, r0, #20
 800a182:	dd45      	ble.n	800a210 <rshift+0xa0>
 800a184:	f011 011f 	ands.w	r1, r1, #31
 800a188:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a18c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a190:	d10c      	bne.n	800a1ac <rshift+0x3c>
 800a192:	f100 0710 	add.w	r7, r0, #16
 800a196:	4629      	mov	r1, r5
 800a198:	42b1      	cmp	r1, r6
 800a19a:	d334      	bcc.n	800a206 <rshift+0x96>
 800a19c:	1a9b      	subs	r3, r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	1eea      	subs	r2, r5, #3
 800a1a2:	4296      	cmp	r6, r2
 800a1a4:	bf38      	it	cc
 800a1a6:	2300      	movcc	r3, #0
 800a1a8:	4423      	add	r3, r4
 800a1aa:	e015      	b.n	800a1d8 <rshift+0x68>
 800a1ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1b0:	f1c1 0820 	rsb	r8, r1, #32
 800a1b4:	40cf      	lsrs	r7, r1
 800a1b6:	f105 0e04 	add.w	lr, r5, #4
 800a1ba:	46a1      	mov	r9, r4
 800a1bc:	4576      	cmp	r6, lr
 800a1be:	46f4      	mov	ip, lr
 800a1c0:	d815      	bhi.n	800a1ee <rshift+0x7e>
 800a1c2:	1a9b      	subs	r3, r3, r2
 800a1c4:	009a      	lsls	r2, r3, #2
 800a1c6:	3a04      	subs	r2, #4
 800a1c8:	3501      	adds	r5, #1
 800a1ca:	42ae      	cmp	r6, r5
 800a1cc:	bf38      	it	cc
 800a1ce:	2200      	movcc	r2, #0
 800a1d0:	18a3      	adds	r3, r4, r2
 800a1d2:	50a7      	str	r7, [r4, r2]
 800a1d4:	b107      	cbz	r7, 800a1d8 <rshift+0x68>
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	1b1a      	subs	r2, r3, r4
 800a1da:	42a3      	cmp	r3, r4
 800a1dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a1e0:	bf08      	it	eq
 800a1e2:	2300      	moveq	r3, #0
 800a1e4:	6102      	str	r2, [r0, #16]
 800a1e6:	bf08      	it	eq
 800a1e8:	6143      	streq	r3, [r0, #20]
 800a1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ee:	f8dc c000 	ldr.w	ip, [ip]
 800a1f2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a1f6:	ea4c 0707 	orr.w	r7, ip, r7
 800a1fa:	f849 7b04 	str.w	r7, [r9], #4
 800a1fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a202:	40cf      	lsrs	r7, r1
 800a204:	e7da      	b.n	800a1bc <rshift+0x4c>
 800a206:	f851 cb04 	ldr.w	ip, [r1], #4
 800a20a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a20e:	e7c3      	b.n	800a198 <rshift+0x28>
 800a210:	4623      	mov	r3, r4
 800a212:	e7e1      	b.n	800a1d8 <rshift+0x68>

0800a214 <__hexdig_fun>:
 800a214:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a218:	2b09      	cmp	r3, #9
 800a21a:	d802      	bhi.n	800a222 <__hexdig_fun+0xe>
 800a21c:	3820      	subs	r0, #32
 800a21e:	b2c0      	uxtb	r0, r0
 800a220:	4770      	bx	lr
 800a222:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a226:	2b05      	cmp	r3, #5
 800a228:	d801      	bhi.n	800a22e <__hexdig_fun+0x1a>
 800a22a:	3847      	subs	r0, #71	; 0x47
 800a22c:	e7f7      	b.n	800a21e <__hexdig_fun+0xa>
 800a22e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a232:	2b05      	cmp	r3, #5
 800a234:	d801      	bhi.n	800a23a <__hexdig_fun+0x26>
 800a236:	3827      	subs	r0, #39	; 0x27
 800a238:	e7f1      	b.n	800a21e <__hexdig_fun+0xa>
 800a23a:	2000      	movs	r0, #0
 800a23c:	4770      	bx	lr
	...

0800a240 <__gethex>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ed2d 8b02 	vpush	{d8}
 800a248:	b089      	sub	sp, #36	; 0x24
 800a24a:	ee08 0a10 	vmov	s16, r0
 800a24e:	9304      	str	r3, [sp, #16]
 800a250:	4bbc      	ldr	r3, [pc, #752]	; (800a544 <__gethex+0x304>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	468b      	mov	fp, r1
 800a25a:	4690      	mov	r8, r2
 800a25c:	f7f5 ffd8 	bl	8000210 <strlen>
 800a260:	9b01      	ldr	r3, [sp, #4]
 800a262:	f8db 2000 	ldr.w	r2, [fp]
 800a266:	4403      	add	r3, r0
 800a268:	4682      	mov	sl, r0
 800a26a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a26e:	9305      	str	r3, [sp, #20]
 800a270:	1c93      	adds	r3, r2, #2
 800a272:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a276:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a27a:	32fe      	adds	r2, #254	; 0xfe
 800a27c:	18d1      	adds	r1, r2, r3
 800a27e:	461f      	mov	r7, r3
 800a280:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a284:	9100      	str	r1, [sp, #0]
 800a286:	2830      	cmp	r0, #48	; 0x30
 800a288:	d0f8      	beq.n	800a27c <__gethex+0x3c>
 800a28a:	f7ff ffc3 	bl	800a214 <__hexdig_fun>
 800a28e:	4604      	mov	r4, r0
 800a290:	2800      	cmp	r0, #0
 800a292:	d13a      	bne.n	800a30a <__gethex+0xca>
 800a294:	9901      	ldr	r1, [sp, #4]
 800a296:	4652      	mov	r2, sl
 800a298:	4638      	mov	r0, r7
 800a29a:	f001 f9ed 	bl	800b678 <strncmp>
 800a29e:	4605      	mov	r5, r0
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d168      	bne.n	800a376 <__gethex+0x136>
 800a2a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a2a8:	eb07 060a 	add.w	r6, r7, sl
 800a2ac:	f7ff ffb2 	bl	800a214 <__hexdig_fun>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	d062      	beq.n	800a37a <__gethex+0x13a>
 800a2b4:	4633      	mov	r3, r6
 800a2b6:	7818      	ldrb	r0, [r3, #0]
 800a2b8:	2830      	cmp	r0, #48	; 0x30
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	f103 0301 	add.w	r3, r3, #1
 800a2c0:	d0f9      	beq.n	800a2b6 <__gethex+0x76>
 800a2c2:	f7ff ffa7 	bl	800a214 <__hexdig_fun>
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	fab0 f480 	clz	r4, r0
 800a2cc:	0964      	lsrs	r4, r4, #5
 800a2ce:	4635      	mov	r5, r6
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	463a      	mov	r2, r7
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	3201      	adds	r2, #1
 800a2d8:	7830      	ldrb	r0, [r6, #0]
 800a2da:	f7ff ff9b 	bl	800a214 <__hexdig_fun>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1f8      	bne.n	800a2d4 <__gethex+0x94>
 800a2e2:	9901      	ldr	r1, [sp, #4]
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f001 f9c6 	bl	800b678 <strncmp>
 800a2ec:	b980      	cbnz	r0, 800a310 <__gethex+0xd0>
 800a2ee:	b94d      	cbnz	r5, 800a304 <__gethex+0xc4>
 800a2f0:	eb06 050a 	add.w	r5, r6, sl
 800a2f4:	462a      	mov	r2, r5
 800a2f6:	4616      	mov	r6, r2
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	7830      	ldrb	r0, [r6, #0]
 800a2fc:	f7ff ff8a 	bl	800a214 <__hexdig_fun>
 800a300:	2800      	cmp	r0, #0
 800a302:	d1f8      	bne.n	800a2f6 <__gethex+0xb6>
 800a304:	1bad      	subs	r5, r5, r6
 800a306:	00ad      	lsls	r5, r5, #2
 800a308:	e004      	b.n	800a314 <__gethex+0xd4>
 800a30a:	2400      	movs	r4, #0
 800a30c:	4625      	mov	r5, r4
 800a30e:	e7e0      	b.n	800a2d2 <__gethex+0x92>
 800a310:	2d00      	cmp	r5, #0
 800a312:	d1f7      	bne.n	800a304 <__gethex+0xc4>
 800a314:	7833      	ldrb	r3, [r6, #0]
 800a316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a31a:	2b50      	cmp	r3, #80	; 0x50
 800a31c:	d13b      	bne.n	800a396 <__gethex+0x156>
 800a31e:	7873      	ldrb	r3, [r6, #1]
 800a320:	2b2b      	cmp	r3, #43	; 0x2b
 800a322:	d02c      	beq.n	800a37e <__gethex+0x13e>
 800a324:	2b2d      	cmp	r3, #45	; 0x2d
 800a326:	d02e      	beq.n	800a386 <__gethex+0x146>
 800a328:	1c71      	adds	r1, r6, #1
 800a32a:	f04f 0900 	mov.w	r9, #0
 800a32e:	7808      	ldrb	r0, [r1, #0]
 800a330:	f7ff ff70 	bl	800a214 <__hexdig_fun>
 800a334:	1e43      	subs	r3, r0, #1
 800a336:	b2db      	uxtb	r3, r3
 800a338:	2b18      	cmp	r3, #24
 800a33a:	d82c      	bhi.n	800a396 <__gethex+0x156>
 800a33c:	f1a0 0210 	sub.w	r2, r0, #16
 800a340:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a344:	f7ff ff66 	bl	800a214 <__hexdig_fun>
 800a348:	1e43      	subs	r3, r0, #1
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b18      	cmp	r3, #24
 800a34e:	d91d      	bls.n	800a38c <__gethex+0x14c>
 800a350:	f1b9 0f00 	cmp.w	r9, #0
 800a354:	d000      	beq.n	800a358 <__gethex+0x118>
 800a356:	4252      	negs	r2, r2
 800a358:	4415      	add	r5, r2
 800a35a:	f8cb 1000 	str.w	r1, [fp]
 800a35e:	b1e4      	cbz	r4, 800a39a <__gethex+0x15a>
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	bf14      	ite	ne
 800a366:	2700      	movne	r7, #0
 800a368:	2706      	moveq	r7, #6
 800a36a:	4638      	mov	r0, r7
 800a36c:	b009      	add	sp, #36	; 0x24
 800a36e:	ecbd 8b02 	vpop	{d8}
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	463e      	mov	r6, r7
 800a378:	4625      	mov	r5, r4
 800a37a:	2401      	movs	r4, #1
 800a37c:	e7ca      	b.n	800a314 <__gethex+0xd4>
 800a37e:	f04f 0900 	mov.w	r9, #0
 800a382:	1cb1      	adds	r1, r6, #2
 800a384:	e7d3      	b.n	800a32e <__gethex+0xee>
 800a386:	f04f 0901 	mov.w	r9, #1
 800a38a:	e7fa      	b.n	800a382 <__gethex+0x142>
 800a38c:	230a      	movs	r3, #10
 800a38e:	fb03 0202 	mla	r2, r3, r2, r0
 800a392:	3a10      	subs	r2, #16
 800a394:	e7d4      	b.n	800a340 <__gethex+0x100>
 800a396:	4631      	mov	r1, r6
 800a398:	e7df      	b.n	800a35a <__gethex+0x11a>
 800a39a:	1bf3      	subs	r3, r6, r7
 800a39c:	3b01      	subs	r3, #1
 800a39e:	4621      	mov	r1, r4
 800a3a0:	2b07      	cmp	r3, #7
 800a3a2:	dc0b      	bgt.n	800a3bc <__gethex+0x17c>
 800a3a4:	ee18 0a10 	vmov	r0, s16
 800a3a8:	f000 fa7e 	bl	800a8a8 <_Balloc>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	b940      	cbnz	r0, 800a3c2 <__gethex+0x182>
 800a3b0:	4b65      	ldr	r3, [pc, #404]	; (800a548 <__gethex+0x308>)
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	21de      	movs	r1, #222	; 0xde
 800a3b6:	4865      	ldr	r0, [pc, #404]	; (800a54c <__gethex+0x30c>)
 800a3b8:	f001 f97e 	bl	800b6b8 <__assert_func>
 800a3bc:	3101      	adds	r1, #1
 800a3be:	105b      	asrs	r3, r3, #1
 800a3c0:	e7ee      	b.n	800a3a0 <__gethex+0x160>
 800a3c2:	f100 0914 	add.w	r9, r0, #20
 800a3c6:	f04f 0b00 	mov.w	fp, #0
 800a3ca:	f1ca 0301 	rsb	r3, sl, #1
 800a3ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3d2:	f8cd b000 	str.w	fp, [sp]
 800a3d6:	9306      	str	r3, [sp, #24]
 800a3d8:	42b7      	cmp	r7, r6
 800a3da:	d340      	bcc.n	800a45e <__gethex+0x21e>
 800a3dc:	9802      	ldr	r0, [sp, #8]
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	f840 3b04 	str.w	r3, [r0], #4
 800a3e4:	eba0 0009 	sub.w	r0, r0, r9
 800a3e8:	1080      	asrs	r0, r0, #2
 800a3ea:	0146      	lsls	r6, r0, #5
 800a3ec:	6120      	str	r0, [r4, #16]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 fb50 	bl	800aa94 <__hi0bits>
 800a3f4:	1a30      	subs	r0, r6, r0
 800a3f6:	f8d8 6000 	ldr.w	r6, [r8]
 800a3fa:	42b0      	cmp	r0, r6
 800a3fc:	dd63      	ble.n	800a4c6 <__gethex+0x286>
 800a3fe:	1b87      	subs	r7, r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	4620      	mov	r0, r4
 800a404:	f000 feea 	bl	800b1dc <__any_on>
 800a408:	4682      	mov	sl, r0
 800a40a:	b1a8      	cbz	r0, 800a438 <__gethex+0x1f8>
 800a40c:	1e7b      	subs	r3, r7, #1
 800a40e:	1159      	asrs	r1, r3, #5
 800a410:	f003 021f 	and.w	r2, r3, #31
 800a414:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a418:	f04f 0a01 	mov.w	sl, #1
 800a41c:	fa0a f202 	lsl.w	r2, sl, r2
 800a420:	420a      	tst	r2, r1
 800a422:	d009      	beq.n	800a438 <__gethex+0x1f8>
 800a424:	4553      	cmp	r3, sl
 800a426:	dd05      	ble.n	800a434 <__gethex+0x1f4>
 800a428:	1eb9      	subs	r1, r7, #2
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 fed6 	bl	800b1dc <__any_on>
 800a430:	2800      	cmp	r0, #0
 800a432:	d145      	bne.n	800a4c0 <__gethex+0x280>
 800a434:	f04f 0a02 	mov.w	sl, #2
 800a438:	4639      	mov	r1, r7
 800a43a:	4620      	mov	r0, r4
 800a43c:	f7ff fe98 	bl	800a170 <rshift>
 800a440:	443d      	add	r5, r7
 800a442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a446:	42ab      	cmp	r3, r5
 800a448:	da4c      	bge.n	800a4e4 <__gethex+0x2a4>
 800a44a:	ee18 0a10 	vmov	r0, s16
 800a44e:	4621      	mov	r1, r4
 800a450:	f000 fa6a 	bl	800a928 <_Bfree>
 800a454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a456:	2300      	movs	r3, #0
 800a458:	6013      	str	r3, [r2, #0]
 800a45a:	27a3      	movs	r7, #163	; 0xa3
 800a45c:	e785      	b.n	800a36a <__gethex+0x12a>
 800a45e:	1e73      	subs	r3, r6, #1
 800a460:	9a05      	ldr	r2, [sp, #20]
 800a462:	9303      	str	r3, [sp, #12]
 800a464:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a468:	4293      	cmp	r3, r2
 800a46a:	d019      	beq.n	800a4a0 <__gethex+0x260>
 800a46c:	f1bb 0f20 	cmp.w	fp, #32
 800a470:	d107      	bne.n	800a482 <__gethex+0x242>
 800a472:	9b02      	ldr	r3, [sp, #8]
 800a474:	9a00      	ldr	r2, [sp, #0]
 800a476:	f843 2b04 	str.w	r2, [r3], #4
 800a47a:	9302      	str	r3, [sp, #8]
 800a47c:	2300      	movs	r3, #0
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	469b      	mov	fp, r3
 800a482:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a486:	f7ff fec5 	bl	800a214 <__hexdig_fun>
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	f000 000f 	and.w	r0, r0, #15
 800a490:	fa00 f00b 	lsl.w	r0, r0, fp
 800a494:	4303      	orrs	r3, r0
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	f10b 0b04 	add.w	fp, fp, #4
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	e00d      	b.n	800a4bc <__gethex+0x27c>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	9a06      	ldr	r2, [sp, #24]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	42bb      	cmp	r3, r7
 800a4a8:	d3e0      	bcc.n	800a46c <__gethex+0x22c>
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	9901      	ldr	r1, [sp, #4]
 800a4ae:	9307      	str	r3, [sp, #28]
 800a4b0:	4652      	mov	r2, sl
 800a4b2:	f001 f8e1 	bl	800b678 <strncmp>
 800a4b6:	9b07      	ldr	r3, [sp, #28]
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d1d7      	bne.n	800a46c <__gethex+0x22c>
 800a4bc:	461e      	mov	r6, r3
 800a4be:	e78b      	b.n	800a3d8 <__gethex+0x198>
 800a4c0:	f04f 0a03 	mov.w	sl, #3
 800a4c4:	e7b8      	b.n	800a438 <__gethex+0x1f8>
 800a4c6:	da0a      	bge.n	800a4de <__gethex+0x29e>
 800a4c8:	1a37      	subs	r7, r6, r0
 800a4ca:	4621      	mov	r1, r4
 800a4cc:	ee18 0a10 	vmov	r0, s16
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	f000 fc45 	bl	800ad60 <__lshift>
 800a4d6:	1bed      	subs	r5, r5, r7
 800a4d8:	4604      	mov	r4, r0
 800a4da:	f100 0914 	add.w	r9, r0, #20
 800a4de:	f04f 0a00 	mov.w	sl, #0
 800a4e2:	e7ae      	b.n	800a442 <__gethex+0x202>
 800a4e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a4e8:	42a8      	cmp	r0, r5
 800a4ea:	dd72      	ble.n	800a5d2 <__gethex+0x392>
 800a4ec:	1b45      	subs	r5, r0, r5
 800a4ee:	42ae      	cmp	r6, r5
 800a4f0:	dc36      	bgt.n	800a560 <__gethex+0x320>
 800a4f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d02a      	beq.n	800a550 <__gethex+0x310>
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d02c      	beq.n	800a558 <__gethex+0x318>
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d115      	bne.n	800a52e <__gethex+0x2ee>
 800a502:	42ae      	cmp	r6, r5
 800a504:	d113      	bne.n	800a52e <__gethex+0x2ee>
 800a506:	2e01      	cmp	r6, #1
 800a508:	d10b      	bne.n	800a522 <__gethex+0x2e2>
 800a50a:	9a04      	ldr	r2, [sp, #16]
 800a50c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	2301      	movs	r3, #1
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	f8c9 3000 	str.w	r3, [r9]
 800a51a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a51c:	2762      	movs	r7, #98	; 0x62
 800a51e:	601c      	str	r4, [r3, #0]
 800a520:	e723      	b.n	800a36a <__gethex+0x12a>
 800a522:	1e71      	subs	r1, r6, #1
 800a524:	4620      	mov	r0, r4
 800a526:	f000 fe59 	bl	800b1dc <__any_on>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	d1ed      	bne.n	800a50a <__gethex+0x2ca>
 800a52e:	ee18 0a10 	vmov	r0, s16
 800a532:	4621      	mov	r1, r4
 800a534:	f000 f9f8 	bl	800a928 <_Bfree>
 800a538:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a53a:	2300      	movs	r3, #0
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	2750      	movs	r7, #80	; 0x50
 800a540:	e713      	b.n	800a36a <__gethex+0x12a>
 800a542:	bf00      	nop
 800a544:	0800c4e8 	.word	0x0800c4e8
 800a548:	0800c46c 	.word	0x0800c46c
 800a54c:	0800c47d 	.word	0x0800c47d
 800a550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1eb      	bne.n	800a52e <__gethex+0x2ee>
 800a556:	e7d8      	b.n	800a50a <__gethex+0x2ca>
 800a558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1d5      	bne.n	800a50a <__gethex+0x2ca>
 800a55e:	e7e6      	b.n	800a52e <__gethex+0x2ee>
 800a560:	1e6f      	subs	r7, r5, #1
 800a562:	f1ba 0f00 	cmp.w	sl, #0
 800a566:	d131      	bne.n	800a5cc <__gethex+0x38c>
 800a568:	b127      	cbz	r7, 800a574 <__gethex+0x334>
 800a56a:	4639      	mov	r1, r7
 800a56c:	4620      	mov	r0, r4
 800a56e:	f000 fe35 	bl	800b1dc <__any_on>
 800a572:	4682      	mov	sl, r0
 800a574:	117b      	asrs	r3, r7, #5
 800a576:	2101      	movs	r1, #1
 800a578:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a57c:	f007 071f 	and.w	r7, r7, #31
 800a580:	fa01 f707 	lsl.w	r7, r1, r7
 800a584:	421f      	tst	r7, r3
 800a586:	4629      	mov	r1, r5
 800a588:	4620      	mov	r0, r4
 800a58a:	bf18      	it	ne
 800a58c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a590:	1b76      	subs	r6, r6, r5
 800a592:	f7ff fded 	bl	800a170 <rshift>
 800a596:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a59a:	2702      	movs	r7, #2
 800a59c:	f1ba 0f00 	cmp.w	sl, #0
 800a5a0:	d048      	beq.n	800a634 <__gethex+0x3f4>
 800a5a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d015      	beq.n	800a5d6 <__gethex+0x396>
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d017      	beq.n	800a5de <__gethex+0x39e>
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d109      	bne.n	800a5c6 <__gethex+0x386>
 800a5b2:	f01a 0f02 	tst.w	sl, #2
 800a5b6:	d006      	beq.n	800a5c6 <__gethex+0x386>
 800a5b8:	f8d9 0000 	ldr.w	r0, [r9]
 800a5bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a5c0:	f01a 0f01 	tst.w	sl, #1
 800a5c4:	d10e      	bne.n	800a5e4 <__gethex+0x3a4>
 800a5c6:	f047 0710 	orr.w	r7, r7, #16
 800a5ca:	e033      	b.n	800a634 <__gethex+0x3f4>
 800a5cc:	f04f 0a01 	mov.w	sl, #1
 800a5d0:	e7d0      	b.n	800a574 <__gethex+0x334>
 800a5d2:	2701      	movs	r7, #1
 800a5d4:	e7e2      	b.n	800a59c <__gethex+0x35c>
 800a5d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5d8:	f1c3 0301 	rsb	r3, r3, #1
 800a5dc:	9315      	str	r3, [sp, #84]	; 0x54
 800a5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0f0      	beq.n	800a5c6 <__gethex+0x386>
 800a5e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5e8:	f104 0314 	add.w	r3, r4, #20
 800a5ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5f4:	f04f 0c00 	mov.w	ip, #0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a602:	d01c      	beq.n	800a63e <__gethex+0x3fe>
 800a604:	3201      	adds	r2, #1
 800a606:	6002      	str	r2, [r0, #0]
 800a608:	2f02      	cmp	r7, #2
 800a60a:	f104 0314 	add.w	r3, r4, #20
 800a60e:	d13f      	bne.n	800a690 <__gethex+0x450>
 800a610:	f8d8 2000 	ldr.w	r2, [r8]
 800a614:	3a01      	subs	r2, #1
 800a616:	42b2      	cmp	r2, r6
 800a618:	d10a      	bne.n	800a630 <__gethex+0x3f0>
 800a61a:	1171      	asrs	r1, r6, #5
 800a61c:	2201      	movs	r2, #1
 800a61e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a622:	f006 061f 	and.w	r6, r6, #31
 800a626:	fa02 f606 	lsl.w	r6, r2, r6
 800a62a:	421e      	tst	r6, r3
 800a62c:	bf18      	it	ne
 800a62e:	4617      	movne	r7, r2
 800a630:	f047 0720 	orr.w	r7, r7, #32
 800a634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a636:	601c      	str	r4, [r3, #0]
 800a638:	9b04      	ldr	r3, [sp, #16]
 800a63a:	601d      	str	r5, [r3, #0]
 800a63c:	e695      	b.n	800a36a <__gethex+0x12a>
 800a63e:	4299      	cmp	r1, r3
 800a640:	f843 cc04 	str.w	ip, [r3, #-4]
 800a644:	d8d8      	bhi.n	800a5f8 <__gethex+0x3b8>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	459b      	cmp	fp, r3
 800a64a:	db19      	blt.n	800a680 <__gethex+0x440>
 800a64c:	6861      	ldr	r1, [r4, #4]
 800a64e:	ee18 0a10 	vmov	r0, s16
 800a652:	3101      	adds	r1, #1
 800a654:	f000 f928 	bl	800a8a8 <_Balloc>
 800a658:	4681      	mov	r9, r0
 800a65a:	b918      	cbnz	r0, 800a664 <__gethex+0x424>
 800a65c:	4b1a      	ldr	r3, [pc, #104]	; (800a6c8 <__gethex+0x488>)
 800a65e:	4602      	mov	r2, r0
 800a660:	2184      	movs	r1, #132	; 0x84
 800a662:	e6a8      	b.n	800a3b6 <__gethex+0x176>
 800a664:	6922      	ldr	r2, [r4, #16]
 800a666:	3202      	adds	r2, #2
 800a668:	f104 010c 	add.w	r1, r4, #12
 800a66c:	0092      	lsls	r2, r2, #2
 800a66e:	300c      	adds	r0, #12
 800a670:	f000 f90c 	bl	800a88c <memcpy>
 800a674:	4621      	mov	r1, r4
 800a676:	ee18 0a10 	vmov	r0, s16
 800a67a:	f000 f955 	bl	800a928 <_Bfree>
 800a67e:	464c      	mov	r4, r9
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a688:	6122      	str	r2, [r4, #16]
 800a68a:	2201      	movs	r2, #1
 800a68c:	615a      	str	r2, [r3, #20]
 800a68e:	e7bb      	b.n	800a608 <__gethex+0x3c8>
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	455a      	cmp	r2, fp
 800a694:	dd0b      	ble.n	800a6ae <__gethex+0x46e>
 800a696:	2101      	movs	r1, #1
 800a698:	4620      	mov	r0, r4
 800a69a:	f7ff fd69 	bl	800a170 <rshift>
 800a69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a2:	3501      	adds	r5, #1
 800a6a4:	42ab      	cmp	r3, r5
 800a6a6:	f6ff aed0 	blt.w	800a44a <__gethex+0x20a>
 800a6aa:	2701      	movs	r7, #1
 800a6ac:	e7c0      	b.n	800a630 <__gethex+0x3f0>
 800a6ae:	f016 061f 	ands.w	r6, r6, #31
 800a6b2:	d0fa      	beq.n	800a6aa <__gethex+0x46a>
 800a6b4:	449a      	add	sl, r3
 800a6b6:	f1c6 0620 	rsb	r6, r6, #32
 800a6ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a6be:	f000 f9e9 	bl	800aa94 <__hi0bits>
 800a6c2:	42b0      	cmp	r0, r6
 800a6c4:	dbe7      	blt.n	800a696 <__gethex+0x456>
 800a6c6:	e7f0      	b.n	800a6aa <__gethex+0x46a>
 800a6c8:	0800c46c 	.word	0x0800c46c

0800a6cc <L_shift>:
 800a6cc:	f1c2 0208 	rsb	r2, r2, #8
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	b570      	push	{r4, r5, r6, lr}
 800a6d4:	f1c2 0620 	rsb	r6, r2, #32
 800a6d8:	6843      	ldr	r3, [r0, #4]
 800a6da:	6804      	ldr	r4, [r0, #0]
 800a6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a6e0:	432c      	orrs	r4, r5
 800a6e2:	40d3      	lsrs	r3, r2
 800a6e4:	6004      	str	r4, [r0, #0]
 800a6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6ea:	4288      	cmp	r0, r1
 800a6ec:	d3f4      	bcc.n	800a6d8 <L_shift+0xc>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}

0800a6f0 <__match>:
 800a6f0:	b530      	push	{r4, r5, lr}
 800a6f2:	6803      	ldr	r3, [r0, #0]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6fa:	b914      	cbnz	r4, 800a702 <__match+0x12>
 800a6fc:	6003      	str	r3, [r0, #0]
 800a6fe:	2001      	movs	r0, #1
 800a700:	bd30      	pop	{r4, r5, pc}
 800a702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a706:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a70a:	2d19      	cmp	r5, #25
 800a70c:	bf98      	it	ls
 800a70e:	3220      	addls	r2, #32
 800a710:	42a2      	cmp	r2, r4
 800a712:	d0f0      	beq.n	800a6f6 <__match+0x6>
 800a714:	2000      	movs	r0, #0
 800a716:	e7f3      	b.n	800a700 <__match+0x10>

0800a718 <__hexnan>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	6801      	ldr	r1, [r0, #0]
 800a720:	115e      	asrs	r6, r3, #5
 800a722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a726:	f013 031f 	ands.w	r3, r3, #31
 800a72a:	b087      	sub	sp, #28
 800a72c:	bf18      	it	ne
 800a72e:	3604      	addne	r6, #4
 800a730:	2500      	movs	r5, #0
 800a732:	1f37      	subs	r7, r6, #4
 800a734:	4682      	mov	sl, r0
 800a736:	4690      	mov	r8, r2
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a73e:	46b9      	mov	r9, r7
 800a740:	463c      	mov	r4, r7
 800a742:	9502      	str	r5, [sp, #8]
 800a744:	46ab      	mov	fp, r5
 800a746:	784a      	ldrb	r2, [r1, #1]
 800a748:	1c4b      	adds	r3, r1, #1
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	b342      	cbz	r2, 800a7a0 <__hexnan+0x88>
 800a74e:	4610      	mov	r0, r2
 800a750:	9105      	str	r1, [sp, #20]
 800a752:	9204      	str	r2, [sp, #16]
 800a754:	f7ff fd5e 	bl	800a214 <__hexdig_fun>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d14f      	bne.n	800a7fc <__hexnan+0xe4>
 800a75c:	9a04      	ldr	r2, [sp, #16]
 800a75e:	9905      	ldr	r1, [sp, #20]
 800a760:	2a20      	cmp	r2, #32
 800a762:	d818      	bhi.n	800a796 <__hexnan+0x7e>
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	459b      	cmp	fp, r3
 800a768:	dd13      	ble.n	800a792 <__hexnan+0x7a>
 800a76a:	454c      	cmp	r4, r9
 800a76c:	d206      	bcs.n	800a77c <__hexnan+0x64>
 800a76e:	2d07      	cmp	r5, #7
 800a770:	dc04      	bgt.n	800a77c <__hexnan+0x64>
 800a772:	462a      	mov	r2, r5
 800a774:	4649      	mov	r1, r9
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff ffa8 	bl	800a6cc <L_shift>
 800a77c:	4544      	cmp	r4, r8
 800a77e:	d950      	bls.n	800a822 <__hexnan+0x10a>
 800a780:	2300      	movs	r3, #0
 800a782:	f1a4 0904 	sub.w	r9, r4, #4
 800a786:	f844 3c04 	str.w	r3, [r4, #-4]
 800a78a:	f8cd b008 	str.w	fp, [sp, #8]
 800a78e:	464c      	mov	r4, r9
 800a790:	461d      	mov	r5, r3
 800a792:	9903      	ldr	r1, [sp, #12]
 800a794:	e7d7      	b.n	800a746 <__hexnan+0x2e>
 800a796:	2a29      	cmp	r2, #41	; 0x29
 800a798:	d156      	bne.n	800a848 <__hexnan+0x130>
 800a79a:	3102      	adds	r1, #2
 800a79c:	f8ca 1000 	str.w	r1, [sl]
 800a7a0:	f1bb 0f00 	cmp.w	fp, #0
 800a7a4:	d050      	beq.n	800a848 <__hexnan+0x130>
 800a7a6:	454c      	cmp	r4, r9
 800a7a8:	d206      	bcs.n	800a7b8 <__hexnan+0xa0>
 800a7aa:	2d07      	cmp	r5, #7
 800a7ac:	dc04      	bgt.n	800a7b8 <__hexnan+0xa0>
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff ff8a 	bl	800a6cc <L_shift>
 800a7b8:	4544      	cmp	r4, r8
 800a7ba:	d934      	bls.n	800a826 <__hexnan+0x10e>
 800a7bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7ca:	429f      	cmp	r7, r3
 800a7cc:	d2f9      	bcs.n	800a7c2 <__hexnan+0xaa>
 800a7ce:	1b3b      	subs	r3, r7, r4
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	3401      	adds	r4, #1
 800a7d8:	3e03      	subs	r6, #3
 800a7da:	42b4      	cmp	r4, r6
 800a7dc:	bf88      	it	hi
 800a7de:	2304      	movhi	r3, #4
 800a7e0:	4443      	add	r3, r8
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f843 2b04 	str.w	r2, [r3], #4
 800a7e8:	429f      	cmp	r7, r3
 800a7ea:	d2fb      	bcs.n	800a7e4 <__hexnan+0xcc>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	b91b      	cbnz	r3, 800a7f8 <__hexnan+0xe0>
 800a7f0:	4547      	cmp	r7, r8
 800a7f2:	d127      	bne.n	800a844 <__hexnan+0x12c>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	2005      	movs	r0, #5
 800a7fa:	e026      	b.n	800a84a <__hexnan+0x132>
 800a7fc:	3501      	adds	r5, #1
 800a7fe:	2d08      	cmp	r5, #8
 800a800:	f10b 0b01 	add.w	fp, fp, #1
 800a804:	dd06      	ble.n	800a814 <__hexnan+0xfc>
 800a806:	4544      	cmp	r4, r8
 800a808:	d9c3      	bls.n	800a792 <__hexnan+0x7a>
 800a80a:	2300      	movs	r3, #0
 800a80c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a810:	2501      	movs	r5, #1
 800a812:	3c04      	subs	r4, #4
 800a814:	6822      	ldr	r2, [r4, #0]
 800a816:	f000 000f 	and.w	r0, r0, #15
 800a81a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	e7b7      	b.n	800a792 <__hexnan+0x7a>
 800a822:	2508      	movs	r5, #8
 800a824:	e7b5      	b.n	800a792 <__hexnan+0x7a>
 800a826:	9b01      	ldr	r3, [sp, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0df      	beq.n	800a7ec <__hexnan+0xd4>
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295
 800a830:	f1c3 0320 	rsb	r3, r3, #32
 800a834:	fa22 f303 	lsr.w	r3, r2, r3
 800a838:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a83c:	401a      	ands	r2, r3
 800a83e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a842:	e7d3      	b.n	800a7ec <__hexnan+0xd4>
 800a844:	3f04      	subs	r7, #4
 800a846:	e7d1      	b.n	800a7ec <__hexnan+0xd4>
 800a848:	2004      	movs	r0, #4
 800a84a:	b007      	add	sp, #28
 800a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a850 <_localeconv_r>:
 800a850:	4800      	ldr	r0, [pc, #0]	; (800a854 <_localeconv_r+0x4>)
 800a852:	4770      	bx	lr
 800a854:	2000016c 	.word	0x2000016c

0800a858 <malloc>:
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <malloc+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f000 bd3d 	b.w	800b2dc <_malloc_r>
 800a862:	bf00      	nop
 800a864:	20000014 	.word	0x20000014

0800a868 <__ascii_mbtowc>:
 800a868:	b082      	sub	sp, #8
 800a86a:	b901      	cbnz	r1, 800a86e <__ascii_mbtowc+0x6>
 800a86c:	a901      	add	r1, sp, #4
 800a86e:	b142      	cbz	r2, 800a882 <__ascii_mbtowc+0x1a>
 800a870:	b14b      	cbz	r3, 800a886 <__ascii_mbtowc+0x1e>
 800a872:	7813      	ldrb	r3, [r2, #0]
 800a874:	600b      	str	r3, [r1, #0]
 800a876:	7812      	ldrb	r2, [r2, #0]
 800a878:	1e10      	subs	r0, r2, #0
 800a87a:	bf18      	it	ne
 800a87c:	2001      	movne	r0, #1
 800a87e:	b002      	add	sp, #8
 800a880:	4770      	bx	lr
 800a882:	4610      	mov	r0, r2
 800a884:	e7fb      	b.n	800a87e <__ascii_mbtowc+0x16>
 800a886:	f06f 0001 	mvn.w	r0, #1
 800a88a:	e7f8      	b.n	800a87e <__ascii_mbtowc+0x16>

0800a88c <memcpy>:
 800a88c:	440a      	add	r2, r1
 800a88e:	4291      	cmp	r1, r2
 800a890:	f100 33ff 	add.w	r3, r0, #4294967295
 800a894:	d100      	bne.n	800a898 <memcpy+0xc>
 800a896:	4770      	bx	lr
 800a898:	b510      	push	{r4, lr}
 800a89a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a2:	4291      	cmp	r1, r2
 800a8a4:	d1f9      	bne.n	800a89a <memcpy+0xe>
 800a8a6:	bd10      	pop	{r4, pc}

0800a8a8 <_Balloc>:
 800a8a8:	b570      	push	{r4, r5, r6, lr}
 800a8aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	460d      	mov	r5, r1
 800a8b0:	b976      	cbnz	r6, 800a8d0 <_Balloc+0x28>
 800a8b2:	2010      	movs	r0, #16
 800a8b4:	f7ff ffd0 	bl	800a858 <malloc>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a8bc:	b920      	cbnz	r0, 800a8c8 <_Balloc+0x20>
 800a8be:	4b18      	ldr	r3, [pc, #96]	; (800a920 <_Balloc+0x78>)
 800a8c0:	4818      	ldr	r0, [pc, #96]	; (800a924 <_Balloc+0x7c>)
 800a8c2:	2166      	movs	r1, #102	; 0x66
 800a8c4:	f000 fef8 	bl	800b6b8 <__assert_func>
 800a8c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8cc:	6006      	str	r6, [r0, #0]
 800a8ce:	60c6      	str	r6, [r0, #12]
 800a8d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8d2:	68f3      	ldr	r3, [r6, #12]
 800a8d4:	b183      	cbz	r3, 800a8f8 <_Balloc+0x50>
 800a8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8de:	b9b8      	cbnz	r0, 800a910 <_Balloc+0x68>
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8e6:	1d72      	adds	r2, r6, #5
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fc97 	bl	800b21e <_calloc_r>
 800a8f0:	b160      	cbz	r0, 800a90c <_Balloc+0x64>
 800a8f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8f6:	e00e      	b.n	800a916 <_Balloc+0x6e>
 800a8f8:	2221      	movs	r2, #33	; 0x21
 800a8fa:	2104      	movs	r1, #4
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 fc8e 	bl	800b21e <_calloc_r>
 800a902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a904:	60f0      	str	r0, [r6, #12]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e4      	bne.n	800a8d6 <_Balloc+0x2e>
 800a90c:	2000      	movs	r0, #0
 800a90e:	bd70      	pop	{r4, r5, r6, pc}
 800a910:	6802      	ldr	r2, [r0, #0]
 800a912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a916:	2300      	movs	r3, #0
 800a918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a91c:	e7f7      	b.n	800a90e <_Balloc+0x66>
 800a91e:	bf00      	nop
 800a920:	0800c3f6 	.word	0x0800c3f6
 800a924:	0800c4fc 	.word	0x0800c4fc

0800a928 <_Bfree>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a92c:	4605      	mov	r5, r0
 800a92e:	460c      	mov	r4, r1
 800a930:	b976      	cbnz	r6, 800a950 <_Bfree+0x28>
 800a932:	2010      	movs	r0, #16
 800a934:	f7ff ff90 	bl	800a858 <malloc>
 800a938:	4602      	mov	r2, r0
 800a93a:	6268      	str	r0, [r5, #36]	; 0x24
 800a93c:	b920      	cbnz	r0, 800a948 <_Bfree+0x20>
 800a93e:	4b09      	ldr	r3, [pc, #36]	; (800a964 <_Bfree+0x3c>)
 800a940:	4809      	ldr	r0, [pc, #36]	; (800a968 <_Bfree+0x40>)
 800a942:	218a      	movs	r1, #138	; 0x8a
 800a944:	f000 feb8 	bl	800b6b8 <__assert_func>
 800a948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a94c:	6006      	str	r6, [r0, #0]
 800a94e:	60c6      	str	r6, [r0, #12]
 800a950:	b13c      	cbz	r4, 800a962 <_Bfree+0x3a>
 800a952:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a954:	6862      	ldr	r2, [r4, #4]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a95c:	6021      	str	r1, [r4, #0]
 800a95e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	0800c3f6 	.word	0x0800c3f6
 800a968:	0800c4fc 	.word	0x0800c4fc

0800a96c <__multadd>:
 800a96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a970:	690e      	ldr	r6, [r1, #16]
 800a972:	4607      	mov	r7, r0
 800a974:	4698      	mov	r8, r3
 800a976:	460c      	mov	r4, r1
 800a978:	f101 0014 	add.w	r0, r1, #20
 800a97c:	2300      	movs	r3, #0
 800a97e:	6805      	ldr	r5, [r0, #0]
 800a980:	b2a9      	uxth	r1, r5
 800a982:	fb02 8101 	mla	r1, r2, r1, r8
 800a986:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a98a:	0c2d      	lsrs	r5, r5, #16
 800a98c:	fb02 c505 	mla	r5, r2, r5, ip
 800a990:	b289      	uxth	r1, r1
 800a992:	3301      	adds	r3, #1
 800a994:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a998:	429e      	cmp	r6, r3
 800a99a:	f840 1b04 	str.w	r1, [r0], #4
 800a99e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a9a2:	dcec      	bgt.n	800a97e <__multadd+0x12>
 800a9a4:	f1b8 0f00 	cmp.w	r8, #0
 800a9a8:	d022      	beq.n	800a9f0 <__multadd+0x84>
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	42b3      	cmp	r3, r6
 800a9ae:	dc19      	bgt.n	800a9e4 <__multadd+0x78>
 800a9b0:	6861      	ldr	r1, [r4, #4]
 800a9b2:	4638      	mov	r0, r7
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	f7ff ff77 	bl	800a8a8 <_Balloc>
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	b928      	cbnz	r0, 800a9ca <__multadd+0x5e>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	4b0d      	ldr	r3, [pc, #52]	; (800a9f8 <__multadd+0x8c>)
 800a9c2:	480e      	ldr	r0, [pc, #56]	; (800a9fc <__multadd+0x90>)
 800a9c4:	21b5      	movs	r1, #181	; 0xb5
 800a9c6:	f000 fe77 	bl	800b6b8 <__assert_func>
 800a9ca:	6922      	ldr	r2, [r4, #16]
 800a9cc:	3202      	adds	r2, #2
 800a9ce:	f104 010c 	add.w	r1, r4, #12
 800a9d2:	0092      	lsls	r2, r2, #2
 800a9d4:	300c      	adds	r0, #12
 800a9d6:	f7ff ff59 	bl	800a88c <memcpy>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4638      	mov	r0, r7
 800a9de:	f7ff ffa3 	bl	800a928 <_Bfree>
 800a9e2:	462c      	mov	r4, r5
 800a9e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	f8c3 8014 	str.w	r8, [r3, #20]
 800a9ee:	6126      	str	r6, [r4, #16]
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800c46c 	.word	0x0800c46c
 800a9fc:	0800c4fc 	.word	0x0800c4fc

0800aa00 <__s2b>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	460c      	mov	r4, r1
 800aa06:	4615      	mov	r5, r2
 800aa08:	461f      	mov	r7, r3
 800aa0a:	2209      	movs	r2, #9
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	4606      	mov	r6, r0
 800aa10:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa14:	2100      	movs	r1, #0
 800aa16:	2201      	movs	r2, #1
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	db09      	blt.n	800aa30 <__s2b+0x30>
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f7ff ff43 	bl	800a8a8 <_Balloc>
 800aa22:	b940      	cbnz	r0, 800aa36 <__s2b+0x36>
 800aa24:	4602      	mov	r2, r0
 800aa26:	4b19      	ldr	r3, [pc, #100]	; (800aa8c <__s2b+0x8c>)
 800aa28:	4819      	ldr	r0, [pc, #100]	; (800aa90 <__s2b+0x90>)
 800aa2a:	21ce      	movs	r1, #206	; 0xce
 800aa2c:	f000 fe44 	bl	800b6b8 <__assert_func>
 800aa30:	0052      	lsls	r2, r2, #1
 800aa32:	3101      	adds	r1, #1
 800aa34:	e7f0      	b.n	800aa18 <__s2b+0x18>
 800aa36:	9b08      	ldr	r3, [sp, #32]
 800aa38:	6143      	str	r3, [r0, #20]
 800aa3a:	2d09      	cmp	r5, #9
 800aa3c:	f04f 0301 	mov.w	r3, #1
 800aa40:	6103      	str	r3, [r0, #16]
 800aa42:	dd16      	ble.n	800aa72 <__s2b+0x72>
 800aa44:	f104 0909 	add.w	r9, r4, #9
 800aa48:	46c8      	mov	r8, r9
 800aa4a:	442c      	add	r4, r5
 800aa4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa50:	4601      	mov	r1, r0
 800aa52:	3b30      	subs	r3, #48	; 0x30
 800aa54:	220a      	movs	r2, #10
 800aa56:	4630      	mov	r0, r6
 800aa58:	f7ff ff88 	bl	800a96c <__multadd>
 800aa5c:	45a0      	cmp	r8, r4
 800aa5e:	d1f5      	bne.n	800aa4c <__s2b+0x4c>
 800aa60:	f1a5 0408 	sub.w	r4, r5, #8
 800aa64:	444c      	add	r4, r9
 800aa66:	1b2d      	subs	r5, r5, r4
 800aa68:	1963      	adds	r3, r4, r5
 800aa6a:	42bb      	cmp	r3, r7
 800aa6c:	db04      	blt.n	800aa78 <__s2b+0x78>
 800aa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa72:	340a      	adds	r4, #10
 800aa74:	2509      	movs	r5, #9
 800aa76:	e7f6      	b.n	800aa66 <__s2b+0x66>
 800aa78:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	3b30      	subs	r3, #48	; 0x30
 800aa80:	220a      	movs	r2, #10
 800aa82:	4630      	mov	r0, r6
 800aa84:	f7ff ff72 	bl	800a96c <__multadd>
 800aa88:	e7ee      	b.n	800aa68 <__s2b+0x68>
 800aa8a:	bf00      	nop
 800aa8c:	0800c46c 	.word	0x0800c46c
 800aa90:	0800c4fc 	.word	0x0800c4fc

0800aa94 <__hi0bits>:
 800aa94:	0c03      	lsrs	r3, r0, #16
 800aa96:	041b      	lsls	r3, r3, #16
 800aa98:	b9d3      	cbnz	r3, 800aad0 <__hi0bits+0x3c>
 800aa9a:	0400      	lsls	r0, r0, #16
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aaa2:	bf04      	itt	eq
 800aaa4:	0200      	lsleq	r0, r0, #8
 800aaa6:	3308      	addeq	r3, #8
 800aaa8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aaac:	bf04      	itt	eq
 800aaae:	0100      	lsleq	r0, r0, #4
 800aab0:	3304      	addeq	r3, #4
 800aab2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aab6:	bf04      	itt	eq
 800aab8:	0080      	lsleq	r0, r0, #2
 800aaba:	3302      	addeq	r3, #2
 800aabc:	2800      	cmp	r0, #0
 800aabe:	db05      	blt.n	800aacc <__hi0bits+0x38>
 800aac0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aac4:	f103 0301 	add.w	r3, r3, #1
 800aac8:	bf08      	it	eq
 800aaca:	2320      	moveq	r3, #32
 800aacc:	4618      	mov	r0, r3
 800aace:	4770      	bx	lr
 800aad0:	2300      	movs	r3, #0
 800aad2:	e7e4      	b.n	800aa9e <__hi0bits+0xa>

0800aad4 <__lo0bits>:
 800aad4:	6803      	ldr	r3, [r0, #0]
 800aad6:	f013 0207 	ands.w	r2, r3, #7
 800aada:	4601      	mov	r1, r0
 800aadc:	d00b      	beq.n	800aaf6 <__lo0bits+0x22>
 800aade:	07da      	lsls	r2, r3, #31
 800aae0:	d424      	bmi.n	800ab2c <__lo0bits+0x58>
 800aae2:	0798      	lsls	r0, r3, #30
 800aae4:	bf49      	itett	mi
 800aae6:	085b      	lsrmi	r3, r3, #1
 800aae8:	089b      	lsrpl	r3, r3, #2
 800aaea:	2001      	movmi	r0, #1
 800aaec:	600b      	strmi	r3, [r1, #0]
 800aaee:	bf5c      	itt	pl
 800aaf0:	600b      	strpl	r3, [r1, #0]
 800aaf2:	2002      	movpl	r0, #2
 800aaf4:	4770      	bx	lr
 800aaf6:	b298      	uxth	r0, r3
 800aaf8:	b9b0      	cbnz	r0, 800ab28 <__lo0bits+0x54>
 800aafa:	0c1b      	lsrs	r3, r3, #16
 800aafc:	2010      	movs	r0, #16
 800aafe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ab02:	bf04      	itt	eq
 800ab04:	0a1b      	lsreq	r3, r3, #8
 800ab06:	3008      	addeq	r0, #8
 800ab08:	071a      	lsls	r2, r3, #28
 800ab0a:	bf04      	itt	eq
 800ab0c:	091b      	lsreq	r3, r3, #4
 800ab0e:	3004      	addeq	r0, #4
 800ab10:	079a      	lsls	r2, r3, #30
 800ab12:	bf04      	itt	eq
 800ab14:	089b      	lsreq	r3, r3, #2
 800ab16:	3002      	addeq	r0, #2
 800ab18:	07da      	lsls	r2, r3, #31
 800ab1a:	d403      	bmi.n	800ab24 <__lo0bits+0x50>
 800ab1c:	085b      	lsrs	r3, r3, #1
 800ab1e:	f100 0001 	add.w	r0, r0, #1
 800ab22:	d005      	beq.n	800ab30 <__lo0bits+0x5c>
 800ab24:	600b      	str	r3, [r1, #0]
 800ab26:	4770      	bx	lr
 800ab28:	4610      	mov	r0, r2
 800ab2a:	e7e8      	b.n	800aafe <__lo0bits+0x2a>
 800ab2c:	2000      	movs	r0, #0
 800ab2e:	4770      	bx	lr
 800ab30:	2020      	movs	r0, #32
 800ab32:	4770      	bx	lr

0800ab34 <__i2b>:
 800ab34:	b510      	push	{r4, lr}
 800ab36:	460c      	mov	r4, r1
 800ab38:	2101      	movs	r1, #1
 800ab3a:	f7ff feb5 	bl	800a8a8 <_Balloc>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	b928      	cbnz	r0, 800ab4e <__i2b+0x1a>
 800ab42:	4b05      	ldr	r3, [pc, #20]	; (800ab58 <__i2b+0x24>)
 800ab44:	4805      	ldr	r0, [pc, #20]	; (800ab5c <__i2b+0x28>)
 800ab46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab4a:	f000 fdb5 	bl	800b6b8 <__assert_func>
 800ab4e:	2301      	movs	r3, #1
 800ab50:	6144      	str	r4, [r0, #20]
 800ab52:	6103      	str	r3, [r0, #16]
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	bf00      	nop
 800ab58:	0800c46c 	.word	0x0800c46c
 800ab5c:	0800c4fc 	.word	0x0800c4fc

0800ab60 <__multiply>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	4614      	mov	r4, r2
 800ab66:	690a      	ldr	r2, [r1, #16]
 800ab68:	6923      	ldr	r3, [r4, #16]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	bfb8      	it	lt
 800ab6e:	460b      	movlt	r3, r1
 800ab70:	460d      	mov	r5, r1
 800ab72:	bfbc      	itt	lt
 800ab74:	4625      	movlt	r5, r4
 800ab76:	461c      	movlt	r4, r3
 800ab78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ab7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab80:	68ab      	ldr	r3, [r5, #8]
 800ab82:	6869      	ldr	r1, [r5, #4]
 800ab84:	eb0a 0709 	add.w	r7, sl, r9
 800ab88:	42bb      	cmp	r3, r7
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	bfb8      	it	lt
 800ab8e:	3101      	addlt	r1, #1
 800ab90:	f7ff fe8a 	bl	800a8a8 <_Balloc>
 800ab94:	b930      	cbnz	r0, 800aba4 <__multiply+0x44>
 800ab96:	4602      	mov	r2, r0
 800ab98:	4b42      	ldr	r3, [pc, #264]	; (800aca4 <__multiply+0x144>)
 800ab9a:	4843      	ldr	r0, [pc, #268]	; (800aca8 <__multiply+0x148>)
 800ab9c:	f240 115d 	movw	r1, #349	; 0x15d
 800aba0:	f000 fd8a 	bl	800b6b8 <__assert_func>
 800aba4:	f100 0614 	add.w	r6, r0, #20
 800aba8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800abac:	4633      	mov	r3, r6
 800abae:	2200      	movs	r2, #0
 800abb0:	4543      	cmp	r3, r8
 800abb2:	d31e      	bcc.n	800abf2 <__multiply+0x92>
 800abb4:	f105 0c14 	add.w	ip, r5, #20
 800abb8:	f104 0314 	add.w	r3, r4, #20
 800abbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800abc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800abc4:	9202      	str	r2, [sp, #8]
 800abc6:	ebac 0205 	sub.w	r2, ip, r5
 800abca:	3a15      	subs	r2, #21
 800abcc:	f022 0203 	bic.w	r2, r2, #3
 800abd0:	3204      	adds	r2, #4
 800abd2:	f105 0115 	add.w	r1, r5, #21
 800abd6:	458c      	cmp	ip, r1
 800abd8:	bf38      	it	cc
 800abda:	2204      	movcc	r2, #4
 800abdc:	9201      	str	r2, [sp, #4]
 800abde:	9a02      	ldr	r2, [sp, #8]
 800abe0:	9303      	str	r3, [sp, #12]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d808      	bhi.n	800abf8 <__multiply+0x98>
 800abe6:	2f00      	cmp	r7, #0
 800abe8:	dc55      	bgt.n	800ac96 <__multiply+0x136>
 800abea:	6107      	str	r7, [r0, #16]
 800abec:	b005      	add	sp, #20
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	f843 2b04 	str.w	r2, [r3], #4
 800abf6:	e7db      	b.n	800abb0 <__multiply+0x50>
 800abf8:	f8b3 a000 	ldrh.w	sl, [r3]
 800abfc:	f1ba 0f00 	cmp.w	sl, #0
 800ac00:	d020      	beq.n	800ac44 <__multiply+0xe4>
 800ac02:	f105 0e14 	add.w	lr, r5, #20
 800ac06:	46b1      	mov	r9, r6
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ac0e:	f8d9 b000 	ldr.w	fp, [r9]
 800ac12:	b2a1      	uxth	r1, r4
 800ac14:	fa1f fb8b 	uxth.w	fp, fp
 800ac18:	fb0a b101 	mla	r1, sl, r1, fp
 800ac1c:	4411      	add	r1, r2
 800ac1e:	f8d9 2000 	ldr.w	r2, [r9]
 800ac22:	0c24      	lsrs	r4, r4, #16
 800ac24:	0c12      	lsrs	r2, r2, #16
 800ac26:	fb0a 2404 	mla	r4, sl, r4, r2
 800ac2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ac2e:	b289      	uxth	r1, r1
 800ac30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac34:	45f4      	cmp	ip, lr
 800ac36:	f849 1b04 	str.w	r1, [r9], #4
 800ac3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ac3e:	d8e4      	bhi.n	800ac0a <__multiply+0xaa>
 800ac40:	9901      	ldr	r1, [sp, #4]
 800ac42:	5072      	str	r2, [r6, r1]
 800ac44:	9a03      	ldr	r2, [sp, #12]
 800ac46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	f1b9 0f00 	cmp.w	r9, #0
 800ac50:	d01f      	beq.n	800ac92 <__multiply+0x132>
 800ac52:	6834      	ldr	r4, [r6, #0]
 800ac54:	f105 0114 	add.w	r1, r5, #20
 800ac58:	46b6      	mov	lr, r6
 800ac5a:	f04f 0a00 	mov.w	sl, #0
 800ac5e:	880a      	ldrh	r2, [r1, #0]
 800ac60:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ac64:	fb09 b202 	mla	r2, r9, r2, fp
 800ac68:	4492      	add	sl, r2
 800ac6a:	b2a4      	uxth	r4, r4
 800ac6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ac70:	f84e 4b04 	str.w	r4, [lr], #4
 800ac74:	f851 4b04 	ldr.w	r4, [r1], #4
 800ac78:	f8be 2000 	ldrh.w	r2, [lr]
 800ac7c:	0c24      	lsrs	r4, r4, #16
 800ac7e:	fb09 2404 	mla	r4, r9, r4, r2
 800ac82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ac86:	458c      	cmp	ip, r1
 800ac88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac8c:	d8e7      	bhi.n	800ac5e <__multiply+0xfe>
 800ac8e:	9a01      	ldr	r2, [sp, #4]
 800ac90:	50b4      	str	r4, [r6, r2]
 800ac92:	3604      	adds	r6, #4
 800ac94:	e7a3      	b.n	800abde <__multiply+0x7e>
 800ac96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1a5      	bne.n	800abea <__multiply+0x8a>
 800ac9e:	3f01      	subs	r7, #1
 800aca0:	e7a1      	b.n	800abe6 <__multiply+0x86>
 800aca2:	bf00      	nop
 800aca4:	0800c46c 	.word	0x0800c46c
 800aca8:	0800c4fc 	.word	0x0800c4fc

0800acac <__pow5mult>:
 800acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb0:	4615      	mov	r5, r2
 800acb2:	f012 0203 	ands.w	r2, r2, #3
 800acb6:	4606      	mov	r6, r0
 800acb8:	460f      	mov	r7, r1
 800acba:	d007      	beq.n	800accc <__pow5mult+0x20>
 800acbc:	4c25      	ldr	r4, [pc, #148]	; (800ad54 <__pow5mult+0xa8>)
 800acbe:	3a01      	subs	r2, #1
 800acc0:	2300      	movs	r3, #0
 800acc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acc6:	f7ff fe51 	bl	800a96c <__multadd>
 800acca:	4607      	mov	r7, r0
 800accc:	10ad      	asrs	r5, r5, #2
 800acce:	d03d      	beq.n	800ad4c <__pow5mult+0xa0>
 800acd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acd2:	b97c      	cbnz	r4, 800acf4 <__pow5mult+0x48>
 800acd4:	2010      	movs	r0, #16
 800acd6:	f7ff fdbf 	bl	800a858 <malloc>
 800acda:	4602      	mov	r2, r0
 800acdc:	6270      	str	r0, [r6, #36]	; 0x24
 800acde:	b928      	cbnz	r0, 800acec <__pow5mult+0x40>
 800ace0:	4b1d      	ldr	r3, [pc, #116]	; (800ad58 <__pow5mult+0xac>)
 800ace2:	481e      	ldr	r0, [pc, #120]	; (800ad5c <__pow5mult+0xb0>)
 800ace4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ace8:	f000 fce6 	bl	800b6b8 <__assert_func>
 800acec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acf0:	6004      	str	r4, [r0, #0]
 800acf2:	60c4      	str	r4, [r0, #12]
 800acf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acfc:	b94c      	cbnz	r4, 800ad12 <__pow5mult+0x66>
 800acfe:	f240 2171 	movw	r1, #625	; 0x271
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ff16 	bl	800ab34 <__i2b>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad0e:	4604      	mov	r4, r0
 800ad10:	6003      	str	r3, [r0, #0]
 800ad12:	f04f 0900 	mov.w	r9, #0
 800ad16:	07eb      	lsls	r3, r5, #31
 800ad18:	d50a      	bpl.n	800ad30 <__pow5mult+0x84>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f7ff ff1e 	bl	800ab60 <__multiply>
 800ad24:	4639      	mov	r1, r7
 800ad26:	4680      	mov	r8, r0
 800ad28:	4630      	mov	r0, r6
 800ad2a:	f7ff fdfd 	bl	800a928 <_Bfree>
 800ad2e:	4647      	mov	r7, r8
 800ad30:	106d      	asrs	r5, r5, #1
 800ad32:	d00b      	beq.n	800ad4c <__pow5mult+0xa0>
 800ad34:	6820      	ldr	r0, [r4, #0]
 800ad36:	b938      	cbnz	r0, 800ad48 <__pow5mult+0x9c>
 800ad38:	4622      	mov	r2, r4
 800ad3a:	4621      	mov	r1, r4
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	f7ff ff0f 	bl	800ab60 <__multiply>
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	f8c0 9000 	str.w	r9, [r0]
 800ad48:	4604      	mov	r4, r0
 800ad4a:	e7e4      	b.n	800ad16 <__pow5mult+0x6a>
 800ad4c:	4638      	mov	r0, r7
 800ad4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad52:	bf00      	nop
 800ad54:	0800c650 	.word	0x0800c650
 800ad58:	0800c3f6 	.word	0x0800c3f6
 800ad5c:	0800c4fc 	.word	0x0800c4fc

0800ad60 <__lshift>:
 800ad60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	460c      	mov	r4, r1
 800ad66:	6849      	ldr	r1, [r1, #4]
 800ad68:	6923      	ldr	r3, [r4, #16]
 800ad6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	4607      	mov	r7, r0
 800ad72:	4691      	mov	r9, r2
 800ad74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad78:	f108 0601 	add.w	r6, r8, #1
 800ad7c:	42b3      	cmp	r3, r6
 800ad7e:	db0b      	blt.n	800ad98 <__lshift+0x38>
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7ff fd91 	bl	800a8a8 <_Balloc>
 800ad86:	4605      	mov	r5, r0
 800ad88:	b948      	cbnz	r0, 800ad9e <__lshift+0x3e>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	4b28      	ldr	r3, [pc, #160]	; (800ae30 <__lshift+0xd0>)
 800ad8e:	4829      	ldr	r0, [pc, #164]	; (800ae34 <__lshift+0xd4>)
 800ad90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad94:	f000 fc90 	bl	800b6b8 <__assert_func>
 800ad98:	3101      	adds	r1, #1
 800ad9a:	005b      	lsls	r3, r3, #1
 800ad9c:	e7ee      	b.n	800ad7c <__lshift+0x1c>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f100 0114 	add.w	r1, r0, #20
 800ada4:	f100 0210 	add.w	r2, r0, #16
 800ada8:	4618      	mov	r0, r3
 800adaa:	4553      	cmp	r3, sl
 800adac:	db33      	blt.n	800ae16 <__lshift+0xb6>
 800adae:	6920      	ldr	r0, [r4, #16]
 800adb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adb4:	f104 0314 	add.w	r3, r4, #20
 800adb8:	f019 091f 	ands.w	r9, r9, #31
 800adbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800adc4:	d02b      	beq.n	800ae1e <__lshift+0xbe>
 800adc6:	f1c9 0e20 	rsb	lr, r9, #32
 800adca:	468a      	mov	sl, r1
 800adcc:	2200      	movs	r2, #0
 800adce:	6818      	ldr	r0, [r3, #0]
 800add0:	fa00 f009 	lsl.w	r0, r0, r9
 800add4:	4302      	orrs	r2, r0
 800add6:	f84a 2b04 	str.w	r2, [sl], #4
 800adda:	f853 2b04 	ldr.w	r2, [r3], #4
 800adde:	459c      	cmp	ip, r3
 800ade0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ade4:	d8f3      	bhi.n	800adce <__lshift+0x6e>
 800ade6:	ebac 0304 	sub.w	r3, ip, r4
 800adea:	3b15      	subs	r3, #21
 800adec:	f023 0303 	bic.w	r3, r3, #3
 800adf0:	3304      	adds	r3, #4
 800adf2:	f104 0015 	add.w	r0, r4, #21
 800adf6:	4584      	cmp	ip, r0
 800adf8:	bf38      	it	cc
 800adfa:	2304      	movcc	r3, #4
 800adfc:	50ca      	str	r2, [r1, r3]
 800adfe:	b10a      	cbz	r2, 800ae04 <__lshift+0xa4>
 800ae00:	f108 0602 	add.w	r6, r8, #2
 800ae04:	3e01      	subs	r6, #1
 800ae06:	4638      	mov	r0, r7
 800ae08:	612e      	str	r6, [r5, #16]
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	f7ff fd8c 	bl	800a928 <_Bfree>
 800ae10:	4628      	mov	r0, r5
 800ae12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	e7c5      	b.n	800adaa <__lshift+0x4a>
 800ae1e:	3904      	subs	r1, #4
 800ae20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae28:	459c      	cmp	ip, r3
 800ae2a:	d8f9      	bhi.n	800ae20 <__lshift+0xc0>
 800ae2c:	e7ea      	b.n	800ae04 <__lshift+0xa4>
 800ae2e:	bf00      	nop
 800ae30:	0800c46c 	.word	0x0800c46c
 800ae34:	0800c4fc 	.word	0x0800c4fc

0800ae38 <__mcmp>:
 800ae38:	b530      	push	{r4, r5, lr}
 800ae3a:	6902      	ldr	r2, [r0, #16]
 800ae3c:	690c      	ldr	r4, [r1, #16]
 800ae3e:	1b12      	subs	r2, r2, r4
 800ae40:	d10e      	bne.n	800ae60 <__mcmp+0x28>
 800ae42:	f100 0314 	add.w	r3, r0, #20
 800ae46:	3114      	adds	r1, #20
 800ae48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae58:	42a5      	cmp	r5, r4
 800ae5a:	d003      	beq.n	800ae64 <__mcmp+0x2c>
 800ae5c:	d305      	bcc.n	800ae6a <__mcmp+0x32>
 800ae5e:	2201      	movs	r2, #1
 800ae60:	4610      	mov	r0, r2
 800ae62:	bd30      	pop	{r4, r5, pc}
 800ae64:	4283      	cmp	r3, r0
 800ae66:	d3f3      	bcc.n	800ae50 <__mcmp+0x18>
 800ae68:	e7fa      	b.n	800ae60 <__mcmp+0x28>
 800ae6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6e:	e7f7      	b.n	800ae60 <__mcmp+0x28>

0800ae70 <__mdiff>:
 800ae70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	460c      	mov	r4, r1
 800ae76:	4606      	mov	r6, r0
 800ae78:	4611      	mov	r1, r2
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	4617      	mov	r7, r2
 800ae7e:	f7ff ffdb 	bl	800ae38 <__mcmp>
 800ae82:	1e05      	subs	r5, r0, #0
 800ae84:	d110      	bne.n	800aea8 <__mdiff+0x38>
 800ae86:	4629      	mov	r1, r5
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7ff fd0d 	bl	800a8a8 <_Balloc>
 800ae8e:	b930      	cbnz	r0, 800ae9e <__mdiff+0x2e>
 800ae90:	4b39      	ldr	r3, [pc, #228]	; (800af78 <__mdiff+0x108>)
 800ae92:	4602      	mov	r2, r0
 800ae94:	f240 2132 	movw	r1, #562	; 0x232
 800ae98:	4838      	ldr	r0, [pc, #224]	; (800af7c <__mdiff+0x10c>)
 800ae9a:	f000 fc0d 	bl	800b6b8 <__assert_func>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea8:	bfa4      	itt	ge
 800aeaa:	463b      	movge	r3, r7
 800aeac:	4627      	movge	r7, r4
 800aeae:	4630      	mov	r0, r6
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	bfa6      	itte	ge
 800aeb4:	461c      	movge	r4, r3
 800aeb6:	2500      	movge	r5, #0
 800aeb8:	2501      	movlt	r5, #1
 800aeba:	f7ff fcf5 	bl	800a8a8 <_Balloc>
 800aebe:	b920      	cbnz	r0, 800aeca <__mdiff+0x5a>
 800aec0:	4b2d      	ldr	r3, [pc, #180]	; (800af78 <__mdiff+0x108>)
 800aec2:	4602      	mov	r2, r0
 800aec4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aec8:	e7e6      	b.n	800ae98 <__mdiff+0x28>
 800aeca:	693e      	ldr	r6, [r7, #16]
 800aecc:	60c5      	str	r5, [r0, #12]
 800aece:	6925      	ldr	r5, [r4, #16]
 800aed0:	f107 0114 	add.w	r1, r7, #20
 800aed4:	f104 0914 	add.w	r9, r4, #20
 800aed8:	f100 0e14 	add.w	lr, r0, #20
 800aedc:	f107 0210 	add.w	r2, r7, #16
 800aee0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aee4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aee8:	46f2      	mov	sl, lr
 800aeea:	2700      	movs	r7, #0
 800aeec:	f859 3b04 	ldr.w	r3, [r9], #4
 800aef0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aef4:	fa1f f883 	uxth.w	r8, r3
 800aef8:	fa17 f78b 	uxtah	r7, r7, fp
 800aefc:	0c1b      	lsrs	r3, r3, #16
 800aefe:	eba7 0808 	sub.w	r8, r7, r8
 800af02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af0a:	fa1f f888 	uxth.w	r8, r8
 800af0e:	141f      	asrs	r7, r3, #16
 800af10:	454d      	cmp	r5, r9
 800af12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af16:	f84a 3b04 	str.w	r3, [sl], #4
 800af1a:	d8e7      	bhi.n	800aeec <__mdiff+0x7c>
 800af1c:	1b2b      	subs	r3, r5, r4
 800af1e:	3b15      	subs	r3, #21
 800af20:	f023 0303 	bic.w	r3, r3, #3
 800af24:	3304      	adds	r3, #4
 800af26:	3415      	adds	r4, #21
 800af28:	42a5      	cmp	r5, r4
 800af2a:	bf38      	it	cc
 800af2c:	2304      	movcc	r3, #4
 800af2e:	4419      	add	r1, r3
 800af30:	4473      	add	r3, lr
 800af32:	469e      	mov	lr, r3
 800af34:	460d      	mov	r5, r1
 800af36:	4565      	cmp	r5, ip
 800af38:	d30e      	bcc.n	800af58 <__mdiff+0xe8>
 800af3a:	f10c 0203 	add.w	r2, ip, #3
 800af3e:	1a52      	subs	r2, r2, r1
 800af40:	f022 0203 	bic.w	r2, r2, #3
 800af44:	3903      	subs	r1, #3
 800af46:	458c      	cmp	ip, r1
 800af48:	bf38      	it	cc
 800af4a:	2200      	movcc	r2, #0
 800af4c:	441a      	add	r2, r3
 800af4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af52:	b17b      	cbz	r3, 800af74 <__mdiff+0x104>
 800af54:	6106      	str	r6, [r0, #16]
 800af56:	e7a5      	b.n	800aea4 <__mdiff+0x34>
 800af58:	f855 8b04 	ldr.w	r8, [r5], #4
 800af5c:	fa17 f488 	uxtah	r4, r7, r8
 800af60:	1422      	asrs	r2, r4, #16
 800af62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800af66:	b2a4      	uxth	r4, r4
 800af68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af6c:	f84e 4b04 	str.w	r4, [lr], #4
 800af70:	1417      	asrs	r7, r2, #16
 800af72:	e7e0      	b.n	800af36 <__mdiff+0xc6>
 800af74:	3e01      	subs	r6, #1
 800af76:	e7ea      	b.n	800af4e <__mdiff+0xde>
 800af78:	0800c46c 	.word	0x0800c46c
 800af7c:	0800c4fc 	.word	0x0800c4fc

0800af80 <__ulp>:
 800af80:	b082      	sub	sp, #8
 800af82:	ed8d 0b00 	vstr	d0, [sp]
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	4912      	ldr	r1, [pc, #72]	; (800afd4 <__ulp+0x54>)
 800af8a:	4019      	ands	r1, r3
 800af8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af90:	2900      	cmp	r1, #0
 800af92:	dd05      	ble.n	800afa0 <__ulp+0x20>
 800af94:	2200      	movs	r2, #0
 800af96:	460b      	mov	r3, r1
 800af98:	ec43 2b10 	vmov	d0, r2, r3
 800af9c:	b002      	add	sp, #8
 800af9e:	4770      	bx	lr
 800afa0:	4249      	negs	r1, r1
 800afa2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800afa6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800afaa:	f04f 0200 	mov.w	r2, #0
 800afae:	f04f 0300 	mov.w	r3, #0
 800afb2:	da04      	bge.n	800afbe <__ulp+0x3e>
 800afb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800afb8:	fa41 f300 	asr.w	r3, r1, r0
 800afbc:	e7ec      	b.n	800af98 <__ulp+0x18>
 800afbe:	f1a0 0114 	sub.w	r1, r0, #20
 800afc2:	291e      	cmp	r1, #30
 800afc4:	bfda      	itte	le
 800afc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800afca:	fa20 f101 	lsrle.w	r1, r0, r1
 800afce:	2101      	movgt	r1, #1
 800afd0:	460a      	mov	r2, r1
 800afd2:	e7e1      	b.n	800af98 <__ulp+0x18>
 800afd4:	7ff00000 	.word	0x7ff00000

0800afd8 <__b2d>:
 800afd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afda:	6905      	ldr	r5, [r0, #16]
 800afdc:	f100 0714 	add.w	r7, r0, #20
 800afe0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800afe4:	1f2e      	subs	r6, r5, #4
 800afe6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afea:	4620      	mov	r0, r4
 800afec:	f7ff fd52 	bl	800aa94 <__hi0bits>
 800aff0:	f1c0 0320 	rsb	r3, r0, #32
 800aff4:	280a      	cmp	r0, #10
 800aff6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b074 <__b2d+0x9c>
 800affa:	600b      	str	r3, [r1, #0]
 800affc:	dc14      	bgt.n	800b028 <__b2d+0x50>
 800affe:	f1c0 0e0b 	rsb	lr, r0, #11
 800b002:	fa24 f10e 	lsr.w	r1, r4, lr
 800b006:	42b7      	cmp	r7, r6
 800b008:	ea41 030c 	orr.w	r3, r1, ip
 800b00c:	bf34      	ite	cc
 800b00e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b012:	2100      	movcs	r1, #0
 800b014:	3015      	adds	r0, #21
 800b016:	fa04 f000 	lsl.w	r0, r4, r0
 800b01a:	fa21 f10e 	lsr.w	r1, r1, lr
 800b01e:	ea40 0201 	orr.w	r2, r0, r1
 800b022:	ec43 2b10 	vmov	d0, r2, r3
 800b026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b028:	42b7      	cmp	r7, r6
 800b02a:	bf3a      	itte	cc
 800b02c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b030:	f1a5 0608 	subcc.w	r6, r5, #8
 800b034:	2100      	movcs	r1, #0
 800b036:	380b      	subs	r0, #11
 800b038:	d017      	beq.n	800b06a <__b2d+0x92>
 800b03a:	f1c0 0c20 	rsb	ip, r0, #32
 800b03e:	fa04 f500 	lsl.w	r5, r4, r0
 800b042:	42be      	cmp	r6, r7
 800b044:	fa21 f40c 	lsr.w	r4, r1, ip
 800b048:	ea45 0504 	orr.w	r5, r5, r4
 800b04c:	bf8c      	ite	hi
 800b04e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b052:	2400      	movls	r4, #0
 800b054:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b058:	fa01 f000 	lsl.w	r0, r1, r0
 800b05c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b064:	ea40 0204 	orr.w	r2, r0, r4
 800b068:	e7db      	b.n	800b022 <__b2d+0x4a>
 800b06a:	ea44 030c 	orr.w	r3, r4, ip
 800b06e:	460a      	mov	r2, r1
 800b070:	e7d7      	b.n	800b022 <__b2d+0x4a>
 800b072:	bf00      	nop
 800b074:	3ff00000 	.word	0x3ff00000

0800b078 <__d2b>:
 800b078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4689      	mov	r9, r1
 800b07e:	2101      	movs	r1, #1
 800b080:	ec57 6b10 	vmov	r6, r7, d0
 800b084:	4690      	mov	r8, r2
 800b086:	f7ff fc0f 	bl	800a8a8 <_Balloc>
 800b08a:	4604      	mov	r4, r0
 800b08c:	b930      	cbnz	r0, 800b09c <__d2b+0x24>
 800b08e:	4602      	mov	r2, r0
 800b090:	4b25      	ldr	r3, [pc, #148]	; (800b128 <__d2b+0xb0>)
 800b092:	4826      	ldr	r0, [pc, #152]	; (800b12c <__d2b+0xb4>)
 800b094:	f240 310a 	movw	r1, #778	; 0x30a
 800b098:	f000 fb0e 	bl	800b6b8 <__assert_func>
 800b09c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0a4:	bb35      	cbnz	r5, 800b0f4 <__d2b+0x7c>
 800b0a6:	2e00      	cmp	r6, #0
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	d028      	beq.n	800b0fe <__d2b+0x86>
 800b0ac:	4668      	mov	r0, sp
 800b0ae:	9600      	str	r6, [sp, #0]
 800b0b0:	f7ff fd10 	bl	800aad4 <__lo0bits>
 800b0b4:	9900      	ldr	r1, [sp, #0]
 800b0b6:	b300      	cbz	r0, 800b0fa <__d2b+0x82>
 800b0b8:	9a01      	ldr	r2, [sp, #4]
 800b0ba:	f1c0 0320 	rsb	r3, r0, #32
 800b0be:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c2:	430b      	orrs	r3, r1
 800b0c4:	40c2      	lsrs	r2, r0
 800b0c6:	6163      	str	r3, [r4, #20]
 800b0c8:	9201      	str	r2, [sp, #4]
 800b0ca:	9b01      	ldr	r3, [sp, #4]
 800b0cc:	61a3      	str	r3, [r4, #24]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	bf14      	ite	ne
 800b0d2:	2202      	movne	r2, #2
 800b0d4:	2201      	moveq	r2, #1
 800b0d6:	6122      	str	r2, [r4, #16]
 800b0d8:	b1d5      	cbz	r5, 800b110 <__d2b+0x98>
 800b0da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0de:	4405      	add	r5, r0
 800b0e0:	f8c9 5000 	str.w	r5, [r9]
 800b0e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0e8:	f8c8 0000 	str.w	r0, [r8]
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	b003      	add	sp, #12
 800b0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0f8:	e7d5      	b.n	800b0a6 <__d2b+0x2e>
 800b0fa:	6161      	str	r1, [r4, #20]
 800b0fc:	e7e5      	b.n	800b0ca <__d2b+0x52>
 800b0fe:	a801      	add	r0, sp, #4
 800b100:	f7ff fce8 	bl	800aad4 <__lo0bits>
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	2201      	movs	r2, #1
 800b10a:	6122      	str	r2, [r4, #16]
 800b10c:	3020      	adds	r0, #32
 800b10e:	e7e3      	b.n	800b0d8 <__d2b+0x60>
 800b110:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b114:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b118:	f8c9 0000 	str.w	r0, [r9]
 800b11c:	6918      	ldr	r0, [r3, #16]
 800b11e:	f7ff fcb9 	bl	800aa94 <__hi0bits>
 800b122:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b126:	e7df      	b.n	800b0e8 <__d2b+0x70>
 800b128:	0800c46c 	.word	0x0800c46c
 800b12c:	0800c4fc 	.word	0x0800c4fc

0800b130 <__ratio>:
 800b130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	4688      	mov	r8, r1
 800b136:	4669      	mov	r1, sp
 800b138:	4681      	mov	r9, r0
 800b13a:	f7ff ff4d 	bl	800afd8 <__b2d>
 800b13e:	a901      	add	r1, sp, #4
 800b140:	4640      	mov	r0, r8
 800b142:	ec55 4b10 	vmov	r4, r5, d0
 800b146:	f7ff ff47 	bl	800afd8 <__b2d>
 800b14a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b14e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b152:	eba3 0c02 	sub.w	ip, r3, r2
 800b156:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b15a:	1a9b      	subs	r3, r3, r2
 800b15c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b160:	ec51 0b10 	vmov	r0, r1, d0
 800b164:	2b00      	cmp	r3, #0
 800b166:	bfd6      	itet	le
 800b168:	460a      	movle	r2, r1
 800b16a:	462a      	movgt	r2, r5
 800b16c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b170:	468b      	mov	fp, r1
 800b172:	462f      	mov	r7, r5
 800b174:	bfd4      	ite	le
 800b176:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b17a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b17e:	4620      	mov	r0, r4
 800b180:	ee10 2a10 	vmov	r2, s0
 800b184:	465b      	mov	r3, fp
 800b186:	4639      	mov	r1, r7
 800b188:	f7f5 fb80 	bl	800088c <__aeabi_ddiv>
 800b18c:	ec41 0b10 	vmov	d0, r0, r1
 800b190:	b003      	add	sp, #12
 800b192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b196 <__copybits>:
 800b196:	3901      	subs	r1, #1
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	1149      	asrs	r1, r1, #5
 800b19c:	6914      	ldr	r4, [r2, #16]
 800b19e:	3101      	adds	r1, #1
 800b1a0:	f102 0314 	add.w	r3, r2, #20
 800b1a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1ac:	1f05      	subs	r5, r0, #4
 800b1ae:	42a3      	cmp	r3, r4
 800b1b0:	d30c      	bcc.n	800b1cc <__copybits+0x36>
 800b1b2:	1aa3      	subs	r3, r4, r2
 800b1b4:	3b11      	subs	r3, #17
 800b1b6:	f023 0303 	bic.w	r3, r3, #3
 800b1ba:	3211      	adds	r2, #17
 800b1bc:	42a2      	cmp	r2, r4
 800b1be:	bf88      	it	hi
 800b1c0:	2300      	movhi	r3, #0
 800b1c2:	4418      	add	r0, r3
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4288      	cmp	r0, r1
 800b1c8:	d305      	bcc.n	800b1d6 <__copybits+0x40>
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1d0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1d4:	e7eb      	b.n	800b1ae <__copybits+0x18>
 800b1d6:	f840 3b04 	str.w	r3, [r0], #4
 800b1da:	e7f4      	b.n	800b1c6 <__copybits+0x30>

0800b1dc <__any_on>:
 800b1dc:	f100 0214 	add.w	r2, r0, #20
 800b1e0:	6900      	ldr	r0, [r0, #16]
 800b1e2:	114b      	asrs	r3, r1, #5
 800b1e4:	4298      	cmp	r0, r3
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	db11      	blt.n	800b20e <__any_on+0x32>
 800b1ea:	dd0a      	ble.n	800b202 <__any_on+0x26>
 800b1ec:	f011 011f 	ands.w	r1, r1, #31
 800b1f0:	d007      	beq.n	800b202 <__any_on+0x26>
 800b1f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1f6:	fa24 f001 	lsr.w	r0, r4, r1
 800b1fa:	fa00 f101 	lsl.w	r1, r0, r1
 800b1fe:	428c      	cmp	r4, r1
 800b200:	d10b      	bne.n	800b21a <__any_on+0x3e>
 800b202:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b206:	4293      	cmp	r3, r2
 800b208:	d803      	bhi.n	800b212 <__any_on+0x36>
 800b20a:	2000      	movs	r0, #0
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	4603      	mov	r3, r0
 800b210:	e7f7      	b.n	800b202 <__any_on+0x26>
 800b212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b216:	2900      	cmp	r1, #0
 800b218:	d0f5      	beq.n	800b206 <__any_on+0x2a>
 800b21a:	2001      	movs	r0, #1
 800b21c:	e7f6      	b.n	800b20c <__any_on+0x30>

0800b21e <_calloc_r>:
 800b21e:	b513      	push	{r0, r1, r4, lr}
 800b220:	434a      	muls	r2, r1
 800b222:	4611      	mov	r1, r2
 800b224:	9201      	str	r2, [sp, #4]
 800b226:	f000 f859 	bl	800b2dc <_malloc_r>
 800b22a:	4604      	mov	r4, r0
 800b22c:	b118      	cbz	r0, 800b236 <_calloc_r+0x18>
 800b22e:	9a01      	ldr	r2, [sp, #4]
 800b230:	2100      	movs	r1, #0
 800b232:	f7fc fbc9 	bl	80079c8 <memset>
 800b236:	4620      	mov	r0, r4
 800b238:	b002      	add	sp, #8
 800b23a:	bd10      	pop	{r4, pc}

0800b23c <_free_r>:
 800b23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b23e:	2900      	cmp	r1, #0
 800b240:	d048      	beq.n	800b2d4 <_free_r+0x98>
 800b242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b246:	9001      	str	r0, [sp, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	f1a1 0404 	sub.w	r4, r1, #4
 800b24e:	bfb8      	it	lt
 800b250:	18e4      	addlt	r4, r4, r3
 800b252:	f000 fa7b 	bl	800b74c <__malloc_lock>
 800b256:	4a20      	ldr	r2, [pc, #128]	; (800b2d8 <_free_r+0x9c>)
 800b258:	9801      	ldr	r0, [sp, #4]
 800b25a:	6813      	ldr	r3, [r2, #0]
 800b25c:	4615      	mov	r5, r2
 800b25e:	b933      	cbnz	r3, 800b26e <_free_r+0x32>
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	6014      	str	r4, [r2, #0]
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b26a:	f000 ba75 	b.w	800b758 <__malloc_unlock>
 800b26e:	42a3      	cmp	r3, r4
 800b270:	d90b      	bls.n	800b28a <_free_r+0x4e>
 800b272:	6821      	ldr	r1, [r4, #0]
 800b274:	1862      	adds	r2, r4, r1
 800b276:	4293      	cmp	r3, r2
 800b278:	bf04      	itt	eq
 800b27a:	681a      	ldreq	r2, [r3, #0]
 800b27c:	685b      	ldreq	r3, [r3, #4]
 800b27e:	6063      	str	r3, [r4, #4]
 800b280:	bf04      	itt	eq
 800b282:	1852      	addeq	r2, r2, r1
 800b284:	6022      	streq	r2, [r4, #0]
 800b286:	602c      	str	r4, [r5, #0]
 800b288:	e7ec      	b.n	800b264 <_free_r+0x28>
 800b28a:	461a      	mov	r2, r3
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	b10b      	cbz	r3, 800b294 <_free_r+0x58>
 800b290:	42a3      	cmp	r3, r4
 800b292:	d9fa      	bls.n	800b28a <_free_r+0x4e>
 800b294:	6811      	ldr	r1, [r2, #0]
 800b296:	1855      	adds	r5, r2, r1
 800b298:	42a5      	cmp	r5, r4
 800b29a:	d10b      	bne.n	800b2b4 <_free_r+0x78>
 800b29c:	6824      	ldr	r4, [r4, #0]
 800b29e:	4421      	add	r1, r4
 800b2a0:	1854      	adds	r4, r2, r1
 800b2a2:	42a3      	cmp	r3, r4
 800b2a4:	6011      	str	r1, [r2, #0]
 800b2a6:	d1dd      	bne.n	800b264 <_free_r+0x28>
 800b2a8:	681c      	ldr	r4, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	6053      	str	r3, [r2, #4]
 800b2ae:	4421      	add	r1, r4
 800b2b0:	6011      	str	r1, [r2, #0]
 800b2b2:	e7d7      	b.n	800b264 <_free_r+0x28>
 800b2b4:	d902      	bls.n	800b2bc <_free_r+0x80>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	e7d3      	b.n	800b264 <_free_r+0x28>
 800b2bc:	6825      	ldr	r5, [r4, #0]
 800b2be:	1961      	adds	r1, r4, r5
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	bf04      	itt	eq
 800b2c4:	6819      	ldreq	r1, [r3, #0]
 800b2c6:	685b      	ldreq	r3, [r3, #4]
 800b2c8:	6063      	str	r3, [r4, #4]
 800b2ca:	bf04      	itt	eq
 800b2cc:	1949      	addeq	r1, r1, r5
 800b2ce:	6021      	streq	r1, [r4, #0]
 800b2d0:	6054      	str	r4, [r2, #4]
 800b2d2:	e7c7      	b.n	800b264 <_free_r+0x28>
 800b2d4:	b003      	add	sp, #12
 800b2d6:	bd30      	pop	{r4, r5, pc}
 800b2d8:	20000208 	.word	0x20000208

0800b2dc <_malloc_r>:
 800b2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2de:	1ccd      	adds	r5, r1, #3
 800b2e0:	f025 0503 	bic.w	r5, r5, #3
 800b2e4:	3508      	adds	r5, #8
 800b2e6:	2d0c      	cmp	r5, #12
 800b2e8:	bf38      	it	cc
 800b2ea:	250c      	movcc	r5, #12
 800b2ec:	2d00      	cmp	r5, #0
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	db01      	blt.n	800b2f6 <_malloc_r+0x1a>
 800b2f2:	42a9      	cmp	r1, r5
 800b2f4:	d903      	bls.n	800b2fe <_malloc_r+0x22>
 800b2f6:	230c      	movs	r3, #12
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fe:	f000 fa25 	bl	800b74c <__malloc_lock>
 800b302:	4921      	ldr	r1, [pc, #132]	; (800b388 <_malloc_r+0xac>)
 800b304:	680a      	ldr	r2, [r1, #0]
 800b306:	4614      	mov	r4, r2
 800b308:	b99c      	cbnz	r4, 800b332 <_malloc_r+0x56>
 800b30a:	4f20      	ldr	r7, [pc, #128]	; (800b38c <_malloc_r+0xb0>)
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	b923      	cbnz	r3, 800b31a <_malloc_r+0x3e>
 800b310:	4621      	mov	r1, r4
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f9a0 	bl	800b658 <_sbrk_r>
 800b318:	6038      	str	r0, [r7, #0]
 800b31a:	4629      	mov	r1, r5
 800b31c:	4630      	mov	r0, r6
 800b31e:	f000 f99b 	bl	800b658 <_sbrk_r>
 800b322:	1c43      	adds	r3, r0, #1
 800b324:	d123      	bne.n	800b36e <_malloc_r+0x92>
 800b326:	230c      	movs	r3, #12
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	4630      	mov	r0, r6
 800b32c:	f000 fa14 	bl	800b758 <__malloc_unlock>
 800b330:	e7e3      	b.n	800b2fa <_malloc_r+0x1e>
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	1b5b      	subs	r3, r3, r5
 800b336:	d417      	bmi.n	800b368 <_malloc_r+0x8c>
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d903      	bls.n	800b344 <_malloc_r+0x68>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	441c      	add	r4, r3
 800b340:	6025      	str	r5, [r4, #0]
 800b342:	e004      	b.n	800b34e <_malloc_r+0x72>
 800b344:	6863      	ldr	r3, [r4, #4]
 800b346:	42a2      	cmp	r2, r4
 800b348:	bf0c      	ite	eq
 800b34a:	600b      	streq	r3, [r1, #0]
 800b34c:	6053      	strne	r3, [r2, #4]
 800b34e:	4630      	mov	r0, r6
 800b350:	f000 fa02 	bl	800b758 <__malloc_unlock>
 800b354:	f104 000b 	add.w	r0, r4, #11
 800b358:	1d23      	adds	r3, r4, #4
 800b35a:	f020 0007 	bic.w	r0, r0, #7
 800b35e:	1ac2      	subs	r2, r0, r3
 800b360:	d0cc      	beq.n	800b2fc <_malloc_r+0x20>
 800b362:	1a1b      	subs	r3, r3, r0
 800b364:	50a3      	str	r3, [r4, r2]
 800b366:	e7c9      	b.n	800b2fc <_malloc_r+0x20>
 800b368:	4622      	mov	r2, r4
 800b36a:	6864      	ldr	r4, [r4, #4]
 800b36c:	e7cc      	b.n	800b308 <_malloc_r+0x2c>
 800b36e:	1cc4      	adds	r4, r0, #3
 800b370:	f024 0403 	bic.w	r4, r4, #3
 800b374:	42a0      	cmp	r0, r4
 800b376:	d0e3      	beq.n	800b340 <_malloc_r+0x64>
 800b378:	1a21      	subs	r1, r4, r0
 800b37a:	4630      	mov	r0, r6
 800b37c:	f000 f96c 	bl	800b658 <_sbrk_r>
 800b380:	3001      	adds	r0, #1
 800b382:	d1dd      	bne.n	800b340 <_malloc_r+0x64>
 800b384:	e7cf      	b.n	800b326 <_malloc_r+0x4a>
 800b386:	bf00      	nop
 800b388:	20000208 	.word	0x20000208
 800b38c:	2000020c 	.word	0x2000020c

0800b390 <__ssputs_r>:
 800b390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b394:	688e      	ldr	r6, [r1, #8]
 800b396:	429e      	cmp	r6, r3
 800b398:	4682      	mov	sl, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	4690      	mov	r8, r2
 800b39e:	461f      	mov	r7, r3
 800b3a0:	d838      	bhi.n	800b414 <__ssputs_r+0x84>
 800b3a2:	898a      	ldrh	r2, [r1, #12]
 800b3a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a8:	d032      	beq.n	800b410 <__ssputs_r+0x80>
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	6909      	ldr	r1, [r1, #16]
 800b3ae:	eba5 0901 	sub.w	r9, r5, r1
 800b3b2:	6965      	ldr	r5, [r4, #20]
 800b3b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3bc:	3301      	adds	r3, #1
 800b3be:	444b      	add	r3, r9
 800b3c0:	106d      	asrs	r5, r5, #1
 800b3c2:	429d      	cmp	r5, r3
 800b3c4:	bf38      	it	cc
 800b3c6:	461d      	movcc	r5, r3
 800b3c8:	0553      	lsls	r3, r2, #21
 800b3ca:	d531      	bpl.n	800b430 <__ssputs_r+0xa0>
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7ff ff85 	bl	800b2dc <_malloc_r>
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	b950      	cbnz	r0, 800b3ec <__ssputs_r+0x5c>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	f8ca 3000 	str.w	r3, [sl]
 800b3dc:	89a3      	ldrh	r3, [r4, #12]
 800b3de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ec:	6921      	ldr	r1, [r4, #16]
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	f7ff fa4c 	bl	800a88c <memcpy>
 800b3f4:	89a3      	ldrh	r3, [r4, #12]
 800b3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3fe:	81a3      	strh	r3, [r4, #12]
 800b400:	6126      	str	r6, [r4, #16]
 800b402:	6165      	str	r5, [r4, #20]
 800b404:	444e      	add	r6, r9
 800b406:	eba5 0509 	sub.w	r5, r5, r9
 800b40a:	6026      	str	r6, [r4, #0]
 800b40c:	60a5      	str	r5, [r4, #8]
 800b40e:	463e      	mov	r6, r7
 800b410:	42be      	cmp	r6, r7
 800b412:	d900      	bls.n	800b416 <__ssputs_r+0x86>
 800b414:	463e      	mov	r6, r7
 800b416:	4632      	mov	r2, r6
 800b418:	6820      	ldr	r0, [r4, #0]
 800b41a:	4641      	mov	r1, r8
 800b41c:	f000 f97c 	bl	800b718 <memmove>
 800b420:	68a3      	ldr	r3, [r4, #8]
 800b422:	6822      	ldr	r2, [r4, #0]
 800b424:	1b9b      	subs	r3, r3, r6
 800b426:	4432      	add	r2, r6
 800b428:	60a3      	str	r3, [r4, #8]
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e7db      	b.n	800b3e8 <__ssputs_r+0x58>
 800b430:	462a      	mov	r2, r5
 800b432:	f000 f997 	bl	800b764 <_realloc_r>
 800b436:	4606      	mov	r6, r0
 800b438:	2800      	cmp	r0, #0
 800b43a:	d1e1      	bne.n	800b400 <__ssputs_r+0x70>
 800b43c:	6921      	ldr	r1, [r4, #16]
 800b43e:	4650      	mov	r0, sl
 800b440:	f7ff fefc 	bl	800b23c <_free_r>
 800b444:	e7c7      	b.n	800b3d6 <__ssputs_r+0x46>
	...

0800b448 <_svfiprintf_r>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	4698      	mov	r8, r3
 800b44e:	898b      	ldrh	r3, [r1, #12]
 800b450:	061b      	lsls	r3, r3, #24
 800b452:	b09d      	sub	sp, #116	; 0x74
 800b454:	4607      	mov	r7, r0
 800b456:	460d      	mov	r5, r1
 800b458:	4614      	mov	r4, r2
 800b45a:	d50e      	bpl.n	800b47a <_svfiprintf_r+0x32>
 800b45c:	690b      	ldr	r3, [r1, #16]
 800b45e:	b963      	cbnz	r3, 800b47a <_svfiprintf_r+0x32>
 800b460:	2140      	movs	r1, #64	; 0x40
 800b462:	f7ff ff3b 	bl	800b2dc <_malloc_r>
 800b466:	6028      	str	r0, [r5, #0]
 800b468:	6128      	str	r0, [r5, #16]
 800b46a:	b920      	cbnz	r0, 800b476 <_svfiprintf_r+0x2e>
 800b46c:	230c      	movs	r3, #12
 800b46e:	603b      	str	r3, [r7, #0]
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	e0d1      	b.n	800b61a <_svfiprintf_r+0x1d2>
 800b476:	2340      	movs	r3, #64	; 0x40
 800b478:	616b      	str	r3, [r5, #20]
 800b47a:	2300      	movs	r3, #0
 800b47c:	9309      	str	r3, [sp, #36]	; 0x24
 800b47e:	2320      	movs	r3, #32
 800b480:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b484:	f8cd 800c 	str.w	r8, [sp, #12]
 800b488:	2330      	movs	r3, #48	; 0x30
 800b48a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b634 <_svfiprintf_r+0x1ec>
 800b48e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b492:	f04f 0901 	mov.w	r9, #1
 800b496:	4623      	mov	r3, r4
 800b498:	469a      	mov	sl, r3
 800b49a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b49e:	b10a      	cbz	r2, 800b4a4 <_svfiprintf_r+0x5c>
 800b4a0:	2a25      	cmp	r2, #37	; 0x25
 800b4a2:	d1f9      	bne.n	800b498 <_svfiprintf_r+0x50>
 800b4a4:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a8:	d00b      	beq.n	800b4c2 <_svfiprintf_r+0x7a>
 800b4aa:	465b      	mov	r3, fp
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	f7ff ff6d 	bl	800b390 <__ssputs_r>
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	f000 80aa 	beq.w	800b610 <_svfiprintf_r+0x1c8>
 800b4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4be:	445a      	add	r2, fp
 800b4c0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 80a2 	beq.w	800b610 <_svfiprintf_r+0x1c8>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d6:	f10a 0a01 	add.w	sl, sl, #1
 800b4da:	9304      	str	r3, [sp, #16]
 800b4dc:	9307      	str	r3, [sp, #28]
 800b4de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4e2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4e4:	4654      	mov	r4, sl
 800b4e6:	2205      	movs	r2, #5
 800b4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ec:	4851      	ldr	r0, [pc, #324]	; (800b634 <_svfiprintf_r+0x1ec>)
 800b4ee:	f7f4 fe97 	bl	8000220 <memchr>
 800b4f2:	9a04      	ldr	r2, [sp, #16]
 800b4f4:	b9d8      	cbnz	r0, 800b52e <_svfiprintf_r+0xe6>
 800b4f6:	06d0      	lsls	r0, r2, #27
 800b4f8:	bf44      	itt	mi
 800b4fa:	2320      	movmi	r3, #32
 800b4fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b500:	0711      	lsls	r1, r2, #28
 800b502:	bf44      	itt	mi
 800b504:	232b      	movmi	r3, #43	; 0x2b
 800b506:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b50a:	f89a 3000 	ldrb.w	r3, [sl]
 800b50e:	2b2a      	cmp	r3, #42	; 0x2a
 800b510:	d015      	beq.n	800b53e <_svfiprintf_r+0xf6>
 800b512:	9a07      	ldr	r2, [sp, #28]
 800b514:	4654      	mov	r4, sl
 800b516:	2000      	movs	r0, #0
 800b518:	f04f 0c0a 	mov.w	ip, #10
 800b51c:	4621      	mov	r1, r4
 800b51e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b522:	3b30      	subs	r3, #48	; 0x30
 800b524:	2b09      	cmp	r3, #9
 800b526:	d94e      	bls.n	800b5c6 <_svfiprintf_r+0x17e>
 800b528:	b1b0      	cbz	r0, 800b558 <_svfiprintf_r+0x110>
 800b52a:	9207      	str	r2, [sp, #28]
 800b52c:	e014      	b.n	800b558 <_svfiprintf_r+0x110>
 800b52e:	eba0 0308 	sub.w	r3, r0, r8
 800b532:	fa09 f303 	lsl.w	r3, r9, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	46a2      	mov	sl, r4
 800b53c:	e7d2      	b.n	800b4e4 <_svfiprintf_r+0x9c>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	1d19      	adds	r1, r3, #4
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	9103      	str	r1, [sp, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfbb      	ittet	lt
 800b54a:	425b      	neglt	r3, r3
 800b54c:	f042 0202 	orrlt.w	r2, r2, #2
 800b550:	9307      	strge	r3, [sp, #28]
 800b552:	9307      	strlt	r3, [sp, #28]
 800b554:	bfb8      	it	lt
 800b556:	9204      	strlt	r2, [sp, #16]
 800b558:	7823      	ldrb	r3, [r4, #0]
 800b55a:	2b2e      	cmp	r3, #46	; 0x2e
 800b55c:	d10c      	bne.n	800b578 <_svfiprintf_r+0x130>
 800b55e:	7863      	ldrb	r3, [r4, #1]
 800b560:	2b2a      	cmp	r3, #42	; 0x2a
 800b562:	d135      	bne.n	800b5d0 <_svfiprintf_r+0x188>
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	1d1a      	adds	r2, r3, #4
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	9203      	str	r2, [sp, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bfb8      	it	lt
 800b570:	f04f 33ff 	movlt.w	r3, #4294967295
 800b574:	3402      	adds	r4, #2
 800b576:	9305      	str	r3, [sp, #20]
 800b578:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b644 <_svfiprintf_r+0x1fc>
 800b57c:	7821      	ldrb	r1, [r4, #0]
 800b57e:	2203      	movs	r2, #3
 800b580:	4650      	mov	r0, sl
 800b582:	f7f4 fe4d 	bl	8000220 <memchr>
 800b586:	b140      	cbz	r0, 800b59a <_svfiprintf_r+0x152>
 800b588:	2340      	movs	r3, #64	; 0x40
 800b58a:	eba0 000a 	sub.w	r0, r0, sl
 800b58e:	fa03 f000 	lsl.w	r0, r3, r0
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	4303      	orrs	r3, r0
 800b596:	3401      	adds	r4, #1
 800b598:	9304      	str	r3, [sp, #16]
 800b59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b59e:	4826      	ldr	r0, [pc, #152]	; (800b638 <_svfiprintf_r+0x1f0>)
 800b5a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5a4:	2206      	movs	r2, #6
 800b5a6:	f7f4 fe3b 	bl	8000220 <memchr>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d038      	beq.n	800b620 <_svfiprintf_r+0x1d8>
 800b5ae:	4b23      	ldr	r3, [pc, #140]	; (800b63c <_svfiprintf_r+0x1f4>)
 800b5b0:	bb1b      	cbnz	r3, 800b5fa <_svfiprintf_r+0x1b2>
 800b5b2:	9b03      	ldr	r3, [sp, #12]
 800b5b4:	3307      	adds	r3, #7
 800b5b6:	f023 0307 	bic.w	r3, r3, #7
 800b5ba:	3308      	adds	r3, #8
 800b5bc:	9303      	str	r3, [sp, #12]
 800b5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c0:	4433      	add	r3, r6
 800b5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5c4:	e767      	b.n	800b496 <_svfiprintf_r+0x4e>
 800b5c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	2001      	movs	r0, #1
 800b5ce:	e7a5      	b.n	800b51c <_svfiprintf_r+0xd4>
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	3401      	adds	r4, #1
 800b5d4:	9305      	str	r3, [sp, #20]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	f04f 0c0a 	mov.w	ip, #10
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e2:	3a30      	subs	r2, #48	; 0x30
 800b5e4:	2a09      	cmp	r2, #9
 800b5e6:	d903      	bls.n	800b5f0 <_svfiprintf_r+0x1a8>
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0c5      	beq.n	800b578 <_svfiprintf_r+0x130>
 800b5ec:	9105      	str	r1, [sp, #20]
 800b5ee:	e7c3      	b.n	800b578 <_svfiprintf_r+0x130>
 800b5f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e7f0      	b.n	800b5dc <_svfiprintf_r+0x194>
 800b5fa:	ab03      	add	r3, sp, #12
 800b5fc:	9300      	str	r3, [sp, #0]
 800b5fe:	462a      	mov	r2, r5
 800b600:	4b0f      	ldr	r3, [pc, #60]	; (800b640 <_svfiprintf_r+0x1f8>)
 800b602:	a904      	add	r1, sp, #16
 800b604:	4638      	mov	r0, r7
 800b606:	f7fc fa87 	bl	8007b18 <_printf_float>
 800b60a:	1c42      	adds	r2, r0, #1
 800b60c:	4606      	mov	r6, r0
 800b60e:	d1d6      	bne.n	800b5be <_svfiprintf_r+0x176>
 800b610:	89ab      	ldrh	r3, [r5, #12]
 800b612:	065b      	lsls	r3, r3, #25
 800b614:	f53f af2c 	bmi.w	800b470 <_svfiprintf_r+0x28>
 800b618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b61a:	b01d      	add	sp, #116	; 0x74
 800b61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b620:	ab03      	add	r3, sp, #12
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	462a      	mov	r2, r5
 800b626:	4b06      	ldr	r3, [pc, #24]	; (800b640 <_svfiprintf_r+0x1f8>)
 800b628:	a904      	add	r1, sp, #16
 800b62a:	4638      	mov	r0, r7
 800b62c:	f7fc fd18 	bl	8008060 <_printf_i>
 800b630:	e7eb      	b.n	800b60a <_svfiprintf_r+0x1c2>
 800b632:	bf00      	nop
 800b634:	0800c65c 	.word	0x0800c65c
 800b638:	0800c666 	.word	0x0800c666
 800b63c:	08007b19 	.word	0x08007b19
 800b640:	0800b391 	.word	0x0800b391
 800b644:	0800c662 	.word	0x0800c662

0800b648 <nan>:
 800b648:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b650 <nan+0x8>
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	00000000 	.word	0x00000000
 800b654:	7ff80000 	.word	0x7ff80000

0800b658 <_sbrk_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	4d06      	ldr	r5, [pc, #24]	; (800b674 <_sbrk_r+0x1c>)
 800b65c:	2300      	movs	r3, #0
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	f7f7 f97e 	bl	8002964 <_sbrk>
 800b668:	1c43      	adds	r3, r0, #1
 800b66a:	d102      	bne.n	800b672 <_sbrk_r+0x1a>
 800b66c:	682b      	ldr	r3, [r5, #0]
 800b66e:	b103      	cbz	r3, 800b672 <_sbrk_r+0x1a>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	bd38      	pop	{r3, r4, r5, pc}
 800b674:	20000668 	.word	0x20000668

0800b678 <strncmp>:
 800b678:	b510      	push	{r4, lr}
 800b67a:	b16a      	cbz	r2, 800b698 <strncmp+0x20>
 800b67c:	3901      	subs	r1, #1
 800b67e:	1884      	adds	r4, r0, r2
 800b680:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b684:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b688:	4293      	cmp	r3, r2
 800b68a:	d103      	bne.n	800b694 <strncmp+0x1c>
 800b68c:	42a0      	cmp	r0, r4
 800b68e:	d001      	beq.n	800b694 <strncmp+0x1c>
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f5      	bne.n	800b680 <strncmp+0x8>
 800b694:	1a98      	subs	r0, r3, r2
 800b696:	bd10      	pop	{r4, pc}
 800b698:	4610      	mov	r0, r2
 800b69a:	e7fc      	b.n	800b696 <strncmp+0x1e>

0800b69c <__ascii_wctomb>:
 800b69c:	b149      	cbz	r1, 800b6b2 <__ascii_wctomb+0x16>
 800b69e:	2aff      	cmp	r2, #255	; 0xff
 800b6a0:	bf85      	ittet	hi
 800b6a2:	238a      	movhi	r3, #138	; 0x8a
 800b6a4:	6003      	strhi	r3, [r0, #0]
 800b6a6:	700a      	strbls	r2, [r1, #0]
 800b6a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b6ac:	bf98      	it	ls
 800b6ae:	2001      	movls	r0, #1
 800b6b0:	4770      	bx	lr
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	4770      	bx	lr
	...

0800b6b8 <__assert_func>:
 800b6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ba:	4614      	mov	r4, r2
 800b6bc:	461a      	mov	r2, r3
 800b6be:	4b09      	ldr	r3, [pc, #36]	; (800b6e4 <__assert_func+0x2c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	68d8      	ldr	r0, [r3, #12]
 800b6c6:	b14c      	cbz	r4, 800b6dc <__assert_func+0x24>
 800b6c8:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <__assert_func+0x30>)
 800b6ca:	9100      	str	r1, [sp, #0]
 800b6cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6d0:	4906      	ldr	r1, [pc, #24]	; (800b6ec <__assert_func+0x34>)
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	f000 f80e 	bl	800b6f4 <fiprintf>
 800b6d8:	f000 fa84 	bl	800bbe4 <abort>
 800b6dc:	4b04      	ldr	r3, [pc, #16]	; (800b6f0 <__assert_func+0x38>)
 800b6de:	461c      	mov	r4, r3
 800b6e0:	e7f3      	b.n	800b6ca <__assert_func+0x12>
 800b6e2:	bf00      	nop
 800b6e4:	20000014 	.word	0x20000014
 800b6e8:	0800c66d 	.word	0x0800c66d
 800b6ec:	0800c67a 	.word	0x0800c67a
 800b6f0:	0800c6a8 	.word	0x0800c6a8

0800b6f4 <fiprintf>:
 800b6f4:	b40e      	push	{r1, r2, r3}
 800b6f6:	b503      	push	{r0, r1, lr}
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	ab03      	add	r3, sp, #12
 800b6fc:	4805      	ldr	r0, [pc, #20]	; (800b714 <fiprintf+0x20>)
 800b6fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b702:	6800      	ldr	r0, [r0, #0]
 800b704:	9301      	str	r3, [sp, #4]
 800b706:	f000 f87d 	bl	800b804 <_vfiprintf_r>
 800b70a:	b002      	add	sp, #8
 800b70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b710:	b003      	add	sp, #12
 800b712:	4770      	bx	lr
 800b714:	20000014 	.word	0x20000014

0800b718 <memmove>:
 800b718:	4288      	cmp	r0, r1
 800b71a:	b510      	push	{r4, lr}
 800b71c:	eb01 0402 	add.w	r4, r1, r2
 800b720:	d902      	bls.n	800b728 <memmove+0x10>
 800b722:	4284      	cmp	r4, r0
 800b724:	4623      	mov	r3, r4
 800b726:	d807      	bhi.n	800b738 <memmove+0x20>
 800b728:	1e43      	subs	r3, r0, #1
 800b72a:	42a1      	cmp	r1, r4
 800b72c:	d008      	beq.n	800b740 <memmove+0x28>
 800b72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b732:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b736:	e7f8      	b.n	800b72a <memmove+0x12>
 800b738:	4402      	add	r2, r0
 800b73a:	4601      	mov	r1, r0
 800b73c:	428a      	cmp	r2, r1
 800b73e:	d100      	bne.n	800b742 <memmove+0x2a>
 800b740:	bd10      	pop	{r4, pc}
 800b742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b74a:	e7f7      	b.n	800b73c <memmove+0x24>

0800b74c <__malloc_lock>:
 800b74c:	4801      	ldr	r0, [pc, #4]	; (800b754 <__malloc_lock+0x8>)
 800b74e:	f000 bc09 	b.w	800bf64 <__retarget_lock_acquire_recursive>
 800b752:	bf00      	nop
 800b754:	20000670 	.word	0x20000670

0800b758 <__malloc_unlock>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__malloc_unlock+0x8>)
 800b75a:	f000 bc04 	b.w	800bf66 <__retarget_lock_release_recursive>
 800b75e:	bf00      	nop
 800b760:	20000670 	.word	0x20000670

0800b764 <_realloc_r>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	4607      	mov	r7, r0
 800b768:	4614      	mov	r4, r2
 800b76a:	460e      	mov	r6, r1
 800b76c:	b921      	cbnz	r1, 800b778 <_realloc_r+0x14>
 800b76e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b772:	4611      	mov	r1, r2
 800b774:	f7ff bdb2 	b.w	800b2dc <_malloc_r>
 800b778:	b922      	cbnz	r2, 800b784 <_realloc_r+0x20>
 800b77a:	f7ff fd5f 	bl	800b23c <_free_r>
 800b77e:	4625      	mov	r5, r4
 800b780:	4628      	mov	r0, r5
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	f000 fc54 	bl	800c030 <_malloc_usable_size_r>
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d20f      	bcs.n	800b7ac <_realloc_r+0x48>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4638      	mov	r0, r7
 800b790:	f7ff fda4 	bl	800b2dc <_malloc_r>
 800b794:	4605      	mov	r5, r0
 800b796:	2800      	cmp	r0, #0
 800b798:	d0f2      	beq.n	800b780 <_realloc_r+0x1c>
 800b79a:	4631      	mov	r1, r6
 800b79c:	4622      	mov	r2, r4
 800b79e:	f7ff f875 	bl	800a88c <memcpy>
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	4638      	mov	r0, r7
 800b7a6:	f7ff fd49 	bl	800b23c <_free_r>
 800b7aa:	e7e9      	b.n	800b780 <_realloc_r+0x1c>
 800b7ac:	4635      	mov	r5, r6
 800b7ae:	e7e7      	b.n	800b780 <_realloc_r+0x1c>

0800b7b0 <__sfputc_r>:
 800b7b0:	6893      	ldr	r3, [r2, #8]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	b410      	push	{r4}
 800b7b8:	6093      	str	r3, [r2, #8]
 800b7ba:	da08      	bge.n	800b7ce <__sfputc_r+0x1e>
 800b7bc:	6994      	ldr	r4, [r2, #24]
 800b7be:	42a3      	cmp	r3, r4
 800b7c0:	db01      	blt.n	800b7c6 <__sfputc_r+0x16>
 800b7c2:	290a      	cmp	r1, #10
 800b7c4:	d103      	bne.n	800b7ce <__sfputc_r+0x1e>
 800b7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ca:	f000 b94b 	b.w	800ba64 <__swbuf_r>
 800b7ce:	6813      	ldr	r3, [r2, #0]
 800b7d0:	1c58      	adds	r0, r3, #1
 800b7d2:	6010      	str	r0, [r2, #0]
 800b7d4:	7019      	strb	r1, [r3, #0]
 800b7d6:	4608      	mov	r0, r1
 800b7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <__sfputs_r>:
 800b7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	18d5      	adds	r5, r2, r3
 800b7e8:	42ac      	cmp	r4, r5
 800b7ea:	d101      	bne.n	800b7f0 <__sfputs_r+0x12>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	e007      	b.n	800b800 <__sfputs_r+0x22>
 800b7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f4:	463a      	mov	r2, r7
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f7ff ffda 	bl	800b7b0 <__sfputc_r>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d1f3      	bne.n	800b7e8 <__sfputs_r+0xa>
 800b800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b804 <_vfiprintf_r>:
 800b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	460d      	mov	r5, r1
 800b80a:	b09d      	sub	sp, #116	; 0x74
 800b80c:	4614      	mov	r4, r2
 800b80e:	4698      	mov	r8, r3
 800b810:	4606      	mov	r6, r0
 800b812:	b118      	cbz	r0, 800b81c <_vfiprintf_r+0x18>
 800b814:	6983      	ldr	r3, [r0, #24]
 800b816:	b90b      	cbnz	r3, 800b81c <_vfiprintf_r+0x18>
 800b818:	f000 fb06 	bl	800be28 <__sinit>
 800b81c:	4b89      	ldr	r3, [pc, #548]	; (800ba44 <_vfiprintf_r+0x240>)
 800b81e:	429d      	cmp	r5, r3
 800b820:	d11b      	bne.n	800b85a <_vfiprintf_r+0x56>
 800b822:	6875      	ldr	r5, [r6, #4]
 800b824:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b826:	07d9      	lsls	r1, r3, #31
 800b828:	d405      	bmi.n	800b836 <_vfiprintf_r+0x32>
 800b82a:	89ab      	ldrh	r3, [r5, #12]
 800b82c:	059a      	lsls	r2, r3, #22
 800b82e:	d402      	bmi.n	800b836 <_vfiprintf_r+0x32>
 800b830:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b832:	f000 fb97 	bl	800bf64 <__retarget_lock_acquire_recursive>
 800b836:	89ab      	ldrh	r3, [r5, #12]
 800b838:	071b      	lsls	r3, r3, #28
 800b83a:	d501      	bpl.n	800b840 <_vfiprintf_r+0x3c>
 800b83c:	692b      	ldr	r3, [r5, #16]
 800b83e:	b9eb      	cbnz	r3, 800b87c <_vfiprintf_r+0x78>
 800b840:	4629      	mov	r1, r5
 800b842:	4630      	mov	r0, r6
 800b844:	f000 f960 	bl	800bb08 <__swsetup_r>
 800b848:	b1c0      	cbz	r0, 800b87c <_vfiprintf_r+0x78>
 800b84a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b84c:	07dc      	lsls	r4, r3, #31
 800b84e:	d50e      	bpl.n	800b86e <_vfiprintf_r+0x6a>
 800b850:	f04f 30ff 	mov.w	r0, #4294967295
 800b854:	b01d      	add	sp, #116	; 0x74
 800b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85a:	4b7b      	ldr	r3, [pc, #492]	; (800ba48 <_vfiprintf_r+0x244>)
 800b85c:	429d      	cmp	r5, r3
 800b85e:	d101      	bne.n	800b864 <_vfiprintf_r+0x60>
 800b860:	68b5      	ldr	r5, [r6, #8]
 800b862:	e7df      	b.n	800b824 <_vfiprintf_r+0x20>
 800b864:	4b79      	ldr	r3, [pc, #484]	; (800ba4c <_vfiprintf_r+0x248>)
 800b866:	429d      	cmp	r5, r3
 800b868:	bf08      	it	eq
 800b86a:	68f5      	ldreq	r5, [r6, #12]
 800b86c:	e7da      	b.n	800b824 <_vfiprintf_r+0x20>
 800b86e:	89ab      	ldrh	r3, [r5, #12]
 800b870:	0598      	lsls	r0, r3, #22
 800b872:	d4ed      	bmi.n	800b850 <_vfiprintf_r+0x4c>
 800b874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b876:	f000 fb76 	bl	800bf66 <__retarget_lock_release_recursive>
 800b87a:	e7e9      	b.n	800b850 <_vfiprintf_r+0x4c>
 800b87c:	2300      	movs	r3, #0
 800b87e:	9309      	str	r3, [sp, #36]	; 0x24
 800b880:	2320      	movs	r3, #32
 800b882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b886:	f8cd 800c 	str.w	r8, [sp, #12]
 800b88a:	2330      	movs	r3, #48	; 0x30
 800b88c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba50 <_vfiprintf_r+0x24c>
 800b890:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b894:	f04f 0901 	mov.w	r9, #1
 800b898:	4623      	mov	r3, r4
 800b89a:	469a      	mov	sl, r3
 800b89c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a0:	b10a      	cbz	r2, 800b8a6 <_vfiprintf_r+0xa2>
 800b8a2:	2a25      	cmp	r2, #37	; 0x25
 800b8a4:	d1f9      	bne.n	800b89a <_vfiprintf_r+0x96>
 800b8a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b8aa:	d00b      	beq.n	800b8c4 <_vfiprintf_r+0xc0>
 800b8ac:	465b      	mov	r3, fp
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	4629      	mov	r1, r5
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f7ff ff93 	bl	800b7de <__sfputs_r>
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	f000 80aa 	beq.w	800ba12 <_vfiprintf_r+0x20e>
 800b8be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c0:	445a      	add	r2, fp
 800b8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 80a2 	beq.w	800ba12 <_vfiprintf_r+0x20e>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8d8:	f10a 0a01 	add.w	sl, sl, #1
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	9307      	str	r3, [sp, #28]
 800b8e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b8e6:	4654      	mov	r4, sl
 800b8e8:	2205      	movs	r2, #5
 800b8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8ee:	4858      	ldr	r0, [pc, #352]	; (800ba50 <_vfiprintf_r+0x24c>)
 800b8f0:	f7f4 fc96 	bl	8000220 <memchr>
 800b8f4:	9a04      	ldr	r2, [sp, #16]
 800b8f6:	b9d8      	cbnz	r0, 800b930 <_vfiprintf_r+0x12c>
 800b8f8:	06d1      	lsls	r1, r2, #27
 800b8fa:	bf44      	itt	mi
 800b8fc:	2320      	movmi	r3, #32
 800b8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b902:	0713      	lsls	r3, r2, #28
 800b904:	bf44      	itt	mi
 800b906:	232b      	movmi	r3, #43	; 0x2b
 800b908:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90c:	f89a 3000 	ldrb.w	r3, [sl]
 800b910:	2b2a      	cmp	r3, #42	; 0x2a
 800b912:	d015      	beq.n	800b940 <_vfiprintf_r+0x13c>
 800b914:	9a07      	ldr	r2, [sp, #28]
 800b916:	4654      	mov	r4, sl
 800b918:	2000      	movs	r0, #0
 800b91a:	f04f 0c0a 	mov.w	ip, #10
 800b91e:	4621      	mov	r1, r4
 800b920:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b924:	3b30      	subs	r3, #48	; 0x30
 800b926:	2b09      	cmp	r3, #9
 800b928:	d94e      	bls.n	800b9c8 <_vfiprintf_r+0x1c4>
 800b92a:	b1b0      	cbz	r0, 800b95a <_vfiprintf_r+0x156>
 800b92c:	9207      	str	r2, [sp, #28]
 800b92e:	e014      	b.n	800b95a <_vfiprintf_r+0x156>
 800b930:	eba0 0308 	sub.w	r3, r0, r8
 800b934:	fa09 f303 	lsl.w	r3, r9, r3
 800b938:	4313      	orrs	r3, r2
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	46a2      	mov	sl, r4
 800b93e:	e7d2      	b.n	800b8e6 <_vfiprintf_r+0xe2>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	1d19      	adds	r1, r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	9103      	str	r1, [sp, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bfbb      	ittet	lt
 800b94c:	425b      	neglt	r3, r3
 800b94e:	f042 0202 	orrlt.w	r2, r2, #2
 800b952:	9307      	strge	r3, [sp, #28]
 800b954:	9307      	strlt	r3, [sp, #28]
 800b956:	bfb8      	it	lt
 800b958:	9204      	strlt	r2, [sp, #16]
 800b95a:	7823      	ldrb	r3, [r4, #0]
 800b95c:	2b2e      	cmp	r3, #46	; 0x2e
 800b95e:	d10c      	bne.n	800b97a <_vfiprintf_r+0x176>
 800b960:	7863      	ldrb	r3, [r4, #1]
 800b962:	2b2a      	cmp	r3, #42	; 0x2a
 800b964:	d135      	bne.n	800b9d2 <_vfiprintf_r+0x1ce>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	1d1a      	adds	r2, r3, #4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	9203      	str	r2, [sp, #12]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	bfb8      	it	lt
 800b972:	f04f 33ff 	movlt.w	r3, #4294967295
 800b976:	3402      	adds	r4, #2
 800b978:	9305      	str	r3, [sp, #20]
 800b97a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba60 <_vfiprintf_r+0x25c>
 800b97e:	7821      	ldrb	r1, [r4, #0]
 800b980:	2203      	movs	r2, #3
 800b982:	4650      	mov	r0, sl
 800b984:	f7f4 fc4c 	bl	8000220 <memchr>
 800b988:	b140      	cbz	r0, 800b99c <_vfiprintf_r+0x198>
 800b98a:	2340      	movs	r3, #64	; 0x40
 800b98c:	eba0 000a 	sub.w	r0, r0, sl
 800b990:	fa03 f000 	lsl.w	r0, r3, r0
 800b994:	9b04      	ldr	r3, [sp, #16]
 800b996:	4303      	orrs	r3, r0
 800b998:	3401      	adds	r4, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a0:	482c      	ldr	r0, [pc, #176]	; (800ba54 <_vfiprintf_r+0x250>)
 800b9a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	f7f4 fc3a 	bl	8000220 <memchr>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d03f      	beq.n	800ba30 <_vfiprintf_r+0x22c>
 800b9b0:	4b29      	ldr	r3, [pc, #164]	; (800ba58 <_vfiprintf_r+0x254>)
 800b9b2:	bb1b      	cbnz	r3, 800b9fc <_vfiprintf_r+0x1f8>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	3307      	adds	r3, #7
 800b9b8:	f023 0307 	bic.w	r3, r3, #7
 800b9bc:	3308      	adds	r3, #8
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c2:	443b      	add	r3, r7
 800b9c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c6:	e767      	b.n	800b898 <_vfiprintf_r+0x94>
 800b9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7a5      	b.n	800b91e <_vfiprintf_r+0x11a>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f04f 0c0a 	mov.w	ip, #10
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e4:	3a30      	subs	r2, #48	; 0x30
 800b9e6:	2a09      	cmp	r2, #9
 800b9e8:	d903      	bls.n	800b9f2 <_vfiprintf_r+0x1ee>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0c5      	beq.n	800b97a <_vfiprintf_r+0x176>
 800b9ee:	9105      	str	r1, [sp, #20]
 800b9f0:	e7c3      	b.n	800b97a <_vfiprintf_r+0x176>
 800b9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7f0      	b.n	800b9de <_vfiprintf_r+0x1da>
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b16      	ldr	r3, [pc, #88]	; (800ba5c <_vfiprintf_r+0x258>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7fc f886 	bl	8007b18 <_printf_float>
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	1c78      	adds	r0, r7, #1
 800ba10:	d1d6      	bne.n	800b9c0 <_vfiprintf_r+0x1bc>
 800ba12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba14:	07d9      	lsls	r1, r3, #31
 800ba16:	d405      	bmi.n	800ba24 <_vfiprintf_r+0x220>
 800ba18:	89ab      	ldrh	r3, [r5, #12]
 800ba1a:	059a      	lsls	r2, r3, #22
 800ba1c:	d402      	bmi.n	800ba24 <_vfiprintf_r+0x220>
 800ba1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba20:	f000 faa1 	bl	800bf66 <__retarget_lock_release_recursive>
 800ba24:	89ab      	ldrh	r3, [r5, #12]
 800ba26:	065b      	lsls	r3, r3, #25
 800ba28:	f53f af12 	bmi.w	800b850 <_vfiprintf_r+0x4c>
 800ba2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba2e:	e711      	b.n	800b854 <_vfiprintf_r+0x50>
 800ba30:	ab03      	add	r3, sp, #12
 800ba32:	9300      	str	r3, [sp, #0]
 800ba34:	462a      	mov	r2, r5
 800ba36:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <_vfiprintf_r+0x258>)
 800ba38:	a904      	add	r1, sp, #16
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7fc fb10 	bl	8008060 <_printf_i>
 800ba40:	e7e4      	b.n	800ba0c <_vfiprintf_r+0x208>
 800ba42:	bf00      	nop
 800ba44:	0800c6cc 	.word	0x0800c6cc
 800ba48:	0800c6ec 	.word	0x0800c6ec
 800ba4c:	0800c6ac 	.word	0x0800c6ac
 800ba50:	0800c65c 	.word	0x0800c65c
 800ba54:	0800c666 	.word	0x0800c666
 800ba58:	08007b19 	.word	0x08007b19
 800ba5c:	0800b7df 	.word	0x0800b7df
 800ba60:	0800c662 	.word	0x0800c662

0800ba64 <__swbuf_r>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	460e      	mov	r6, r1
 800ba68:	4614      	mov	r4, r2
 800ba6a:	4605      	mov	r5, r0
 800ba6c:	b118      	cbz	r0, 800ba76 <__swbuf_r+0x12>
 800ba6e:	6983      	ldr	r3, [r0, #24]
 800ba70:	b90b      	cbnz	r3, 800ba76 <__swbuf_r+0x12>
 800ba72:	f000 f9d9 	bl	800be28 <__sinit>
 800ba76:	4b21      	ldr	r3, [pc, #132]	; (800bafc <__swbuf_r+0x98>)
 800ba78:	429c      	cmp	r4, r3
 800ba7a:	d12b      	bne.n	800bad4 <__swbuf_r+0x70>
 800ba7c:	686c      	ldr	r4, [r5, #4]
 800ba7e:	69a3      	ldr	r3, [r4, #24]
 800ba80:	60a3      	str	r3, [r4, #8]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	071a      	lsls	r2, r3, #28
 800ba86:	d52f      	bpl.n	800bae8 <__swbuf_r+0x84>
 800ba88:	6923      	ldr	r3, [r4, #16]
 800ba8a:	b36b      	cbz	r3, 800bae8 <__swbuf_r+0x84>
 800ba8c:	6923      	ldr	r3, [r4, #16]
 800ba8e:	6820      	ldr	r0, [r4, #0]
 800ba90:	1ac0      	subs	r0, r0, r3
 800ba92:	6963      	ldr	r3, [r4, #20]
 800ba94:	b2f6      	uxtb	r6, r6
 800ba96:	4283      	cmp	r3, r0
 800ba98:	4637      	mov	r7, r6
 800ba9a:	dc04      	bgt.n	800baa6 <__swbuf_r+0x42>
 800ba9c:	4621      	mov	r1, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	f000 f92e 	bl	800bd00 <_fflush_r>
 800baa4:	bb30      	cbnz	r0, 800baf4 <__swbuf_r+0x90>
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	60a3      	str	r3, [r4, #8]
 800baac:	6823      	ldr	r3, [r4, #0]
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	6022      	str	r2, [r4, #0]
 800bab2:	701e      	strb	r6, [r3, #0]
 800bab4:	6963      	ldr	r3, [r4, #20]
 800bab6:	3001      	adds	r0, #1
 800bab8:	4283      	cmp	r3, r0
 800baba:	d004      	beq.n	800bac6 <__swbuf_r+0x62>
 800babc:	89a3      	ldrh	r3, [r4, #12]
 800babe:	07db      	lsls	r3, r3, #31
 800bac0:	d506      	bpl.n	800bad0 <__swbuf_r+0x6c>
 800bac2:	2e0a      	cmp	r6, #10
 800bac4:	d104      	bne.n	800bad0 <__swbuf_r+0x6c>
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f919 	bl	800bd00 <_fflush_r>
 800bace:	b988      	cbnz	r0, 800baf4 <__swbuf_r+0x90>
 800bad0:	4638      	mov	r0, r7
 800bad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bad4:	4b0a      	ldr	r3, [pc, #40]	; (800bb00 <__swbuf_r+0x9c>)
 800bad6:	429c      	cmp	r4, r3
 800bad8:	d101      	bne.n	800bade <__swbuf_r+0x7a>
 800bada:	68ac      	ldr	r4, [r5, #8]
 800badc:	e7cf      	b.n	800ba7e <__swbuf_r+0x1a>
 800bade:	4b09      	ldr	r3, [pc, #36]	; (800bb04 <__swbuf_r+0xa0>)
 800bae0:	429c      	cmp	r4, r3
 800bae2:	bf08      	it	eq
 800bae4:	68ec      	ldreq	r4, [r5, #12]
 800bae6:	e7ca      	b.n	800ba7e <__swbuf_r+0x1a>
 800bae8:	4621      	mov	r1, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f000 f80c 	bl	800bb08 <__swsetup_r>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d0cb      	beq.n	800ba8c <__swbuf_r+0x28>
 800baf4:	f04f 37ff 	mov.w	r7, #4294967295
 800baf8:	e7ea      	b.n	800bad0 <__swbuf_r+0x6c>
 800bafa:	bf00      	nop
 800bafc:	0800c6cc 	.word	0x0800c6cc
 800bb00:	0800c6ec 	.word	0x0800c6ec
 800bb04:	0800c6ac 	.word	0x0800c6ac

0800bb08 <__swsetup_r>:
 800bb08:	4b32      	ldr	r3, [pc, #200]	; (800bbd4 <__swsetup_r+0xcc>)
 800bb0a:	b570      	push	{r4, r5, r6, lr}
 800bb0c:	681d      	ldr	r5, [r3, #0]
 800bb0e:	4606      	mov	r6, r0
 800bb10:	460c      	mov	r4, r1
 800bb12:	b125      	cbz	r5, 800bb1e <__swsetup_r+0x16>
 800bb14:	69ab      	ldr	r3, [r5, #24]
 800bb16:	b913      	cbnz	r3, 800bb1e <__swsetup_r+0x16>
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f000 f985 	bl	800be28 <__sinit>
 800bb1e:	4b2e      	ldr	r3, [pc, #184]	; (800bbd8 <__swsetup_r+0xd0>)
 800bb20:	429c      	cmp	r4, r3
 800bb22:	d10f      	bne.n	800bb44 <__swsetup_r+0x3c>
 800bb24:	686c      	ldr	r4, [r5, #4]
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb2c:	0719      	lsls	r1, r3, #28
 800bb2e:	d42c      	bmi.n	800bb8a <__swsetup_r+0x82>
 800bb30:	06dd      	lsls	r5, r3, #27
 800bb32:	d411      	bmi.n	800bb58 <__swsetup_r+0x50>
 800bb34:	2309      	movs	r3, #9
 800bb36:	6033      	str	r3, [r6, #0]
 800bb38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb3c:	81a3      	strh	r3, [r4, #12]
 800bb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb42:	e03e      	b.n	800bbc2 <__swsetup_r+0xba>
 800bb44:	4b25      	ldr	r3, [pc, #148]	; (800bbdc <__swsetup_r+0xd4>)
 800bb46:	429c      	cmp	r4, r3
 800bb48:	d101      	bne.n	800bb4e <__swsetup_r+0x46>
 800bb4a:	68ac      	ldr	r4, [r5, #8]
 800bb4c:	e7eb      	b.n	800bb26 <__swsetup_r+0x1e>
 800bb4e:	4b24      	ldr	r3, [pc, #144]	; (800bbe0 <__swsetup_r+0xd8>)
 800bb50:	429c      	cmp	r4, r3
 800bb52:	bf08      	it	eq
 800bb54:	68ec      	ldreq	r4, [r5, #12]
 800bb56:	e7e6      	b.n	800bb26 <__swsetup_r+0x1e>
 800bb58:	0758      	lsls	r0, r3, #29
 800bb5a:	d512      	bpl.n	800bb82 <__swsetup_r+0x7a>
 800bb5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb5e:	b141      	cbz	r1, 800bb72 <__swsetup_r+0x6a>
 800bb60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb64:	4299      	cmp	r1, r3
 800bb66:	d002      	beq.n	800bb6e <__swsetup_r+0x66>
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff fb67 	bl	800b23c <_free_r>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	6363      	str	r3, [r4, #52]	; 0x34
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	6023      	str	r3, [r4, #0]
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f043 0308 	orr.w	r3, r3, #8
 800bb88:	81a3      	strh	r3, [r4, #12]
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	b94b      	cbnz	r3, 800bba2 <__swsetup_r+0x9a>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb98:	d003      	beq.n	800bba2 <__swsetup_r+0x9a>
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f000 fa07 	bl	800bfb0 <__smakebuf_r>
 800bba2:	89a0      	ldrh	r0, [r4, #12]
 800bba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bba8:	f010 0301 	ands.w	r3, r0, #1
 800bbac:	d00a      	beq.n	800bbc4 <__swsetup_r+0xbc>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	60a3      	str	r3, [r4, #8]
 800bbb2:	6963      	ldr	r3, [r4, #20]
 800bbb4:	425b      	negs	r3, r3
 800bbb6:	61a3      	str	r3, [r4, #24]
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	b943      	cbnz	r3, 800bbce <__swsetup_r+0xc6>
 800bbbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bbc0:	d1ba      	bne.n	800bb38 <__swsetup_r+0x30>
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	0781      	lsls	r1, r0, #30
 800bbc6:	bf58      	it	pl
 800bbc8:	6963      	ldrpl	r3, [r4, #20]
 800bbca:	60a3      	str	r3, [r4, #8]
 800bbcc:	e7f4      	b.n	800bbb8 <__swsetup_r+0xb0>
 800bbce:	2000      	movs	r0, #0
 800bbd0:	e7f7      	b.n	800bbc2 <__swsetup_r+0xba>
 800bbd2:	bf00      	nop
 800bbd4:	20000014 	.word	0x20000014
 800bbd8:	0800c6cc 	.word	0x0800c6cc
 800bbdc:	0800c6ec 	.word	0x0800c6ec
 800bbe0:	0800c6ac 	.word	0x0800c6ac

0800bbe4 <abort>:
 800bbe4:	b508      	push	{r3, lr}
 800bbe6:	2006      	movs	r0, #6
 800bbe8:	f000 fa52 	bl	800c090 <raise>
 800bbec:	2001      	movs	r0, #1
 800bbee:	f7f6 fe41 	bl	8002874 <_exit>
	...

0800bbf4 <__sflush_r>:
 800bbf4:	898a      	ldrh	r2, [r1, #12]
 800bbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	0710      	lsls	r0, r2, #28
 800bbfe:	460c      	mov	r4, r1
 800bc00:	d458      	bmi.n	800bcb4 <__sflush_r+0xc0>
 800bc02:	684b      	ldr	r3, [r1, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc05      	bgt.n	800bc14 <__sflush_r+0x20>
 800bc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	dc02      	bgt.n	800bc14 <__sflush_r+0x20>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc16:	2e00      	cmp	r6, #0
 800bc18:	d0f9      	beq.n	800bc0e <__sflush_r+0x1a>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc20:	682f      	ldr	r7, [r5, #0]
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	d032      	beq.n	800bc8c <__sflush_r+0x98>
 800bc26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	075a      	lsls	r2, r3, #29
 800bc2c:	d505      	bpl.n	800bc3a <__sflush_r+0x46>
 800bc2e:	6863      	ldr	r3, [r4, #4]
 800bc30:	1ac0      	subs	r0, r0, r3
 800bc32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc34:	b10b      	cbz	r3, 800bc3a <__sflush_r+0x46>
 800bc36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc38:	1ac0      	subs	r0, r0, r3
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc40:	6a21      	ldr	r1, [r4, #32]
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b0      	blx	r6
 800bc46:	1c43      	adds	r3, r0, #1
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	d106      	bne.n	800bc5a <__sflush_r+0x66>
 800bc4c:	6829      	ldr	r1, [r5, #0]
 800bc4e:	291d      	cmp	r1, #29
 800bc50:	d82c      	bhi.n	800bcac <__sflush_r+0xb8>
 800bc52:	4a2a      	ldr	r2, [pc, #168]	; (800bcfc <__sflush_r+0x108>)
 800bc54:	40ca      	lsrs	r2, r1
 800bc56:	07d6      	lsls	r6, r2, #31
 800bc58:	d528      	bpl.n	800bcac <__sflush_r+0xb8>
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	6062      	str	r2, [r4, #4]
 800bc5e:	04d9      	lsls	r1, r3, #19
 800bc60:	6922      	ldr	r2, [r4, #16]
 800bc62:	6022      	str	r2, [r4, #0]
 800bc64:	d504      	bpl.n	800bc70 <__sflush_r+0x7c>
 800bc66:	1c42      	adds	r2, r0, #1
 800bc68:	d101      	bne.n	800bc6e <__sflush_r+0x7a>
 800bc6a:	682b      	ldr	r3, [r5, #0]
 800bc6c:	b903      	cbnz	r3, 800bc70 <__sflush_r+0x7c>
 800bc6e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc72:	602f      	str	r7, [r5, #0]
 800bc74:	2900      	cmp	r1, #0
 800bc76:	d0ca      	beq.n	800bc0e <__sflush_r+0x1a>
 800bc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc7c:	4299      	cmp	r1, r3
 800bc7e:	d002      	beq.n	800bc86 <__sflush_r+0x92>
 800bc80:	4628      	mov	r0, r5
 800bc82:	f7ff fadb 	bl	800b23c <_free_r>
 800bc86:	2000      	movs	r0, #0
 800bc88:	6360      	str	r0, [r4, #52]	; 0x34
 800bc8a:	e7c1      	b.n	800bc10 <__sflush_r+0x1c>
 800bc8c:	6a21      	ldr	r1, [r4, #32]
 800bc8e:	2301      	movs	r3, #1
 800bc90:	4628      	mov	r0, r5
 800bc92:	47b0      	blx	r6
 800bc94:	1c41      	adds	r1, r0, #1
 800bc96:	d1c7      	bne.n	800bc28 <__sflush_r+0x34>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0c4      	beq.n	800bc28 <__sflush_r+0x34>
 800bc9e:	2b1d      	cmp	r3, #29
 800bca0:	d001      	beq.n	800bca6 <__sflush_r+0xb2>
 800bca2:	2b16      	cmp	r3, #22
 800bca4:	d101      	bne.n	800bcaa <__sflush_r+0xb6>
 800bca6:	602f      	str	r7, [r5, #0]
 800bca8:	e7b1      	b.n	800bc0e <__sflush_r+0x1a>
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb0:	81a3      	strh	r3, [r4, #12]
 800bcb2:	e7ad      	b.n	800bc10 <__sflush_r+0x1c>
 800bcb4:	690f      	ldr	r7, [r1, #16]
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	d0a9      	beq.n	800bc0e <__sflush_r+0x1a>
 800bcba:	0793      	lsls	r3, r2, #30
 800bcbc:	680e      	ldr	r6, [r1, #0]
 800bcbe:	bf08      	it	eq
 800bcc0:	694b      	ldreq	r3, [r1, #20]
 800bcc2:	600f      	str	r7, [r1, #0]
 800bcc4:	bf18      	it	ne
 800bcc6:	2300      	movne	r3, #0
 800bcc8:	eba6 0807 	sub.w	r8, r6, r7
 800bccc:	608b      	str	r3, [r1, #8]
 800bcce:	f1b8 0f00 	cmp.w	r8, #0
 800bcd2:	dd9c      	ble.n	800bc0e <__sflush_r+0x1a>
 800bcd4:	6a21      	ldr	r1, [r4, #32]
 800bcd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bcd8:	4643      	mov	r3, r8
 800bcda:	463a      	mov	r2, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	47b0      	blx	r6
 800bce0:	2800      	cmp	r0, #0
 800bce2:	dc06      	bgt.n	800bcf2 <__sflush_r+0xfe>
 800bce4:	89a3      	ldrh	r3, [r4, #12]
 800bce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcea:	81a3      	strh	r3, [r4, #12]
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	e78e      	b.n	800bc10 <__sflush_r+0x1c>
 800bcf2:	4407      	add	r7, r0
 800bcf4:	eba8 0800 	sub.w	r8, r8, r0
 800bcf8:	e7e9      	b.n	800bcce <__sflush_r+0xda>
 800bcfa:	bf00      	nop
 800bcfc:	20400001 	.word	0x20400001

0800bd00 <_fflush_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	690b      	ldr	r3, [r1, #16]
 800bd04:	4605      	mov	r5, r0
 800bd06:	460c      	mov	r4, r1
 800bd08:	b913      	cbnz	r3, 800bd10 <_fflush_r+0x10>
 800bd0a:	2500      	movs	r5, #0
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	b118      	cbz	r0, 800bd1a <_fflush_r+0x1a>
 800bd12:	6983      	ldr	r3, [r0, #24]
 800bd14:	b90b      	cbnz	r3, 800bd1a <_fflush_r+0x1a>
 800bd16:	f000 f887 	bl	800be28 <__sinit>
 800bd1a:	4b14      	ldr	r3, [pc, #80]	; (800bd6c <_fflush_r+0x6c>)
 800bd1c:	429c      	cmp	r4, r3
 800bd1e:	d11b      	bne.n	800bd58 <_fflush_r+0x58>
 800bd20:	686c      	ldr	r4, [r5, #4]
 800bd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0ef      	beq.n	800bd0a <_fflush_r+0xa>
 800bd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd2c:	07d0      	lsls	r0, r2, #31
 800bd2e:	d404      	bmi.n	800bd3a <_fflush_r+0x3a>
 800bd30:	0599      	lsls	r1, r3, #22
 800bd32:	d402      	bmi.n	800bd3a <_fflush_r+0x3a>
 800bd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd36:	f000 f915 	bl	800bf64 <__retarget_lock_acquire_recursive>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f7ff ff59 	bl	800bbf4 <__sflush_r>
 800bd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd44:	07da      	lsls	r2, r3, #31
 800bd46:	4605      	mov	r5, r0
 800bd48:	d4e0      	bmi.n	800bd0c <_fflush_r+0xc>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	059b      	lsls	r3, r3, #22
 800bd4e:	d4dd      	bmi.n	800bd0c <_fflush_r+0xc>
 800bd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd52:	f000 f908 	bl	800bf66 <__retarget_lock_release_recursive>
 800bd56:	e7d9      	b.n	800bd0c <_fflush_r+0xc>
 800bd58:	4b05      	ldr	r3, [pc, #20]	; (800bd70 <_fflush_r+0x70>)
 800bd5a:	429c      	cmp	r4, r3
 800bd5c:	d101      	bne.n	800bd62 <_fflush_r+0x62>
 800bd5e:	68ac      	ldr	r4, [r5, #8]
 800bd60:	e7df      	b.n	800bd22 <_fflush_r+0x22>
 800bd62:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <_fflush_r+0x74>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	bf08      	it	eq
 800bd68:	68ec      	ldreq	r4, [r5, #12]
 800bd6a:	e7da      	b.n	800bd22 <_fflush_r+0x22>
 800bd6c:	0800c6cc 	.word	0x0800c6cc
 800bd70:	0800c6ec 	.word	0x0800c6ec
 800bd74:	0800c6ac 	.word	0x0800c6ac

0800bd78 <std>:
 800bd78:	2300      	movs	r3, #0
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd86:	6083      	str	r3, [r0, #8]
 800bd88:	8181      	strh	r1, [r0, #12]
 800bd8a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd8c:	81c2      	strh	r2, [r0, #14]
 800bd8e:	6183      	str	r3, [r0, #24]
 800bd90:	4619      	mov	r1, r3
 800bd92:	2208      	movs	r2, #8
 800bd94:	305c      	adds	r0, #92	; 0x5c
 800bd96:	f7fb fe17 	bl	80079c8 <memset>
 800bd9a:	4b05      	ldr	r3, [pc, #20]	; (800bdb0 <std+0x38>)
 800bd9c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd9e:	4b05      	ldr	r3, [pc, #20]	; (800bdb4 <std+0x3c>)
 800bda0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bda2:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <std+0x40>)
 800bda4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bda6:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <std+0x44>)
 800bda8:	6224      	str	r4, [r4, #32]
 800bdaa:	6323      	str	r3, [r4, #48]	; 0x30
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	bf00      	nop
 800bdb0:	0800c0c9 	.word	0x0800c0c9
 800bdb4:	0800c0eb 	.word	0x0800c0eb
 800bdb8:	0800c123 	.word	0x0800c123
 800bdbc:	0800c147 	.word	0x0800c147

0800bdc0 <_cleanup_r>:
 800bdc0:	4901      	ldr	r1, [pc, #4]	; (800bdc8 <_cleanup_r+0x8>)
 800bdc2:	f000 b8af 	b.w	800bf24 <_fwalk_reent>
 800bdc6:	bf00      	nop
 800bdc8:	0800bd01 	.word	0x0800bd01

0800bdcc <__sfmoreglue>:
 800bdcc:	b570      	push	{r4, r5, r6, lr}
 800bdce:	1e4a      	subs	r2, r1, #1
 800bdd0:	2568      	movs	r5, #104	; 0x68
 800bdd2:	4355      	muls	r5, r2
 800bdd4:	460e      	mov	r6, r1
 800bdd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdda:	f7ff fa7f 	bl	800b2dc <_malloc_r>
 800bdde:	4604      	mov	r4, r0
 800bde0:	b140      	cbz	r0, 800bdf4 <__sfmoreglue+0x28>
 800bde2:	2100      	movs	r1, #0
 800bde4:	e9c0 1600 	strd	r1, r6, [r0]
 800bde8:	300c      	adds	r0, #12
 800bdea:	60a0      	str	r0, [r4, #8]
 800bdec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdf0:	f7fb fdea 	bl	80079c8 <memset>
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}

0800bdf8 <__sfp_lock_acquire>:
 800bdf8:	4801      	ldr	r0, [pc, #4]	; (800be00 <__sfp_lock_acquire+0x8>)
 800bdfa:	f000 b8b3 	b.w	800bf64 <__retarget_lock_acquire_recursive>
 800bdfe:	bf00      	nop
 800be00:	20000674 	.word	0x20000674

0800be04 <__sfp_lock_release>:
 800be04:	4801      	ldr	r0, [pc, #4]	; (800be0c <__sfp_lock_release+0x8>)
 800be06:	f000 b8ae 	b.w	800bf66 <__retarget_lock_release_recursive>
 800be0a:	bf00      	nop
 800be0c:	20000674 	.word	0x20000674

0800be10 <__sinit_lock_acquire>:
 800be10:	4801      	ldr	r0, [pc, #4]	; (800be18 <__sinit_lock_acquire+0x8>)
 800be12:	f000 b8a7 	b.w	800bf64 <__retarget_lock_acquire_recursive>
 800be16:	bf00      	nop
 800be18:	2000066f 	.word	0x2000066f

0800be1c <__sinit_lock_release>:
 800be1c:	4801      	ldr	r0, [pc, #4]	; (800be24 <__sinit_lock_release+0x8>)
 800be1e:	f000 b8a2 	b.w	800bf66 <__retarget_lock_release_recursive>
 800be22:	bf00      	nop
 800be24:	2000066f 	.word	0x2000066f

0800be28 <__sinit>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7ff fff0 	bl	800be10 <__sinit_lock_acquire>
 800be30:	69a3      	ldr	r3, [r4, #24]
 800be32:	b11b      	cbz	r3, 800be3c <__sinit+0x14>
 800be34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be38:	f7ff bff0 	b.w	800be1c <__sinit_lock_release>
 800be3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be40:	6523      	str	r3, [r4, #80]	; 0x50
 800be42:	4b13      	ldr	r3, [pc, #76]	; (800be90 <__sinit+0x68>)
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <__sinit+0x6c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	62a2      	str	r2, [r4, #40]	; 0x28
 800be4a:	42a3      	cmp	r3, r4
 800be4c:	bf04      	itt	eq
 800be4e:	2301      	moveq	r3, #1
 800be50:	61a3      	streq	r3, [r4, #24]
 800be52:	4620      	mov	r0, r4
 800be54:	f000 f820 	bl	800be98 <__sfp>
 800be58:	6060      	str	r0, [r4, #4]
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 f81c 	bl	800be98 <__sfp>
 800be60:	60a0      	str	r0, [r4, #8]
 800be62:	4620      	mov	r0, r4
 800be64:	f000 f818 	bl	800be98 <__sfp>
 800be68:	2200      	movs	r2, #0
 800be6a:	60e0      	str	r0, [r4, #12]
 800be6c:	2104      	movs	r1, #4
 800be6e:	6860      	ldr	r0, [r4, #4]
 800be70:	f7ff ff82 	bl	800bd78 <std>
 800be74:	68a0      	ldr	r0, [r4, #8]
 800be76:	2201      	movs	r2, #1
 800be78:	2109      	movs	r1, #9
 800be7a:	f7ff ff7d 	bl	800bd78 <std>
 800be7e:	68e0      	ldr	r0, [r4, #12]
 800be80:	2202      	movs	r2, #2
 800be82:	2112      	movs	r1, #18
 800be84:	f7ff ff78 	bl	800bd78 <std>
 800be88:	2301      	movs	r3, #1
 800be8a:	61a3      	str	r3, [r4, #24]
 800be8c:	e7d2      	b.n	800be34 <__sinit+0xc>
 800be8e:	bf00      	nop
 800be90:	0800c258 	.word	0x0800c258
 800be94:	0800bdc1 	.word	0x0800bdc1

0800be98 <__sfp>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	4607      	mov	r7, r0
 800be9c:	f7ff ffac 	bl	800bdf8 <__sfp_lock_acquire>
 800bea0:	4b1e      	ldr	r3, [pc, #120]	; (800bf1c <__sfp+0x84>)
 800bea2:	681e      	ldr	r6, [r3, #0]
 800bea4:	69b3      	ldr	r3, [r6, #24]
 800bea6:	b913      	cbnz	r3, 800beae <__sfp+0x16>
 800bea8:	4630      	mov	r0, r6
 800beaa:	f7ff ffbd 	bl	800be28 <__sinit>
 800beae:	3648      	adds	r6, #72	; 0x48
 800beb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	d503      	bpl.n	800bec0 <__sfp+0x28>
 800beb8:	6833      	ldr	r3, [r6, #0]
 800beba:	b30b      	cbz	r3, 800bf00 <__sfp+0x68>
 800bebc:	6836      	ldr	r6, [r6, #0]
 800bebe:	e7f7      	b.n	800beb0 <__sfp+0x18>
 800bec0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bec4:	b9d5      	cbnz	r5, 800befc <__sfp+0x64>
 800bec6:	4b16      	ldr	r3, [pc, #88]	; (800bf20 <__sfp+0x88>)
 800bec8:	60e3      	str	r3, [r4, #12]
 800beca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bece:	6665      	str	r5, [r4, #100]	; 0x64
 800bed0:	f000 f847 	bl	800bf62 <__retarget_lock_init_recursive>
 800bed4:	f7ff ff96 	bl	800be04 <__sfp_lock_release>
 800bed8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bedc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bee0:	6025      	str	r5, [r4, #0]
 800bee2:	61a5      	str	r5, [r4, #24]
 800bee4:	2208      	movs	r2, #8
 800bee6:	4629      	mov	r1, r5
 800bee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800beec:	f7fb fd6c 	bl	80079c8 <memset>
 800bef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bef8:	4620      	mov	r0, r4
 800befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800befc:	3468      	adds	r4, #104	; 0x68
 800befe:	e7d9      	b.n	800beb4 <__sfp+0x1c>
 800bf00:	2104      	movs	r1, #4
 800bf02:	4638      	mov	r0, r7
 800bf04:	f7ff ff62 	bl	800bdcc <__sfmoreglue>
 800bf08:	4604      	mov	r4, r0
 800bf0a:	6030      	str	r0, [r6, #0]
 800bf0c:	2800      	cmp	r0, #0
 800bf0e:	d1d5      	bne.n	800bebc <__sfp+0x24>
 800bf10:	f7ff ff78 	bl	800be04 <__sfp_lock_release>
 800bf14:	230c      	movs	r3, #12
 800bf16:	603b      	str	r3, [r7, #0]
 800bf18:	e7ee      	b.n	800bef8 <__sfp+0x60>
 800bf1a:	bf00      	nop
 800bf1c:	0800c258 	.word	0x0800c258
 800bf20:	ffff0001 	.word	0xffff0001

0800bf24 <_fwalk_reent>:
 800bf24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf28:	4606      	mov	r6, r0
 800bf2a:	4688      	mov	r8, r1
 800bf2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf30:	2700      	movs	r7, #0
 800bf32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf36:	f1b9 0901 	subs.w	r9, r9, #1
 800bf3a:	d505      	bpl.n	800bf48 <_fwalk_reent+0x24>
 800bf3c:	6824      	ldr	r4, [r4, #0]
 800bf3e:	2c00      	cmp	r4, #0
 800bf40:	d1f7      	bne.n	800bf32 <_fwalk_reent+0xe>
 800bf42:	4638      	mov	r0, r7
 800bf44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf48:	89ab      	ldrh	r3, [r5, #12]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d907      	bls.n	800bf5e <_fwalk_reent+0x3a>
 800bf4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf52:	3301      	adds	r3, #1
 800bf54:	d003      	beq.n	800bf5e <_fwalk_reent+0x3a>
 800bf56:	4629      	mov	r1, r5
 800bf58:	4630      	mov	r0, r6
 800bf5a:	47c0      	blx	r8
 800bf5c:	4307      	orrs	r7, r0
 800bf5e:	3568      	adds	r5, #104	; 0x68
 800bf60:	e7e9      	b.n	800bf36 <_fwalk_reent+0x12>

0800bf62 <__retarget_lock_init_recursive>:
 800bf62:	4770      	bx	lr

0800bf64 <__retarget_lock_acquire_recursive>:
 800bf64:	4770      	bx	lr

0800bf66 <__retarget_lock_release_recursive>:
 800bf66:	4770      	bx	lr

0800bf68 <__swhatbuf_r>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	460e      	mov	r6, r1
 800bf6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf70:	2900      	cmp	r1, #0
 800bf72:	b096      	sub	sp, #88	; 0x58
 800bf74:	4614      	mov	r4, r2
 800bf76:	461d      	mov	r5, r3
 800bf78:	da07      	bge.n	800bf8a <__swhatbuf_r+0x22>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	602b      	str	r3, [r5, #0]
 800bf7e:	89b3      	ldrh	r3, [r6, #12]
 800bf80:	061a      	lsls	r2, r3, #24
 800bf82:	d410      	bmi.n	800bfa6 <__swhatbuf_r+0x3e>
 800bf84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf88:	e00e      	b.n	800bfa8 <__swhatbuf_r+0x40>
 800bf8a:	466a      	mov	r2, sp
 800bf8c:	f000 f902 	bl	800c194 <_fstat_r>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	dbf2      	blt.n	800bf7a <__swhatbuf_r+0x12>
 800bf94:	9a01      	ldr	r2, [sp, #4]
 800bf96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf9e:	425a      	negs	r2, r3
 800bfa0:	415a      	adcs	r2, r3
 800bfa2:	602a      	str	r2, [r5, #0]
 800bfa4:	e7ee      	b.n	800bf84 <__swhatbuf_r+0x1c>
 800bfa6:	2340      	movs	r3, #64	; 0x40
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	b016      	add	sp, #88	; 0x58
 800bfae:	bd70      	pop	{r4, r5, r6, pc}

0800bfb0 <__smakebuf_r>:
 800bfb0:	898b      	ldrh	r3, [r1, #12]
 800bfb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bfb4:	079d      	lsls	r5, r3, #30
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460c      	mov	r4, r1
 800bfba:	d507      	bpl.n	800bfcc <__smakebuf_r+0x1c>
 800bfbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bfc0:	6023      	str	r3, [r4, #0]
 800bfc2:	6123      	str	r3, [r4, #16]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	6163      	str	r3, [r4, #20]
 800bfc8:	b002      	add	sp, #8
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	ab01      	add	r3, sp, #4
 800bfce:	466a      	mov	r2, sp
 800bfd0:	f7ff ffca 	bl	800bf68 <__swhatbuf_r>
 800bfd4:	9900      	ldr	r1, [sp, #0]
 800bfd6:	4605      	mov	r5, r0
 800bfd8:	4630      	mov	r0, r6
 800bfda:	f7ff f97f 	bl	800b2dc <_malloc_r>
 800bfde:	b948      	cbnz	r0, 800bff4 <__smakebuf_r+0x44>
 800bfe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe4:	059a      	lsls	r2, r3, #22
 800bfe6:	d4ef      	bmi.n	800bfc8 <__smakebuf_r+0x18>
 800bfe8:	f023 0303 	bic.w	r3, r3, #3
 800bfec:	f043 0302 	orr.w	r3, r3, #2
 800bff0:	81a3      	strh	r3, [r4, #12]
 800bff2:	e7e3      	b.n	800bfbc <__smakebuf_r+0xc>
 800bff4:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <__smakebuf_r+0x7c>)
 800bff6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	6020      	str	r0, [r4, #0]
 800bffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	9b00      	ldr	r3, [sp, #0]
 800c004:	6163      	str	r3, [r4, #20]
 800c006:	9b01      	ldr	r3, [sp, #4]
 800c008:	6120      	str	r0, [r4, #16]
 800c00a:	b15b      	cbz	r3, 800c024 <__smakebuf_r+0x74>
 800c00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c010:	4630      	mov	r0, r6
 800c012:	f000 f8d1 	bl	800c1b8 <_isatty_r>
 800c016:	b128      	cbz	r0, 800c024 <__smakebuf_r+0x74>
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	f023 0303 	bic.w	r3, r3, #3
 800c01e:	f043 0301 	orr.w	r3, r3, #1
 800c022:	81a3      	strh	r3, [r4, #12]
 800c024:	89a0      	ldrh	r0, [r4, #12]
 800c026:	4305      	orrs	r5, r0
 800c028:	81a5      	strh	r5, [r4, #12]
 800c02a:	e7cd      	b.n	800bfc8 <__smakebuf_r+0x18>
 800c02c:	0800bdc1 	.word	0x0800bdc1

0800c030 <_malloc_usable_size_r>:
 800c030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c034:	1f18      	subs	r0, r3, #4
 800c036:	2b00      	cmp	r3, #0
 800c038:	bfbc      	itt	lt
 800c03a:	580b      	ldrlt	r3, [r1, r0]
 800c03c:	18c0      	addlt	r0, r0, r3
 800c03e:	4770      	bx	lr

0800c040 <_raise_r>:
 800c040:	291f      	cmp	r1, #31
 800c042:	b538      	push	{r3, r4, r5, lr}
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	d904      	bls.n	800c054 <_raise_r+0x14>
 800c04a:	2316      	movs	r3, #22
 800c04c:	6003      	str	r3, [r0, #0]
 800c04e:	f04f 30ff 	mov.w	r0, #4294967295
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c056:	b112      	cbz	r2, 800c05e <_raise_r+0x1e>
 800c058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c05c:	b94b      	cbnz	r3, 800c072 <_raise_r+0x32>
 800c05e:	4620      	mov	r0, r4
 800c060:	f000 f830 	bl	800c0c4 <_getpid_r>
 800c064:	462a      	mov	r2, r5
 800c066:	4601      	mov	r1, r0
 800c068:	4620      	mov	r0, r4
 800c06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c06e:	f000 b817 	b.w	800c0a0 <_kill_r>
 800c072:	2b01      	cmp	r3, #1
 800c074:	d00a      	beq.n	800c08c <_raise_r+0x4c>
 800c076:	1c59      	adds	r1, r3, #1
 800c078:	d103      	bne.n	800c082 <_raise_r+0x42>
 800c07a:	2316      	movs	r3, #22
 800c07c:	6003      	str	r3, [r0, #0]
 800c07e:	2001      	movs	r0, #1
 800c080:	e7e7      	b.n	800c052 <_raise_r+0x12>
 800c082:	2400      	movs	r4, #0
 800c084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c088:	4628      	mov	r0, r5
 800c08a:	4798      	blx	r3
 800c08c:	2000      	movs	r0, #0
 800c08e:	e7e0      	b.n	800c052 <_raise_r+0x12>

0800c090 <raise>:
 800c090:	4b02      	ldr	r3, [pc, #8]	; (800c09c <raise+0xc>)
 800c092:	4601      	mov	r1, r0
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	f7ff bfd3 	b.w	800c040 <_raise_r>
 800c09a:	bf00      	nop
 800c09c:	20000014 	.word	0x20000014

0800c0a0 <_kill_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d07      	ldr	r5, [pc, #28]	; (800c0c0 <_kill_r+0x20>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	602b      	str	r3, [r5, #0]
 800c0ae:	f7f6 fbd1 	bl	8002854 <_kill>
 800c0b2:	1c43      	adds	r3, r0, #1
 800c0b4:	d102      	bne.n	800c0bc <_kill_r+0x1c>
 800c0b6:	682b      	ldr	r3, [r5, #0]
 800c0b8:	b103      	cbz	r3, 800c0bc <_kill_r+0x1c>
 800c0ba:	6023      	str	r3, [r4, #0]
 800c0bc:	bd38      	pop	{r3, r4, r5, pc}
 800c0be:	bf00      	nop
 800c0c0:	20000668 	.word	0x20000668

0800c0c4 <_getpid_r>:
 800c0c4:	f7f6 bbbe 	b.w	8002844 <_getpid>

0800c0c8 <__sread>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d0:	f000 f894 	bl	800c1fc <_read_r>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	bfab      	itete	ge
 800c0d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c0da:	89a3      	ldrhlt	r3, [r4, #12]
 800c0dc:	181b      	addge	r3, r3, r0
 800c0de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c0e2:	bfac      	ite	ge
 800c0e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c0e6:	81a3      	strhlt	r3, [r4, #12]
 800c0e8:	bd10      	pop	{r4, pc}

0800c0ea <__swrite>:
 800c0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ee:	461f      	mov	r7, r3
 800c0f0:	898b      	ldrh	r3, [r1, #12]
 800c0f2:	05db      	lsls	r3, r3, #23
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	d505      	bpl.n	800c108 <__swrite+0x1e>
 800c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c100:	2302      	movs	r3, #2
 800c102:	2200      	movs	r2, #0
 800c104:	f000 f868 	bl	800c1d8 <_lseek_r>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c10e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	4632      	mov	r2, r6
 800c116:	463b      	mov	r3, r7
 800c118:	4628      	mov	r0, r5
 800c11a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c11e:	f000 b817 	b.w	800c150 <_write_r>

0800c122 <__sseek>:
 800c122:	b510      	push	{r4, lr}
 800c124:	460c      	mov	r4, r1
 800c126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12a:	f000 f855 	bl	800c1d8 <_lseek_r>
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	bf15      	itete	ne
 800c134:	6560      	strne	r0, [r4, #84]	; 0x54
 800c136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c13a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c13e:	81a3      	strheq	r3, [r4, #12]
 800c140:	bf18      	it	ne
 800c142:	81a3      	strhne	r3, [r4, #12]
 800c144:	bd10      	pop	{r4, pc}

0800c146 <__sclose>:
 800c146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14a:	f000 b813 	b.w	800c174 <_close_r>
	...

0800c150 <_write_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d07      	ldr	r5, [pc, #28]	; (800c170 <_write_r+0x20>)
 800c154:	4604      	mov	r4, r0
 800c156:	4608      	mov	r0, r1
 800c158:	4611      	mov	r1, r2
 800c15a:	2200      	movs	r2, #0
 800c15c:	602a      	str	r2, [r5, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	f7f6 fbaf 	bl	80028c2 <_write>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_write_r+0x1e>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_write_r+0x1e>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	20000668 	.word	0x20000668

0800c174 <_close_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d06      	ldr	r5, [pc, #24]	; (800c190 <_close_r+0x1c>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7f6 fbbb 	bl	80028fa <_close>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_close_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_close_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	20000668 	.word	0x20000668

0800c194 <_fstat_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	; (800c1b4 <_fstat_r+0x20>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	4611      	mov	r1, r2
 800c1a0:	602b      	str	r3, [r5, #0]
 800c1a2:	f7f6 fbb6 	bl	8002912 <_fstat>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	d102      	bne.n	800c1b0 <_fstat_r+0x1c>
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	b103      	cbz	r3, 800c1b0 <_fstat_r+0x1c>
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	bd38      	pop	{r3, r4, r5, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20000668 	.word	0x20000668

0800c1b8 <_isatty_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d06      	ldr	r5, [pc, #24]	; (800c1d4 <_isatty_r+0x1c>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	602b      	str	r3, [r5, #0]
 800c1c4:	f7f6 fbb5 	bl	8002932 <_isatty>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_isatty_r+0x1a>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_isatty_r+0x1a>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	20000668 	.word	0x20000668

0800c1d8 <_lseek_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	; (800c1f8 <_lseek_r+0x20>)
 800c1dc:	4604      	mov	r4, r0
 800c1de:	4608      	mov	r0, r1
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	602a      	str	r2, [r5, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	f7f6 fbae 	bl	8002948 <_lseek>
 800c1ec:	1c43      	adds	r3, r0, #1
 800c1ee:	d102      	bne.n	800c1f6 <_lseek_r+0x1e>
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	b103      	cbz	r3, 800c1f6 <_lseek_r+0x1e>
 800c1f4:	6023      	str	r3, [r4, #0]
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	20000668 	.word	0x20000668

0800c1fc <_read_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d07      	ldr	r5, [pc, #28]	; (800c21c <_read_r+0x20>)
 800c200:	4604      	mov	r4, r0
 800c202:	4608      	mov	r0, r1
 800c204:	4611      	mov	r1, r2
 800c206:	2200      	movs	r2, #0
 800c208:	602a      	str	r2, [r5, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	f7f6 fb3c 	bl	8002888 <_read>
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d102      	bne.n	800c21a <_read_r+0x1e>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b103      	cbz	r3, 800c21a <_read_r+0x1e>
 800c218:	6023      	str	r3, [r4, #0]
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	20000668 	.word	0x20000668

0800c220 <_init>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr

0800c22c <_fini>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr
